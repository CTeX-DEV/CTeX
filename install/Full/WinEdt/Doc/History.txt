* WinEdt History.txt
Last modified on Monday, November 30, 2015  14:02
____________________________________________________________________


WinEdt 9 [Build 20150731 (v. 9.1)]
==================================

- Auto completion can now also be triggered by the Tab key (as well
as Enter). This was suggested by a few users that are accustomed to
such behavior in other applications.

- Automatic assignment of DDE service for Adobe DC (for those that
insist on using Adobe as a working previewer for pdf documents
compiled from TeX sources)...

- Minor improvements to BibTeX.edt compilation macro.

- Minor bug fixes.

------------------------------------------------------------------

WinEdt 9 [Build 20150515 (v. 9.1)]
==================================

- WinEdt features a new configurable auto-completion mechanism. If
enabled the auto-completion popup window with a list of matching
items (suggestions) shows up while you are typing certain items
(such as LaTeX commands or environments). You can continue to type
text in order to filter/ refine the number of suggested items.
Pressing Enter inserts the selected item (or template).

[Page] Down and Up keys can be used to move through the list of
suggested items. Esc key (or any other shortcut) hides the
auto-completion Window. You can (but do not have to) use the mouse
interface to insert an item by double-clicking on it. A few
keyboard shortcuts (like Down and Enter) will usually do if (like
me) you don't want to use the mouse...

In the default settings the auto-completion form can be manually
activated (and hidden) by pressing the ESC key.

The auto-completion form is resizable: size it to some dimensions
suitable for your needs and the size of your screen. Its initial
position is determined by the insertion point (caret) in your text.
This form never gets focus and you can continue typing your text
until you see the item or template that you want to insert, at
which point press Enter to perform completion.

A new [AUTO_COMPLETE] configuration section has been introduced to
configure this functionality. Two global properties can be used to
disable it:

  DISABLE_AUTO_COMPLETION=1
  DISABLE_ESC_COMPLETION=1

They are also available in the Preferences Dialog | Editor...

Completion of TeX environments allows you to insert nxm tables,
arrays, or matrices, lists or equations. Eg. typing:

  \begin{a

will give a suggestion to insert n x m array template.

It is also possible to enable LaTeX commands completion in which
case typing

  \beg

will produce a list of completions with \begin{...} being the first
item. Pressing Enter will continue auto-completions by offering
available environments. You can type a letter or two to refine the
list and then press Enter to insert the selected template.

Beside standard LaTeX and AMS LaTeX environments WinEdt also
collects user-defined environments in the preamble and they can be
inserted as well. For some users this is a convenient alternative
to having to choose numerous items from the Insert menu or toolbar.

A new event handler "Dynamic Dictionaries" has been introduced to
build a dictionary for user-defined environments and commands (with
and without arguments). These dictionaries are used for
auto-completion (and as always they are user-customizable - through
the Advanced -> Event Handlers Section of the Options Interface).

New macros can be used to manually activate or hide the
Auto-Completion form:

  AutoPopup(ESC: 0..1, "Item Name");
  AutoPopupHide;

AutoPopup(1); is used in the Escape Key event handler. It only
activates the form when the global property DISABLE_ESC_COMPLETION
is set to 0.

For those who don't want the distraction of the completion form
popping up all the time, a few active strings such as "\begin{}"
for TeX and "<>" for HTML have been defined to activate completion
via active strings.

This functionality is configurable. Check the default settings in
the Auto Completion and Active Strings configuration sections of
the Options Interface. You can add your own commands and
environments or comment out any that you never use. Some users may
find this an essential feature while others may consider it an
unwanted and annoying distraction. It is easy to disable or
reconfigure it to only allow manual activation via the ESC key. The
default settings have it enabled because new users may otherwise
not be aware of its existence and for those who do not much like it
(me included) it is easy to turn off (no need to complain to me
about it being annoying)...

- The Advanced Section of the Options Interface now contains
toolbar buttons to browse the install directory (usually readonly)
and to make and open a local copy of a macro or configuration
script (assuming that a global readonly copy is currently opened in
WinEdt).

For example, the new auto-completion uses numerous macros in
"%B\Macros\Auto Complete" folder. Advanced users may want to see
how they work and perhaps make some modifications to meet their own
particular needs. Rather than listing all of them in the Options
Interface you can use this method to create and edit a local copy
of event handler macros like this...

- New macros

  LetTempReg("Value","!");
  // Assign a value to temporary registers %? ,%!?, %-?, or %#?
  // when the second parameter is "", "!", "-", or "#"...
  // This macro is used extensively in Auto Completion event handler macros.

  EnableDict("Dictionary Name",Enable: -1..1, Reload: 0..1);
  // Makes Dynamic Dictionaries for user-defined environments
  // and commands easy to load (behind the scene).
  // Dictionaries are automatically updated with the contents of
  // your preamble when the tree is rebuilt or when you manually
  // start the auto-completion form...

- WinEdt bullets used as placeholders in many templates (including
the new auto completion mechanism) are now represented by the
proper Unicode Character 'BULLET' (U+2022) rather than an asterisk
- in order to make them easier to spot. The Screen translation
table has been modified for this purpose:

  #127 -> "â€¢" // Unicode Character 'BULLET' (U+2022)

If you prefer something else (like *) modify this translation table
according to your preferences. Internally this symbol remains
represented by the non-printable character U+007F (#127), just like
in older versions (for good reasons)...

The Tools menu contains items and shortcuts to insert or quickly
move through bullets by selecting them with the shortcuts
Ctrl+[Shift+]Space. Once the placeholder (bullet) is selected you
can start typing text that should replace it before a template
environment is ready for compilation...

For example the "\begin{cases}" auto-completion will insert
something like:

    \begin{cases}
      , & \mbox{if }  \\
      , & \mbox{if }  \\
      , & \mbox{otherwise}.
    \end{cases}

You have to fill in the missing info marked by the Bullets: use the
Ctrl+Space shortcut to move through them...

- A new list interface (similar to the Windows Open Dialog) has
been introduced to quickly select, open, or close a document. For
users with the habit of having lots of documents opened at any time
this interface may be preferable to browsing/ searching document
tabs in order to activate a document. The menu item Window -> MDI
Shortcuts -> Document List (F2) can be used to activate the new
Document List dialog with the list of currently opened documents.
Try it!

- This interface can be customized and used to display and make
selections in custom file lists... It can be configured through a
new configuration section:

  [DOCUMENT_LIST]

available in the Options Interface -> Additional GUI Controls
(after Document Tabs). Most of the tasks can be performed through
the keyboard interface (rather than being forced to use a mouse).

- A new macro has been introduced to launch this dialog with
properties other than defaults as specified in the [DOCUMENT_LIST]
configuration section (if required):

  ShowDocumentList(
    Data Flags: 0..11,
    Fast: 0..1,
    "CustomList",
    Flags_on: 0..11111111,
    Flags_off: 0..11111111,
    MoveTab: 0..3,
    UseCustomTypeFilter: 0..1,
    "CustomTypeFilter");

   Data Flags (from right to left):
     Include Opened Documents
     Include Recent Files List

   Enabling the Fast property prevents WinEdt from checking for file
   existence or file date stamp, which can be slow for large lists
   on remote drives. If such checking makes this interface too slow
   enable this flag and sacrifice date stamp info to improve the
   performance in large lists...

   CustomList is LF or CR+LF separated list of files supplied by the
   caller. Eg. one can use ListFolderFiles or ListOpenedFiles
   macros to produce and filter the list that will be displayed in
   this interface. This parameter can be empty if Data Flags are
   set so as to display standard file lists or it can be combined
   with standard lists.

   Flags suppress default properties in [DOCUMENT_LIST].
   Flags_on force them enabled and Flags_off force them disabled.
   If both flags are identical the default is applied.
   Default properties are restored to their previous values after
   the interface is finished.

   In most cases both parameters can be set to 0...

   Flags (from right to left):
       EXIT_ON_ENTER
       OPEN_ON_ENTER
       CANCEL_ON_ESC
       FOCUS_DROP_DOWN_LIST
       HIDE_DROP_DOWN_LIST
       LIST_NEW_DOCUMENTS
       SELECT_ACTIVE_DOCUMENT
       SHOW_IMAGES

   These properties are described in [DOCUMENT_LIST] configuration
   section...

   Nonzero value for MoveTab property sets: MOVE_DOCUMENT_TAB=MoveTab-2

   UseCustomTypeFilter=1 indicates that the specified
   CustomTypeFilter is applied (otherwise the default one
   TYPE_FILTER is used to filter out unwanted document types).

- Gather control now allows you to crosscheck items in one page
against another page and put a prefix in front of found or not
found items. For example, if you "filter" labels a crosscheck with
references is performed: unused labels are marked with prefix "!".
In the final version of your document such labels can be safely
removed. A few users suggested such functionality to help them with
a cleanup. Furthermore, the same functionality applied to
references will mark those that contain undefined labels with "?".
This is a more serious issue and has to be fixed as such errors or
warnings are also reported by LaTeX. Similar functionality is
implemented for bibliography items against citations.

New properties in the [GATHER] configuration section can be used to
enable this functionality for certain pages. For example, TeX
Labels Page contains the following definitions:

  PAGE_FILTER="Ref-TeX"            // Search for references
  PAGE_FILTER_FOUND_PREFIX=""
  PAGE_FILTER_NOT_FOUND_PREFIX="!" // Prefix for unused labels

Gather control contains a new button "Filter Items" that can be
used to perform a crosscheck of items in the current page. The
button is only enabled for those pages that have the PAGE_FILTER
property set to a non-empty string.

- [KEYWORDS] configuration section now allows

  HIGHLIGHT_START=1

property for keywords. Some users may prefer this option enabled
for LaTeX Keywords in order to highlight the leading backslash with
the color used for keywords. It is a matter of taste. For
consistency HIGHLIGHT_STOP is also allowed (but never used in
default settings)...

- New macro (per request) returns the name of the top-file in the
project list (the last closed document):

  PrjGetLastClosedDocument(Reg: -11..9);

- New macro (per request) returns the size of a file in bytes:

  GetFileSize("FileName", Reg: -11..9);

- New macros to manipulate file and project lists:

  GetFileList(Reg, Existing_Only: 0..1, "TYPE_FILTER");
  GetPrjList(Reg, Existing_Only: 0..1);
  GetFileListCount(Reg, Existing_Only: 0..1, "TYPE_FILTER");
  GetPrjListCount(Reg, Existing_Only: 0..1);
  RemoveNonexistentFiles("TYPE_FILTER");
  RemoveNonexistentProjects;

- The following macros now allow larger 64-bit (rather than 32-bit)
signed integer expressions as arguments (marked with ##):

  LetRegNum(#-11..9,##,#0..99,#0..99);
  IfNum(##,##,"","","");
  IfGetNum("##",##,##,"","");

This can come in handy and why not...

- Selecting the value ROAMING_BOOKMARK=0 in [BOOKMARKS]
configuration section now works as it did before. It is not a
common selection (used by few) but for what it's worth it now works
as it did in WinEdt 5 (as requested by one user that prefers this
value disabled and feels strongly about how it should work in such
a case:-).

- A new property LEFT_MARGIN=0..99 in the [PREFERENCES]
configuration section can be used to control the spacing between
the left margin (bookmarks, line numbers, and folding) and text.
Previously this value was hard-coded to 2 pixels (which may not be
enough for some circumstances).

- Extra LEFT_MARGIN specifications in indented switches with custom
background is now ignored if the text in the next line is not
indented "enough". This way users that do not indent certain
environments will not experience background color shifted to the
right of their text. Many users do not indent certain environments
and text looked "odd" with background color starting at the
specified left margin but text not being indented. Of course, it is
possible to disable indented environments (Preferences Dialog) but
this way users that do indent such environments and those that do
not get the desired result with default settings...

- Horizontal scrolling now excludes the left margin from scrolling
and moves only text (clipped at the left margin)...

- Duplicated encoding options have been removed from the Document
Settings| Format Tab page since they are also present in the CP
Converter Page of the same Dialog. Furthermore, using the Save
button in CP Converter now updates the time stamp to prevent a
message about the file being externally modified...

- FindInString and SubstituteInString macros have been optimized
and now work much faster with large strings as parameters...

    For example, executing the code below in an older version takes
    about 20 seconds (and increases quadratically with the length
    of the input string). WinEdt 9.1 accomplishes the same task in
    approx. 0.3sec. and the CPU increases linearly (Size*Log(Size))
    with the size of the string (as it should):

        LetReg(0);
        StartWorking('Replacing...');
        Repeat(20000,!"LetReg(0,'%!0a%\');");
        StartTimer;
        SubstituteInString('%!0','<a','bbb',11);
        SubstituteInString('%!0','bbb','a',10);
        SubstituteInString('%!0','a','b');
        GetTimer(1);
        StopWorking;
        Prompt('CPU: %!1');
      End;

- Flags in SubstituteInString now have an extra value that can be
used to tell the function that the replacement string is not a
regular expression even when the find string is a RegEx. This can
make such replacements faster since only the find portion needs to
be treated as an expression...

Furthermore, replacement regular expressions now allow less
escaping because most special RegEx characters have no special
meaning for RegEx replacements.

The only characters that have a special meaning in RegEx
replacements (and require escaping) are: '\', '<', and '>'.

The Macro Manual now contains a short section on "RegEx
Replacements" that explains how to properly use a simplified RegEx
syntax in replacements...

- A few minor bug fixes and enhancements to the default settings,
including support for memoir and KOMA-script sectioning commands.

=========

    NOTE: Behind the scenes I have been making a significative
    effort towards using MS Uniscribe library as the default
    scripting engine. Once functional, this will allow WinEdt to
    properly handle complex language processing (things like
    bidirectional (RTL) text and exotic language features).
    However, this engine is not used in WinEdt 9.1 as it requires
    more testing and some optimization for when complex processing
    is not required. This will take some time. A new "Uniscribe"
    version, WinEdt 10, will likely be released as a major upgrade
    sometime in 2016 or even 2017...

    A few low-level screen refreshing optimizations required for
    Uniscribe have been incorporated in version 9.1. For most users
    this will result in faster refreshing and less flickering.

------------------------------------------------------------------

WinEdt 9 [Build 20140917 (v. 9.0)]
==================================

- By popular demand the default WinEdt icon has been replaced with
a less transparent one in order to improve its visibility on
desktop, taskbar, or window title bar. WinEdt-Logo.ico and
WinEdt-Classic.ico are still available in %B\WinShell\Icons folder
(together with other icons used for filetype associations).

- Drag-and-drop from UNC Network drives now works (a bug that was
there in all previous versions has been fixed).

- Delete Working Files interface now uses a more reliable criteria
to determine which files are protected and will not be deleted
(only readonly, hidden, and system files are excluded)...

- A few minor enhancements to Gather macros...

------------------------------------------------------------------

WinEdt 9 [Build 20140815 (v. 9.0)]
==================================

- WinEdt now has a new configuration [IMAGE_RESOURCES]. Here is
where dpi-dependent Image Resources are managed:

  This section manages dpi-dependent WinEdt Image Resources
  The closest DPI selector <= screen resolution applies
  Common Windows DPI (Magnification) values are:
     96dpi (100%) - Old Low Resolution Monitors
    120dpi (125%)
    144dpi (150%)
    192dpi (200%) - New Ultra High Definition Displays

  WinEdt comes with a pre-compiled Office 2013-style (high quality)
  set of (over 500) icons in four sizes: 16x16, 24x24, 32x32,and
  48x48. They are available in
  %B\Bitmaps\Resources\WRLib32(dim).dll files. As was the case in
  all versions since WinEdt 6 images were prepared and created by
  Luca (based on the icon sets from Glyfz.com in vector format).
  Months of hard work were needed to complete this project.

  The Licensing Agreement with Glyfz.com does not allow WinEdt to
  include these graphic resources directly as png images.

  WinEdt also comes with %B\Bitmaps\Images folder where old-style
  16x16 png files are stored.
  If you want to use old icons you will have to enable the option
  USE_SOURCE_FOLDER and disable the option USE_RESOURCE_DLL.
  Similarly, you will have to enable the option USE_LOCAL_FOLDER if
  you want to add private icons to the mix. By default only the
  compiled dll graphic resources are used (for performance and
  consistent appearance purposes)!

  If you want to use icons at sizes different from the above you
  will have to enable the option ALLOW_SCALING. Keep in mind that
  the quality of scaled images is seriously reduced (especially
  when making them larger). When this option is disabled and WinEdt
  encounters images of different size they are either cropped or
  embedded (centered) in a larger image.

  Memory consumption increases significantly (quadratically) with
  the dimension or resources. Keep this in mind when modifying
  these settings!

  TeX Symbols bitmaps are included at 125% and 200% magnification
  in %B\Bitmaps\GUI125 and %B\Bitmaps\GUI200 folders. Default
  settings should work for most users. You can add more images in
  your local folder at the appropriate resolution. These bitmaps
  can be usually scaled-down reasonably well.

  You can overwrite these values (for your resolution) in your
  private settings if the defaults do not reflect your choices...

- Some properties have been removed from MAIN_MENU, TOOLBAR and
GUI_PAGE_CONTROL sections because they are now managed in
IMAGE_RESOURCES.

GUI_PAGE_CONTROL:
  SCALED_IMAGES
  SCALED_BUTTONS

TOOLBAR:
  DEFAULT_BUTTON_WIDTH
  DEFAULT_BUTTON_HEIGHT
  SEPARATOR_WIDTH
  SEPARATOR_HEIGHT
  IMAGE_WIDTH
  IMAGE_HEIGHT

MAIN_MENU:
  CUSTOM_DISABLED_IMAGES
  IMAGE_WIDTH
  IMAGE_HEIGHT

- The first page of the Configuration Wizard now displays your
screen resolution (in case you are not sure)...

- Images Arrow* have been renamed to Flag* (they have been flags
since WinEdt 6)...

- Captions in docked forms are now properly scaled on different
resolutions and they now use a custom (modern-style) painting
procedures.

- Toolbars on Windows 7 and Vista are no longer transparent since
coolbar gradient colors on these platforms blend poorly with
modern-style images...

- Frame titles (in TOC) now allow optional arguments and nested
braces inside the title argument...

__________________________________________________________________


WinEdt 8 [Build 20140613 (v. 8.2)]
==================================

- WinEdt now resizes its GUI controls depending on the screen
resolution (it is "truly" dpi-aware). This has become an issue with
(increasingly common) Ultra HD screens featuring resolutions 192dpi
(or more) on which default toolbar buttons and TeX Symbols look
much too small and impossible to read.

Settings in [TOOLBAR] section have been modified to allow
dpi-awareness:

  // If specified as zero then WinEdt determines the actual size depending on
  // your screen resolution...
  // Default dpi-dependent values are:
  //
  //     32x28 120dpi or less
  //     36x32 121dpi -- 143dpi
  //     44x38 144dpi -- 191dpi
  //     56x48 192dpi -- 239dpi
  //     64x56 240dpi or more
  DEFAULT_BUTTON_WIDTH=0   // You can make buttons wider
  DEFAULT_BUTTON_HEIGHT=0  // and higher...

  // If you specify a custom image size (other than 16x16) then WinEdt will
  // stretch the original image to the specified size unless a properly sized
  // png image is found in directory Bitmaps\Images_(width x height).
  // Stretched images are usually of poor quality while making a quality set
  // of images at different size is a laborious process. The choice is yours...
  // If you create large or medium set of images (eg. 32x32 and 24x24) let us know
  // and they will be included in defaults (you only need to prepare an alternative
  // for images that are actually used in toolbar)!

  // If specified as zero then WinEdt determines the actual size depending on
  // your screen resolution...
  // Default dpi-dependent values are:
  //
  //     16x16 120dpi or less
  //     20x20 121dpi -- 143dpi
  //     24x24 144dpi -- 191dpi
  //     32x32 192dpi or more
  IMAGE_WIDTH=0
  IMAGE_HEIGHT=0

Image size in [MAIN_MENU]

  // If specified as zero then WinEdt determines the actual size depending on
  // your screen resolution...
  // Default dpi-dependent values are:
  //
  //     16x16 139dpi or less
  //     20x20 140dpi -- 179dpi
  //     24x24 180dpi -- 239dpi
  //     32x32 240dpi or more
  IMAGE_WIDTH=0
  IMAGE_HEIGHT=0

PNG Images in sizes 20x20, 24x24 and 32x32 are available in
appropriate folders inside Bitmaps folder. They have been processed
from 16x16 originals by a free "FastStone Photo Resizer" which does
a better job that WinEdt's default "stretching" algorithm. High
quality larger images would have to be created from scratch but
that is time consuming and beyond my graphic design skills...

On Windows 8.1 you may also consider disabling the option "Custom
Menu Drawing" in Preferences| Appearance Dialog. While this will
slightly increase the startup time and resource consumption it will
make WinEdt menus look the same as those in other applications.
This option is also available in the MAIN_MENU section of the
Options Interface: CUSTOM_MENU_DRAWING=0...

- New properties in [GUI_PAGE_CONTROL] allow users to scale TeX
Symbols:

  // Specify how buttons and images should be scaled:
  //   If zero then WinEdt determines the actual value
  //   depending on your screen resolution (recommended)!
  // Default settings provide bitmap images scaled at
  // 125% (Gui125 buttons at 100%) and 200% (Gui200 buttons at 150%).
  // Other values will not look quite as sharp because bitmaps do not scale well!
  //   ... unless you create a set of images that were scaled as vector
  //   graphics by Adobe Reader at magnification of your choice...
  //
  // NOTE: 96 dpi is default resolution at Windows 100% magnification.
  //
  //   Reasonable values (IMAGES and BUTTONS):
  //   =======================================
  //
  //      Small:   100% 80%  (default at dpi less than 120 - scaled down from 125%)
  //      Normal:  125% 100% (default at dpi 120-143 - Gui125 folder)
  //      Large:   150% 120% (default at dpi 144-191 - scaled down from 200%)
  //      Huge:    200% 150% (default at dpi 192 or more -- Gui200 folder)

  SCALED_IMAGES=0
  SCALED_BUTTONS=0

For compatibility with older version the old Gui folder is also
included with images *exactly* as they were before...

Default bitmap specifications for TeX Symbols no longer include
path since the actual bitmap folder depends on the magnification
(%b or %B\Bitmaps\GUIxxx). You can specify full path if you don't
care about scaling...

- New property in [FORMS] section allows one to specify dpi-aware
dimensions:

  // Dimensions refer to the current display dpi
  DEFAULT_DPI=0

If you specify zero then dimensions (such as LEFT_PANEL_WIDTH)
refer to your current dpi and they are applied without any scaling
(like before) otherwise they are scaled by a factor
Current_dpi/DEFAULT_DPI...

- For compliance with dpi-awareness WinEdt now resizes bookmarks
and folding nodes accordingly (depending on the size of the current
document font). They are rendered using vector graphics to avoid
scaling of bitmaps which tend to look bad when resized.

- To implement these changes the BOOKMARKS section has been revised
and some properties have been removed as they are no longer
relevant. A new property is used to control the color of the
"current bookmark":

  ARROW_COLOR="bscBookmarkArrow"

The actual (theme-dependent) RGB value is assigned to
bscBookmarkArrow in the new section [COLORS] where such colors are
now maintained...

- New custom event handlers:

  // Mouse Click Event Handlers (executed after the default built-in response)
  ON_DOC_CLICK="%b\Macros\Events\DocClick.edt"
  ON_DOC_DOUBLE_CLICK="%b\Macros\Events\DocDoubleClick.edt"
  ON_DOC_TRIPLE_CLICK="%b\Macros\Events\DocTripleClick.edt"

  Since WinEdt already provides default (standard) response to
  mouse events custom events should be used with some caution so as
  not to interfere with the default functionality. As an example
  the default settings provide an event handler for mouse clicking
  on the current bookmark which initiates Forward PDF Search (with
  your pdf viewer such as SumatraPDF or Adobe). The macro contains
  plenty of comments to guide you with further customizations.
  Event handlers are available through the Advanced Section of the
  Options Interface...

- Options interface provides a link to new mouse event handlers as
well as a new (Advanced) branch for those that need to customize
execution modes (eg. adding extra console applications to be
executed through WinEdt).

- Default Tree and Gather now include beamer frames in its TeX TOC
Branch or Page, respectively...

- Predefined toolbars can now be chosen from Options -> Toolbar
menu.

- New macros:

  GetLastClickArea(Reg: -11..9);
    Return value depends on the position of mouse cursor:
     -1 - undefined
      0 = text area
      1 = folding margin
      2 = line number
      3 = bookmark area
      4 = current bookmark

  This macro can be useful in new Document Click event handlers.

  GetScreenDPI(Reg: -11..9, Vertical: 0..1);
    Returns horizontal or vertical resolution of the current display.
    Usually they are the same, eg:
       96dpi at Windows 100% magnification
      120dpi at 125%
      144dpi at 150%
      192dpi at 200%
      etc...

  GetHighContrast(Reg: -11..9);
    returns 1 if High Contrast Scheme is in effect

  GetConsoleSize(Reg: -11..9, Columns: 0..1);

    It can be used to obtain the number of lines or columns in
    WinEdt's Console (depending on its current font and window
    size)...

- Macro Paste now has an extra parameter Sel: 0..15. Non-zero value
indicates that pasted text should be highlighted in specified
selection mode...

- Backup and Autosaving in default settings uses a special folder
"%!b\_history\%u\%n%t.bak" where it can place such files (out of
sight, out of mind until you need them). Backup and Auto-save files
(if they exist) are available through the Documents Menu.
Furthermore, backup now allows you to maintain up-to-nine versions
of file history in the same folder as specified for backup file.
This way one can maintain recent file history without cluttering
the source directory with such files.

This functionality can be re-configured through the Options
Interface or Preferences Dialog.

- New macro related to backup and archiving:

  ArchiveFile("Filename","Destination", History: -3..9);
    Filename:
      a file that is to be archived
      (usually the current document "%f")
    Destination:
      The name of the archived file.
        Uses the same format as backup. eg.
          "%!b\_history\%u\%n%t.arch"
        - If destination folder is the same as backup specify only
          extension, eg. ".arc"
        - Empty string creates a backup
    History:
      -3: ignore history and perform a file copy
      -2: use the same HISTORY value as backup settings
      -1: no history (note: existing history files will be erased)
      otherwise
        maintain history archive files ~0.arc .. ~9.arc
       (note: archived history files exceeding this value will be erased)

If a document is modified this macro does NOT perform a save. This
feature allows one to archive the currently saved version of a
(possibly modified) document (just in case:-)...

- New Variables:

  %!L - total number of lines in current document
  %!N - Main file Name (or empty String)
  %!T - Main file Type (or empty String)
  %!e - Current document encoding string
  %!E - Main file encoding string
  %-0..%-9 Temporary registers in macros or captions:
    eg. LetReg(-1,'test');Prompt('%-1');
    or  CAPTION="%[!|GetDate(-10,'ddd d-mmm-yyyy');|]%-0"

- All macros that return values in registers now consistently allow
specifications #-11..9 for registers (instead of #0..9 or sometimes
#-1..9).

 -11 means that the return value is discarded
 -10 stores it in temporary register %-0
  -9 stores it in temporary register %-9
 ...
  -1 stores it in temporary register %-1
   0  stores it in register %!0 (like before)
 ...
   9  stores it in register %!9 (like before)

"Negative" registers do not use Push and Pop and they (especially
%-0) should only be used immediately after a call to a function
that stored its result there (because they can be messed up by
event handlers or other macros).

This is particularly useful in CAPTION specification (tree, gather
or status line). That's why temporary registers %-0..%-9 have been
introduced.

Negative registers can also come handy in sophisticated macro
scripts (that are running out of internal registers). This
extension does not affect compatibility of existing macro scripts
in any way...

- Status Line has been completely redefined in order to allow
user-customizable panels in arbitrary order. See Status Bar
configuration section in Options Interface for new settings (with
plenty of comments to guide you). Any customizations will have to
be performed from scratch... Old settings cannot be loaded in the
new version of WinEdt. New default settings now include a panel
that displays document encoding (UTF-8, ACP, OEM, etc...).

Time and Date Panels in Status Line have been removed (limited
space should be dedicated to document and WinEdt-specific
information).

It is possible to define custom panels that display Time or Date
(or anything else) should one really want such "stuff" in the
status line:

PANEL="Date"
  // Custom Panel for Date (not used in defaults)
  VISIBLE=1
  FIXED_WIDTH=1
  MIN_WIDTH="Wed  22-MAR-2222"
  CAPTION="%[!|GetDate(-10,!'ddd d-mmm-yyyy');|]%-0"
  MACRO="[SetSel(0);GetDate(-9,!'dddd, mmmm d, yyyy h:nn am/pm');"+
        "BeginGroup;InsText('%-9');EndGroup;]"
END="Date"

New macros to manipulate Status Line Panels:

  SetPanelVisible("Name", Visible: -1..1);
  SetPanelFixedWidth("Name", Fixed: -1..1);
  SetPanelMinString("Name", "String");
  SetPanelMacro("Name", "Macro");
  SetPanelCaption("Name", "Caption");
  SetPanelColor("Name", "Color");
  SetPanelAltColor("Name", "Color");

  GetPanel("Name", Property: 0..10, Reg: -11..9);
    Panel Property that is stored in the specified register:
        0 - Panel Index
        1 - Visible 0/1
        2 - Fixed Width 0/1
        3 - Default String Width
        4 - On Click Macro Event Handler
        5 - CAPTION
        6 - Text Color
        7 - Alternative Text Color
        8 - Current Text Color RGB
        9 - Current Caption
       10 - Current Width in Pixels

Old macro functions are no longer available (the above macros can
do everything and more):

  SetTimeVisible
  SetDateVisible
  SetInfoVisible
  SetInfo
  SetPanelA
  SetPanelB

- A few obsolete properties (such as custom colors) have been
removed from Document Tabs options (they were either ignored or did
not work properly on newer version of Windows, anyway)...

- Both Status Line and Document Tabs now allow properties with
positive or negative values (within certain constraints):

  EXTRA_TEXT_SIZE=0
  EXTRA_HEIGHT=0

Old property FONT_SIZE has been replaced with EXTRA_TEXT_SIZE since
it did not properly translate to different resolutions. Making text
larger or smaller is more intuitive than specifying fixed absolute
values...

- WinEdt now allows "standard" #RRGGBB HEX specification for custom
colors in its configuration files and macros (like HTML). The old
HEX value ($BBGGRR) is still legitimate. A simple RegEx
replacements can be used to convert old custom specification to the
new one for those that feel strongly about it:

  Search for:   RGB="\$\(0??\)\(1??\)\(2??\)"
  Replace with: RGB="#\2\1\0"

- More on Colors:

A new configuration section [COLORS] has been introduced to manage
all System and RGB colors for theme-sensitive text and background
properties. It allows a definition of color schemes that
automatically redefine RGB colors depending on Windows and Text
colors. This way WinEdt can automatically adjust its highlighting
to Windows High Contrast schemes, etc...

Color Index referred to colors specified in [COLOR_GRID] section no
longer exist. All colors now are RGB colors of the form #RRGGBB.
All sections that used such specifications have been modified
accordingly.

- New macros:

  GetColorRGB(Reg: -11..9,"Color");
    Converts color specification into #RGB value.
    Recognises colors defined in the [COLORS] section.

  GetColorName(Reg: -11..9, 'Color','RGB_');
    Replaces the color with the first named color with the same RGB
    value and the beginning of its name matching the specified
    string (eg. RGB_ or cl)...

The following macros have been removed:

  GetColorIndex(#-11..9,"");
  GetRGBGrid(#-11..9);
  GetSelections(#-11..9);
  SetDefColors;
  HighlightingDialog;

- By "popular" request Filetype Associations Dialog now again
allows specification of WinEdt command line switches (like -V or -0
to prevent re-opening of the project files when WinEdt is started
by double-clicking on an associate file).

- A few minor optimizations for Windows 8.1 have been implemented
in this version...

- Auto-completion (a work in progress) will not be ready for WinEdt
8.2. The next version will (hopefully) feature new (customizable)
functionality regarding auto-completion...

------------------------------------------------------------------

WinEdt 8 [Build 20131031 (v. 8.1)]
==================================

- WinEdt is now DPI Aware and it is properly scaled on resolutions
other than 96dpi. Previously WinEdt was "blurry" on higher
resolutions unless "Windows XP style scaling" was enabled. However,
this option is no longer available on Windows 8.1 and it was
essential to make WinEdt aware of custom DPI settings or else it
looked (really) bad...

- WinEdt is now compatible with High Contrast Schemes that can be
enabled through Windows Control Panel. All Windows theme elements
(including Window background and text color) adjust automatically
to such a scheme. Furthermore, when dark high contrast theme is
enabled WinEdt's highlighting is limited to Font Attributes only.
Details can be adjusted through Preferences Dialog| Appearance or
through Highlighting Sections of Options interface (should one want
to enable highlighting and manually adjust colors to match the
selected high contrast scheme)...

- New Property HIGH_CONTRAST_AWARE=0/1 in [HIGHLIGHTING_EFFECTS]
configuration section:

  When enabled, WinEdt automatically reduces its highlighting to font
  attributes and disables environment background highlighting when a
  black high contrast scheme is detected. This prevents text to be
  rendered invisible or poorly visible on dark background.

- A new Dark Background scheme is now defined in
BackgroundScehems.ini. It can be enabled by users that prefer black
background. A few default Highlighting settings have been adjusted
to make this possible...

- Some properties in [BACKGROUND_SCHEMES] now allow value 3 for
background color mode in order to make the default settings more
flexible to non-standard window background or high contrast Windows
schemes. The new value 3 is interpreted as follows:

  Use the specified RGB if the window background is white or else
  automatically adjust the color relative to the background.

Help explains the details...

- WinEdt no longer inserts BOM when an empty UTF-8 file is opened.
This was an undesired behavior/ bug in previous versions.

- WinEdt now tolerates/ ignores BOM in its ini and edt scripts.
They must be in UTF-8 (or plain ASCII) format (as before).

- The dialog that displays bibliography items (eg. after active
string \cite{}) or labels (eg. after active string \ref{}) now
contains a button "Filter Items". This allows you to type a string
and filter out items that do not contain this string. This could
make navigating large bib data bases or projects easier. Shortcut
F7 inside the interface triggers the same action as pressing the
Filter Items button. Popup menu (right-click on this button)
contains extra options for "Case Sensitive" and "Regular
Expression" search that could make this functionality even more
powerful for advanced users.

Furthermore, an extended form of this dialog (eg. long bib items)
and a short one (used to display labels) now maintain different
dimensions after they are resized by the user. Previously the user
was facing a choice of making them too large for short items or too
small for extended items.

Parameters to GDIPopup macro function that displays this dialog did
not change. A typical use is something like:

 GDIPopup('Bib','Bibliography Items',1,1,0,1,0,'','',0,0,1,1,',');

- New 0/1 property for [WRAPPING] configuration section:

  // Right Margin Constraint when FIXED_RIGHT_MARGIN=0
  // When set to 1 the fixed right margin is used
  // as long as the window is large enough
  // This property is ignored when fixed right margin is enabled!
  CONSTRAINED_RIGHT_MARGIN=0

This makes it possible to use "fixed right margin" in softly
wrapped documents as long as the window is wide enough and then
reformat the text if the window is too small to accommodate the
fixed right margin value...

This property is also available in the Preferences| Wrapping Dialog
(together with other soft wrapping properties).

- New Property DELAY=0/1 for Active Strings. When enabled the
active string is only activated after an extra character has been
typed. This makes it possible for the event handler macro to decide
what to do depending on an extra character following the active
string (which is stored in temporary register %?). Furthermore, the
set filter:

  AFTER=1
  END_FILTER="~Alpha"

can be used to make sure that the string is only activated if the
following character belongs to particular set and thus avoid
unwanted activations...

- New macro function that returns type of a unicode character at
position ind in a zero-based string:

  GetChrCat(reg: 0..9, ind: #0, "String");
    Result:
      0 - lowercase (Alpha)
      1 - uppercase (Alpha)
      2 - Numeric
      3 - Other
      4 - index is past the end of the string

- New macro function that simulates keyboard input:

  SendKeyInput(Key: 0..255, Event: 0..2);

This can be used to manipulate applications in the foreground
(including WinEdt) to act as if the specified key was pressed by
the user.

- New macro function that wraps selected text to the specified left
and right margin. In Soft Wrapping mode the text is formatted with
hard returns which a few users considered an "essential" feature.

  WrapSelectedText(Left_Margin: -1..99, Right_Margin: -1..9999);

  If Left Margin is negative then it is automatically determined to
  equal the smallest indentation in the selected block.

  If Right Margin is negative then the ordinary right margin
  (possibly adjusted to the screen width in soft mode) applies. The
  value 0 uses the default fixed right margin (as specified in the
  Preferences| Wrapping Dialog). Otherwise the text is wrapped to
  the specified right margin value.

  An interface to this macro has been added to the Edit -> Format
  menu: Wrap Paragraph.

The function FormatParagraph can be used to undo the wrapping in
Soft Mode and remove the hard returns.

- New parameter indent for:

  GoToBeginningOfLine(indent: 0..2);
  SelToBeginningOfLine(indent: 0..2);
     0 - go to column 1 (the same as before)
     1 - Go to the first indented character (> space)
     2 - the same as 0 if caret is already at the first indented
         character or else the same as 1 (toggle)

- Two new parameters for:

   MatchDelimiter(Selection_Mode:0..15;
     Delay,Swap_Position,Ignore_Errors,Simple_Match,Ignore_Toggled: 0..1);

   When Simple_Match is set to 1 only the first delimiter (and its
   closing counterpart) is used to determine the scope. All other
   delimiters are ignored. This makes it possible to select a scope
   containing nested delimiter {..{ ... } ..} even when the scope
   contains unmatched delimiters such as {1) text...}...

   If Ignore_Toggled is set to 1 toggled delimiters (such as $...$)
   are ignored inside proper left and right delimiter scope.

- Extra flags in Exe macro function are now properly interpreted
(as documented).

- Two new macro scripts GDIBib.edt and GDILabel.edt have been
placed in the Menus\Insert folder. They can be used to manually
start GDIPopup dialog in order to insert a label or bib item
through the same interface that is triggered by \cite{} and ref{}
active strings. If you want to use this functionality you should
modify Citation and Reference items in Insert -> LaTeX Menu and
possibly assign a shortcut to them:

    ITEM="Citation"
      CAPTION="&Citation"
      IMAGE="Citation"
      MACRO="IfSel(2,'>',!'SetSel(0);');InsLabel('\cite','{','}');"+
            "Exe('%b\Menus\Insert\GDIBib.edt');"
      REQ_DOCUMENT=1

- Find in selected text now only finds a string if it is completely
inside the selected scope. Previously it was enough that it started
inside it and was allowed to extend beyond the end. A few users
considered this to be a bug...

------------------------------------------------------------------

WinEdt 8 [Build 20130513 (v. 8.0)]
==================================

- Internal code has been optimized and overall performance of
WinEdt has been improved (particularly noticeable in large TeX or
HTML documents).

- Brand new section [FOLDING] that controls code folding
functionality has been added... See FOLDING in the Configuration
Manual index for the details.

- New macros that control folding functionality:

    ShowFoldingMargin(Visible: -1..1);

  Note: folding functionality is only enabled when the folding
  margin is visible. Folding margin has its own context-sensitive
  popup menu in response to right mouse clicks.

    FoldNodes(All: 0..1, Subnodes: 0..1, "Category_Filter",
              exclude_current_line: 0..1);
    UnfoldNodes(All: 0..1, Subnodes: 0..1, "Category_Filter");

  Optional Category_Filter allows you to affect only nodes that has
  been assigned to a certain category.

- Preference Dialog| Appearance allows you to enable and disable
code folding functionality for certain modes.

- Shortcut F7 toggles visibility of the folding margin and can be
used to temporarily enable or disable this functionality... The
following commands, also available in the context popup menu, can
be accessed through the shortcuts:

  Ctrl+F7           Fold All
  Shift+F7          Fold Surrounding Nodes
  Shift+Ctrl+F7     Unfold All

- Detection of Errors and Warnings in LOG files has been improved
(once again!).

- A few oddities with collection of unwanted data inside softly
wrapped comments or paragraphs have been fixed...

- Performance for collecting Tree and Gather Items (most noticeably
bibliography) has been optimized and improved...

- A new configuration macro:

  LoadPrjList("ProjectList.dat", Open_Top_Project: 0..1);

If the filename is not specified then the default project list as
specified in the [PROJECT_MANAGER] configuration section:

  PROJECT_LIST_DATA_FILE="%b\WinEdt-PrjList.dat"

is used.

The second parameter is ignored unless an empty instance of WinEdt
(with no opened project and no documents) is running.

- A new property VERBATIM=0/1 can now be assigned to [SWITCHES]
items. This property is used to prevent WinEdt from gathering data
and input directives inside such environments.

- A new property ALLOW_INDENTED_ENVIRONMENTS=0/1 in
[HIGHLIGHTING_EFFECTS] can be used to disable the indentation of
environment backgrounds. This is also available in Preference
Dialog| Highlighting.

- A new property WRAP_ENVIRONMENTS=0/1 in [PRINT] can be used to
enable or disable wrapping of special environments (as defined in
the [ENVIRONMENTS] section) when printing. This option is also
available in the Print Dialog.

- MENU can now be ended by an optional END property in [MAIN_MENU]
and [POPUP_MENUS] for visual feedback. The same applies to BRANCH
and ITEM in [NAVIGATION_BAR], to PAGE and ITEM in [GATHER], and to
INPUT in [INPUT_DIRECTIVES].

- END_TABLE property has been replaced with END (for consistency
with other sections that use END)...

- BRANCH/PAGE_IGNORE_COMMENTS and BEGINNING_OF_LINE_ONLY properties
in [NAVIGATION_BAR] and [GATHER] no longer use negative values for
managing DTX items. These items are now handled through a new
LINE_START property. The same has been done in [INPUT_DIRECTIVES]
and [FOLDING].

- Summary of changes to Configuration Keywords:

[INPUT_DIRECTIVES]

  These are new:
    LINE_START
    IGNORE_COMMENTS
    IGNORE_VERBATIM
    END

[NAVIGATION_BAR]

  These are new:
    BRANCH_IGNORE_VERBATIM
    LINE_START
    EXCEPTION
    END

  This is no longer supported and has to be removed:
    START

  These have their range changed:
    BRANCH_IGNORE_COMMENTS
    BEGINNING_OF_LINE_ONLY

[GATHER]

  These are new:
    PAGE_IGNORE_VERBATIM
    LINE_START
    EXCEPTION
    END

  This is no longer supported and has to be removed:
    START

  These have their range changed:
    PAGE_IGNORE_COMMENTS
    BEGINNING_OF_LINE_ONLY

[TRANSLATION_TABLES]

  Replacement:
    END_TABLE -> END

[SORTING]

  Replacement:
    END_TABLE -> END

[SWITCHES]

  This is new:
    VERBATIM

[HIGHLIGHTING_EFFECTS]

  This is new:
    ALLOW_INDENTED_ENVIRONMENTS

[BACKGROUND_SCHEMES]

  These are new:
    FOLDING_MARGIN_MODE
    SCOPE_COLOR
    SCOPE_RGB
    SCOPE_HOT_COLOR
    SCOPE_HOT_RGB

[PRINT]

  This is new:
    WRAP_ENVIRONMENTS

__________________________________________________________________


WinEdt 7 [Build 20130321 (v. 7.1)]
==================================

- A bug with shortcuts for disabled menu items preventing the same
shortcut to work for an enabled item has been fixed. In particular,
in MiKTeX configuration F9 (Compile) did not work because the
disabled and invisible Compile item for the Default configuration
prevented it from being activated... This problem only affected
64-bit version of WinEdt.

------------------------------------------------------------------

WinEdt 7 [Build 20130227 (v. 7.1)]
==================================

- A bug with reading UTF-8 configuration files on locales with
multi-byte language settings (CJK) has been fixed. The problem was
introduced with switch to Delphi XE3 compiler (Build 20130125).

- WinEdt now allows up to 2,000,000,000 lines per file (previous
limit was 16,000,000 lines). However, do not expect stellar
performance in huge files (different editors may be designed
specifically to handle huge files)...

------------------------------------------------------------------

WinEdt 7 [Build 20130219 (v. 7.1)]
==================================

- A fix for a rare corrupted status line problem on some systems.

- A fix to the compilation macro %B\Exec\ExeCompilerPost.edt to
prevent a problem with SumatraPDF automatically refreshing compiled
pdf file when TeXAux directory is used to redirect auxiliary files.
The problem was introduced in WinEdt Build 20130125.

- Minor fixes in some macros that do not work properly in folders
with names that contain apostrophes.

- Added Input Directives for DTX mode.

------------------------------------------------------------------

WinEdt 7 [Build 20130125 (v. 7.1)]
==================================

- WinEdt 7.1 is compiled with the latest Delphi XE3 and extensively
tested and optimized for Windows 8 64-bit platform...

- There are now 32 and 64-bit versions of WinEdt 7.1. Users with
64-bit Windows can install either. Configurations and functionality
of both versions are identical. The only difference is that
WinEdt.exe is compiled as a native 32-bit or 64-bit Windows
application, respectively. In the long run all applications will
use a 64-bit platform but currently 32-bit applications run well on
64-bit Windows and not all applications offer a stable 32-bit
version yet...

- New macros to detect Windows version and 32/64 bit platform:

  IfWinEdt64("Then","Else");
  IfWin64("Then","Else");
  GetWinVersion(MajorVersion: 0..9, MinorVersion: 0..9);

- Updated Adobe.edt that takes more care of the differences between
Adobe Reader and Acrobat (tested with Reader 7, 8, 9, X, and XI,
and with Acrobat Pro 9, X, and XI)

- Improved PDF macros for SumatraPDF

- Keywords have been updated for MetaPost 1.780...

- Macro function SetInitLang has been removed. It does nothing in
Unicode version of WinEdt and has not been used since WinEdt 6...

- A few minor bug fixes and numerous improvements to the default
settings...

------------------------------------------------------------------

WinEdt 7 [Build 20121130 (v. 7.0)]
==================================

- Extensive flickering when changing any system settings has been
eliminated. The effect was particularly noticeable on Windows 8 and
could cause other Windows to flicker as well.

- A bug with Compile Selected Text macro has been fixed: the macro
did not work when the current or the main document did not contain
a preamble.

------------------------------------------------------------------

WinEdt 7 [Build 20121113 (v. 7.0)]
==================================

- Auto-detection of the MiKTeX or TeX Live configuration has been
slightly improved (in case the user switches from one to the other
TeX system and leaves it to auto-detection to load the right
configuration).

- Some TeX Input Directives now contain only

    EXTENSION=".tex"

instead of

    EXTENSION=".;.tex"

Since TeX always adds ".tex" extension this prevents wrong file in
WinEdt's project tree in case when both file.tex and file (without
extension) exist (not a good practice but anyway)...

- WinEdt can now display the current line in a readonly Unicode
Preview edit control positioned under the document tabs. Preview
control cannot be edited and it cannot receive focus. Selected text
(character) will appear selected in the preview as well. This makes
it easy to spot any unwanted unicode characters that might have
been accidentally pasted in your text.

- A new macro function has been introduced to control visibility of
the preview control:

  ShowUnicodePreview(Visible: -1..1);

By default the View menu contains an item Unicode Preview that
toggles visibility of this control.

- In Unicode configuration section it is now possible to list the
Ranges of Unicode Characters that you deem admissible in your
documents. These characters will be displayed as are in the Unicode
Preview edit control. All other characters will be displayed as
U+HEX. Use Character Map to see what values are acceptable for your
documents...

Defaults look like:

 PREVIEW_LINE_TERMINATORS=0
 ADMISSIBLE_CHARACTERS="END_LIST"
   // 9 // Allow Tab Characters?
   32-127
   161-382
 END_LIST

- RegEx extension \u matches any unicode character that is not
listed above. This can come handy if you want to ensure that your
document(s) don't contain any unicode (possibly invisible)
characters that could cause problems with a compiler such as TeX
but are very hard to spot in the editor. Furthermore, Greek or
Cyrillic letter A looks the same as the Latin one but it has a
different unicode value and TeX will complain about it!

- Unicode section of the Preferences Dialog now also allows
specification of the Unicode Character Set Range for Regular
Expressions. In previous builds this settings could only be
adjusted through the Unicode section of the Options Interface.

    It is not necessary to increase this range in order to spot
    unicode characters beyond the range when they are specified as
    a special \u RegEx set.

- A bug with case insensitive search and UNICODE characters (>127)
has been fixed. WinEdt now correctly matches characters like Ð– Ð¶...

------------------------------------------------------------------

WinEdt 7 [Build 20120704 (v. 7.0)]
==================================

- A bug with non-modal Incremental Search dialog not working has
been fixed.

- Occasional AV when closing documents by double-clicking on their
tab has been fixed.

- A bug when printing highlighted text has been fixed (custom color
persisted when a text highlighted with default color followed).
This only affected printing from WinEdt.

- WinEdt Synctex macros now work properly when synctex file have
CR+LF format (a recent change in MiKTeX). Previously the macros
assumed that the file is in UNIX format (as it should have been)...

- WinEdt can now properly render Thai unicode text (with
non-spacing marks). Basic support for Thai does not include kerning
or word boundaries (a notorious problem with Thai language) and it
is limited to Windows API support for this language (which is not
perfect). Even so plenty of exceptions had to be handled in order
to provide reasonably good Thai text rendering on the screen...

- Selections now allow specifying background color while preserving
highlighted text. Documentation explains how...

- Screen refreshing with CJK characters has been optimized and is
now faster.

- A few minor refresh oddities have been fixed...

------------------------------------------------------------------

WinEdt 7 [Build 20120423 (v. 7.0)]
==================================

- A problem with WinEdt inserting an unwanted character in a
document if the compilation was started with a shortcut (such as
Shift+Ctrl+P) has been fixed. The problem affected some users on
some computers (sometimes) and was not 100% reproducible
(depending on the focus shift of WinEdt's Console during the
compilation).

- WinEdt now properly positions message boxes in secondary
monitors with negative offset (not a commonly encountered
situation).

- Exit handler now performs a fast cleanup to prevent users from
accumulating unnecessary local configuration and macro scripts
(without having to perform the Maintenance -> Cleanup Command).

- SetTracking macro has an extra parameter to control screen
refreshing (and updating of global switches). Help explains what
it does and how to use it...

------------------------------------------------------------------

WinEdt 7 [Build 20120413 (v. 7.0)]
==================================

- A display refresh oddity with fonts that have zero top offset
(such as Lucida Console or some CJK characters) has been fixed.

- Improved (and well tested) Upgrade and Rollback commands have
now been added to the Maintenance Menu. They help maintain
personal configurations by merging them with the new defaults.
They will be maintained in order to upgrade from the first to the
latest (official) build of WinEdt 7 (Karl promised to keep them
up-to-date)...

- Options -> Configurations menu has been slightly redesigned. The
Default configuration now auto-detects TeX System (MiKTeX or TeX
Live); it also includes HTML and NSIS support. The rest of the
configurations can be selected if you are using WinEdt for a
particular task with specialized accessories (or if auto-detection
of your TeX System fails). When upgrading to this build you should
execute the configuration of your choice and from here on this
configuration (including any modifications in Execution Modes)
will be preserved when you are upgrading or performing any
Maintenance commands. MiKTeX and TeX Live are now "symmetric" and
there is no preferred TeX System in WinEdt's default
configuration. If you have both MiKTeX and TeX Live installed
auto-detect will choose the first one on your PATH (if that is not
your choice it is easy to switch to one or the other by executing
the appropriate configuration). Execution Modes and the last page
of the Preferences Dialog displays your current configuration.
Extended configuration MiKTeX+HTML+NSIS or TeX Live+HTML+NSIS are
defined as Defult:MiKTeX and Default:TeX Live, respectively (as
opposed to the basic MiKTeX and TeX Live configurations).

- The first page of the Wizard now has button to Run WinEdt as
Administrator (elevated privileges with UAC). While it is neither
necessary nor recommended to have elevated privileges while using
WinEdt they may be temporarily required for some administrative
tasks (such as modifying filetype associations in HKCR,
configuring the License Monitor, or registering WinEdt for all
users) on Windows with UAC...

------------------------------------------------------------------

WinEdt 7 [Build 20120329 (v. 7.0)]
==================================

- WinEdt 7 can now load WinEdt 6 project (prj) files. Beware,
however, that after they are saved from WinEdt 7 they can no
longer be loaded in older versions!

- A problem with WinEdt updating skd files after the registration
is entered has been fixed. The problem seriously impeded network
registrations. Of course, it goes without saying that on Windows
with UAC WinEdt must be started with elevated privileges in order
to be allowed to update its skd file!

- MiKTeX Maintenance definitions in WinEdt's Main Menu have been
modified so as to tolerate forward slashes in MiKTeX's Bin folder
specifications that are put on the PATH by some versions of MiKTeX
(this is supposed to be fixed by the latest MiKTeX installer).

- A few minor changes to macros called from the Wizard (mostly
uninstall and unregister issues -- not likely encountered by many
users).

- Options interface now provides a link to more macros (for
advanced users that need to customize WinEdt beyond basics): not
intended for the "faint of heart"...

------------------------------------------------------------------

WinEdt 7 [Build 20120321 (v. 7.0)]
==================================

- Uninstaller no longer removes (non-empty) HKCU\Software\WinEdt
key which resulted in WinEdt 5.x "loosing" its custom settings if
WinEdt 7 was uninstalled and this key was removed...

- Default values of WinEdt-specific switches for silent install
and uninstall have been modified so as to be compatible with the
previous silent (un)install behavior...

------------------------------------------------------------------

WinEdt 7 [Build 20120317 (v. 7.0)]
==================================

- All Strings in WinEdt 7 are made of unicode (16-bit wide)
characters. Unicode is WinEdt's internal format for working with
all files. However, WinEdt 7 is perfectly capable of handling Ansi
or OEM (code-page specific) files as well. See CP Converter in
Documents Settings Dialog and the [UNICODE] configuration section
of the Options Interface for details!

- Numerous (minor and major) improvements to the default settings,
support for extra functionality, etc... (too many to mention) has
been implemented over the last two years while working on WinEdt
7.

- Find and Find in Files are now two different dialogs (Ctrl+F and
Shift+Ctrl+F).

- A Preferences dialog has been introduced to provide an interface
to the most commonly performed customizations (for users that are
intimidated by Configuration sections). Check the Help in that
dialog!

- Brand new documentation (F1 - take a quick tour). Everything has
been updated!

- Changes to Configuration Keywords:

Documentation now includes a brand new Configuration Manual. It
explains everything you should know about customizing WinEdt. The
Help button in the Options Interface toolbar produces help on the
selected branch: try it (read at least front page and
Introduction)!

A few properties have been removed or moved to other sections and
a few others have been renamed (for consistency's sake). If you
try to load an old configuration file you will get an error when
such keywords are encountered. You will have to correct them and
in some cases a global replace will be required within a section.
It may take some time (an hour or so) to import your old settings
but in the process you will probably improve a few things in your
customizations (as you learn more).

Below is a summary of changes (compare your custom script with the
defaults and check the documentation to see how the new properties
are used):

[UNICODE]

  This section has changed (as should be expected for the unicode
  version of WinEdt). Forget about the old one and configure new one
  from scratch...

[LANGUAGE]

  The same as for [UNICODE] section.

[AUTO_SAVING]

  Replacement (typo):
    ALTERNATION_SAVE -> ALTERATION_SAVE

[INPUT_DIRECTIVES]

  Replacement:
    MODE -> MODE_FILTER

  This is new:
    MAIN_ICON

[NAVIGATION_BAR]

  Replacements:
    BRANCH_MODE -> BRANCH_MODE_FILTER
    BRANCH_BEFORE_BUILD -> BRANCH_BEFORE_BUILD_MACRO
    BRANCH_AFTER_BUILD -> BRANCH_AFTER_BUILD_MACRO
    MODE -> MODE_FILTER
    ON_CTRL_CLICK -> ON_CTRL_CLICK_MACRO
    ON_CTRL_DBL_CLICK -> ON_CTRL_DBL_CLICK_MACRO
    ON_SHIFT_CLICK -> ON_SHIFT_CLICK_MACRO
    ON_SHIFT_DBL_CLICK -> ON_SHIFT_DBL_CLICK_MACRO
    ON_ALT_CLICK -> ON_ALT_CLICK_MACRO
    ON_ALT_DBL_CLICK -> ON_ALT_DBL_CLICK_MACRO
    ON_CLICK -> ON_CLICK_MACRO
    ON_DBL_CLICK -> ON_DBL_CLICK_MACRO
    ON_ICON_CTRL_CLICK -> ON_ICON_CTRL_CLICK_MACRO
    ON_ICON_CTRL_DBL_CLICK -> ON_ICON_CTRL_DBL_CLICK_MACRO
    ON_ICON_SHIFT_CLICK -> ON_ICON_SHIFT_CLICK_MACRO
    ON_ICON_SHIFT_DBL_CLICK -> ON_ICON_SHIFT_DBL_CLICK_MACRO
    ON_ICON_ALT_CLICK -> ON_ICON_ALT_CLICK_MACRO
    ON_ICON_ALT_DBL_CLICK -> ON_ICON_ALT_DBL_CLICK_MACRO
    ON_ICON_CLICK -> ON_ICON_CLICK_MACRO
    ON_ICON_DBL_CLICK -> ON_ICON_DBL_CLICK_MACRO

  This is new:
    BRANCH_CAPTION

[GATHER]

  Replacements:
    PAGE_MODE -> PAGE_MODE_FILTER
    PAGE_BEFORE_BUILD -> PAGE_BEFORE_BUILD_MACRO
    PAGE_AFTER_BUILD -> PAGE_AFTER_BUILD_MACRO
    PAGE_ON_ACTIVATE -> PAGE_ON_ACTIVATE_MACRO
    PAGE_ON_SHOW -> PAGE_ON_SHOW_MACRO
    MODE -> MODE_FILTER
    ON_CTRL_CLICK -> ON_CTRL_CLICK_MACRO
    ON_CTRL_DBL_CLICK -> ON_CTRL_DBL_CLICK_MACRO
    ON_SHIFT_CLICK -> ON_SHIFT_CLICK_MACRO
    ON_SHIFT_DBL_CLICK -> ON_SHIFT_DBL_CLICK_MACRO
    ON_ALT_CLICK -> ON_ALT_CLICK_MACRO
    ON_ALT_DBL_CLICK -> ON_ALT_DBL_CLICK_MACRO
    ON_CLICK -> ON_CLICK_MACRO
    ON_DBL_CLICK -> ON_DBL_CLICK_MACRO
    ON_ICON_CTRL_CLICK -> ON_ICON_CTRL_CLICK_MACRO
    ON_ICON_CTRL_DBL_CLICK -> ON_ICON_CTRL_DBL_CLICK_MACRO
    ON_ICON_SHIFT_CLICK -> ON_ICON_SHIFT_CLICK_MACRO
    ON_ICON_SHIFT_DBL_CLICK -> ON_ICON_SHIFT_DBL_CLICK_MACRO
    ON_ICON_ALT_CLICK -> ON_ICON_ALT_CLICK_MACRO
    ON_ICON_ALT_DBL_CLICK -> ON_ICON_ALT_DBL_CLICK_MACRO
    ON_ICON_CLICK -> ON_ICON_CLICK_MACRO
    ON_ICON_DBL_CLICK -> ON_ICON_DBL_CLICK_MACRO

  This is new:
    PAGE_CAPTION

  These are no longer supported (they did nothing) and have to be removed:
    PAGE_ON_ENTER
    PAGE_ON_CANCEL

[DOCUMENT_TABS]

  Replacements:
    BITMAPS_ENABLED -> IMAGES_ENABLED
    BITMAP -> IMAGE
    MODE -> MODE_FILTER

  These are no longer supported and have to be removed:
    BITMAP_HEIGHT
    BITMAP_WIDTH

[GUI_PAGE_CONTROL]

  Replacements:
    CONFIGURATION -> CONFIG_FILTER
    MODE -> MODE_FILTER

  This is new:
    CAPTION

  These are no longer supported and have to be removed:
    ALPHA_BLENDING
    REFRESH
    SCALE

[ENVIRONMENTS]

  Replacement:
    MODE -> MODE_FILTER

[PARAGRAPHS]

  Replacement:
    MODE -> MODE_FILTER

[TOOLBAR]

  Replacement:
    CONFIGURATION -> CONFIG_FILTER

  These are no longer supported and have to be removed:
    COOLBAR
    USE_WINDOWS_TOOLTIPS

[MAIN_MENU]

  Replacements:
    CONFIGURATION -> CONFIG_FILTER
    ENABLE_MENU_ICONS -> ENABLE_MENU_IMAGES

[POPUP_MENUS]

  Replacement:
    CONFIGURATION -> CONFIG_FILTER

[STATUS_BAR]

  Replacements:
    INFO_A_CLICK -> INFO_A_CLICK_MACRO
    INFO_B_CLICK -> INFO_B_CLICK_MACRO
    DATE_CLICK -> DATE_CLICK_MACRO
    TIME_CLICK -> TIME_CLICK_MACRO

[FORMS]

  These are no longer supported and have to be removed:
    DEFAULT_CODE_PAGE
    CUSTOM_FONT_CHARSET
    CAPTION

[TRANSLATION_TABLES]

  Replacement:
    FILTER -> MODE_FILTER

  These are no longer supported and have to be removed (OEM or any
  other code page has to be handled in [UNICODE]):
    ANSI2OEM
    ANSI2OEM_FILTER
    ANSI2OEM_AFTER
    OEM2ANSI
    OEM2ANSI_FILTER
    OEM2ANSI_AFTER

[ACTIVE_STRINGS]

  Replacements:
    FILTER -> MODE_FILTER
    ACTION -> MACRO
    DBL_CLICK_FILTER -> DBL_CLICK_MODE_FILTER
    DBL_CLICK_ACTION -> DBL_CLICK_MACRO

[DELIMITERS]

  Replacement:
    FILTER -> MODE_FILTER

  This is new:
    INCLUDE_COMMENTS

[ERRORS]

  Replacements:
    ERR_DELAY -> ESC_DELAY
    FILTER -> MODE_FILTER

  These are new:
    ERROR_FILTER
    MINIMAL_LINE_LENGTH
    IGNORE_START_CHARACTERS
    REGULAR_EXPRESSIONS
    TYPE_FILTER
    EXCEPTION

[WRAPPING]

  Replacements:
    WRAPPING_FILTER -> WRAPPING_MODE_FILTER
    SOFT_WRAPPING_FILTER -> SOFT_WRAPPING_MODE_FILTER
    SEMISOFT_WRAPPING_FILTER -> SEMISOFT_WRAPPING_MODE_FILTER
    FILTER -> MODE_FILTER

[WORD_COUNT]

  Replacement:
    FILTER -> MODE_FILTER

[TEMPLATES]

  Replacements:
    MACRO1 -> BEFORE_MACRO
    MACRO2 -> AFTER_MACRO

[BOOKMARKS]

  Replacement:
    LINE_NUMBERS_FILTER -> LINE_NUMBERS_MODE_FILTER

  These are new:
    BOOKMARK_IMAGE_SET
    BOOKMARK_ZERO_IMAGE
    LINE_NUMBER_10
    LINE_NUMBER_BULLET
    LINE_NUMBER_BULLET_5

  These are no longer supported and have to be removed:
    BOOKMARK_GROUP
    CURRENT_BOOKMARK_GROUP

[DEFAULTS]

  Replacement:
    FILTER -> MODE_FILTER

[PREFERENCES]

  Replacement:
    WARNING_PROMPT_WHEN_SAVING_SELECTED_BLOCK ->
           WARNING_WHEN_SAVING_SELECTED_BLOCK

  This has been moved to [EDITOR_PREFERENCES]:
    UNDO_BUFFER_SIZE

  These have been moved to [FILE_STATUS]:
    SHARE_FILE_ACCESS_WHEN_READING
    SHARE_FILE_ACCESS_WHEN_WRITING
    READONLY_MODIFY_WARNING
    READONLY_MODIFY_BEEP
    DETECT_READONLY_STATUS_ON_OPEN
    DETECT_READONLY_STATUS_ON_UPDATE
    ENABLE_READONLY_SOUND_ALERT

[HIGHLIGHTING_EFFECTS]

  This is new:
    ENVIRONMENT_BRIGHTNESS

[SELECTIONS]

  These are new:
    TEXT_RGB
    BACKGROUND_RGB

[FILTER_SETS]

  These are new:
    TEXT_RGB
    BACKGROUND_RGB

[SWITCHES]

  Replacement:
    INCLUDE_END -> INCLUDE_STOP

  These are new:
    DOMINANT_PRIORITY
    TEXT_RGB
    BACKGROUND_RGB
    TRANSPARENT

[KEYWORDS]

  These are new:
    TEXT_RGB
    BACKGROUND_RGB

[COLUMNS]

  These are new:
    TEXT_RGB
    BACKGROUND_RGB
    TRANSPARENT

[BACKGROUND_SCHEMES]

  These are new:
    TEXT_RGB
    TRANSPARENT

[SPELLING_OPTIONS]

  Replacement:
    USE_CUSTOM_FONT -> CUSTOM_FONT

  This is new:
    MAX_SPELL_CHAR_CODE

  This is no longer supported and has to be removed:
    ASCII_CHARACTERS_ONLY

[MISSPELLED_WORDS]

  These are new:
    UNDERLINE_ENABLED
    UNDERLINE_COLOR
    UNDERLINE_RGB
    UNDERLINE_ALPHA_OK_ENABLED
    UNDERLINE_ALPHA_OK_COLOR
    UNDERLINE_ALPHA_OK_RGB
    TEXT_RGB
    BACKGROUND_RGB

[COMPOUNDED_WORDS]

  These are new:
    UNDERLINE_ENABLED
    UNDERLINE_COLOR
    UNDERLINE_RGB
    TEXT_RGB
    BACKGROUND_RGB

[FONT]

  This is no longer supported and has to be removed:
    FONT_CHARSET

[FONT_SCHEMES]

  Replacement:
    MODE -> MODE_FILTER

  This is no longer supported and has to be removed:
    FONT_CHARSET

[SOUNDS]

  This is new:
    OLD_STYLE_MESSAGE_BOXES

[BACKUP]

  This is new:
    BACKUP_EXPIRY_PERIOD
  You have to change a line like
    KEEP_OLD_BACKUPS=120
  in
    KEEP_OLD_BACKUPS=1
    BACKUP_EXPIRY_PERIOD=120

[FILE_STATUS]

  These come from [PREFERENCES]:
    SHARE_FILE_ACCESS_WHEN_READING
    SHARE_FILE_ACCESS_WHEN_WRITING
    READONLY_MODIFY_WARNING
    READONLY_MODIFY_BEEP
    DETECT_READONLY_STATUS_ON_OPEN
    DETECT_READONLY_STATUS_ON_UPDATE
    ENABLE_READONLY_SOUND_ALERT

[EDITOR_PREFERENCES]

  This comes from [PREFERENCES]:
    UNDO_BUFFER_SIZE

[FIND]

  This is no longer supported and has to be removed:
    PRESERVE_PAGE

[PRINT_FONT]

  Replacement:
    USE_CURRENT_DOCUMENT_FONT -> CUSTOM_FONT

  This is no longer supported and has to be removed:
    FONT_CHARSET

[PRINT_HEADER]

  This is no longer supported and has to be removed:
    FONT_CHARSET

[PRINT_LINE_NUMBERS]

  These are new:
    LINE_NUMBER_10
    LINE_NUMBER_BULLET
    LINE_NUMBER_BULLET_5

[PRINT_OPTIONS]

  This is new:
    PRINT_FF
  It substitutes old options
    IGNORE_FF -> PRINT_FF=0
    DISPLAY_FF -> PRINT_FF=1
    TRANSLATE_FF -> PRINT_FF=2

  ________________________________________________________________


- Macro manual has been updated with all changes to parameters and
description of new macro functions. Below is a brief summary of
changes to Macro functions from WinEdt 6...

- Changes to Macros:

The following macros now have extra or extended parameters
(without them they are compatible with old versions):

  Exe("",""); -> Exe("","",#0..1111,"","","","","","","","","","");
  ErrorLogUpdate(#0..1); -> ErrorLogUpdate(#0..1,"");
  MoveFile("",""); -> MoveFile("","",#0..1,#0..1);
  Chr(#-1..255,""); -> Chr(#-1..65535,"");
  InsChar(#0..255); -> InsChar(#0..65535);
  InsChr(#0..255); -> InsChr(#0..65535);

The following are compatible unless they used illegal flags or
out-of-bound parameters (not likely):

  FindError(#-1..1,#-1..1,#-1..1,#0..9,#0..3,#0); ->
  FindError(#-1..1,#-1..1,#-1..1,#-1..9,#0..3,#0..511);

  IfLogErrors("","",#-1..1,#0..9,#0..3,#0); ->
  IfLogErrors("","",#-1..1,#-1..9,#0..3,#0..511);

  GetSyncSourceInfo("","",#1,"","","","","","",#-1..9); ->
  GetSyncSourceInfo("","","",#1..99999999,"","","","","","",#-1..9);


EnterString Macro in WinEdt 6 did not work as documented
(parameter ranges in WinEdtMCR.dat were wrong). Now it does...

See Macro Manual (or use Help's Index) to see the details on
parameters...

Translation Tables now only allow index -1..7. Obscure (and pretty
useless values -7..-2) are no longer supported:

  SetSort(#-1..1,#-1..1,#-1..1,#-1..1,#-7..8,#-1..1,""); ->
  SetSort(#-1..1,#-1..1,#-1..1,#-1..1,#-1..7,#-1..1,"");

  SortLines("",#0..111111,#-7..8,#0..9,""); ->
  SortLines("",#0..111111,#-1..7,#0..9,"");

  LstSort(#-1..1,#-1..1,#-1..1,#-1..1,#-7..8,#-1..1); ->
  LstSort(#-1..1,#-1..1,#-1..1,#-1..1,#-1..7,#-1..1);

The same functionality but a different way of specifying extra
flags (see Help):

  ApplyTranslation("",#-1..10); ->
  ApplyTranslation("",#0..11,#0..9);

For consistency with other macros the first parameter for the
following macros have been changed from

  #0..2 (Off,On,Toggle) to #-1..1 (Off,Toggle,On)

  SetSounds(#0..2);

  ShowErrorLog(#0..2,#-1..1);
  ShowDocTabs(#0..2);
  ShowGUIPage(#0..2);
  ShowHardReturns(#0..2);
  ShowStatusLine(#0..2);
  ShowToolBar(#0..2);
  ShowLineNumbers(#0..2);

  SetInfoVisible(#0..2);
  SetDateVisible(#0..2);
  SetTimeVisible(#0..2);

  SetLineWrap(#0..2,#0..1);
  SetWrap(#0..2,#0..1);
  SetInsert(#0..2,#0..1);
  SetBlock(#0..2,#0..1);
  SetSpell(#0..2,#0..1);
  SetIndent(#0..2,#0..1);

RunPrompt macro now has only two parameters (it always executes a
macro):

  RunPrompt("Caption",Custom_Font:0..1);

Deleted Code Page specific macros (they do nothing with Unicode):

  SetFontCharset
  GetFontCharset

  SetClipboardPasteFormat
  SetClipboardCopyFormat
  SetUnicodeCP
  GetLastPasteCP

  IfFileUTF8
  UTF2Ansi
  Ansi2UTF

  SetConsoleCharset renamed to SetConsoleCodePage
  GetDocAsASCII     renamed to GetDocAsString
  RecordMacro       renamed to ShowMacroRecorder

GetANSI2OEMTable -> removed
  OEM files have to be configured through the [UNICODE]
  configuration section

ConfigurationWizard -> removed
  it was a duplication of WinEdtWizard( "Caption", Show_Next_Time );

GetFontAttributes macro has been removed (deemed useless and not
compatible with RGB true color specifications)... It was only used
in Options Interface Toolbar.

InsertMacro and InsertParameter macros (used in Macros Menu) have
been replaced by a universal macro InsertItem that reads data from
a file. Menu items are now

  InsertItem('%B\Config\Edt\Mcr.dat','','Insert Macro',0,0);
  InsertItem('%B\Config\Edt\Var.dat','','Insert %%Parameter',1,1);

Docked Forms now allow input focus (and Keyboard Interface). Extra
Parameters have been introduced to control input focus:
  Focus: -1..1
         -1 = Kill Focus
          0 = Leave it as is
          1 = Set Focus
  ShowTree
  ShowGather
  ShowErrorLog
  ShowCharacterMap
  ShowCollectForm
  ShowConsole
  ShowAdvancedOptions
  ShowMacroRecorder

Fifth parameter for AddIconItem(...) has been removed (it does
nothing in WinEdt 7). Macro "Create WinEdt Filetypes.edt" was
changed accordingly....

ExportDoc macro now writes output into a specified register rather
than directly to a file. The first parameter has been changed from
"Filename" to Register: 0..9. It is easy to use WiteFile to write
it to the file (with all unicode format options)...

Read and write macros have extra parameters to convert files (as
needed):

  ReadFile("FileName", Register: 0..9,
    Max_Number_of_Chars_To_Read: 0..,
    unicode: 0..4, code_page: 0..);

  WriteFile("FileName","String",
    unicode: 0..4, code_page: 0.., bom: 0..1, "Format_FileName");

  OpenOutput("FileName",
    unicode: 0..4, code_page: 0.., bom: 0..1, "Format_FileName");

In most cases, omitting all unicode-specific parameters is the
right thing to do. If unicode format has to be specified, here is
how:

unicode: 0 - default (auto detect)
         1 - ANSI
         2 - Unicode
         3 - Unicode (big endian) / reversed bytes
         4 - UTF8

If Format_FileName is specified and unicode=0 then the format is
determined by the format of specified file. For example, the
format of temporary file for "compile selected" is determined by
the format of the main file "%F":

  OpenOutput("%!7\_temp%!6",0,0,0,"%F");  // Open temporary TeX file

See also Unicode (UTF8) Support in Options Interface (Unicode.ini)
for more information on how to set up default formats and values
of code pages: for advanced users that want to work with
non-unicode documents (such as OEM or ANSI)...

Examples:
=========

Dictionaries in WinEdt 7 use Unicode format with BOM. How to
convert a word list from WinEdt 6 format (using Windows ANSI Code
Pages) to Unicode for WinEdt 7. In Unicode.ini you'll find the
following values for Windows Code Pages:

//  0       Windows ANSI code page (Western).
//  1       Windows OEM code page.
//  1250    Windows 3.1 Eastern European.
//  1251    Windows 3.1 Cyrillic.
//  1252    Windows 3.1 Latin 1 (US, Western Europe).
//  1253    Windows 3.1 Greek.
//  1254    Windows 3.1 Turkish.
//  1255    Hebrew.
//  1256    Arabic.
//  1257    Baltic.
//  1361    OEM Korean (Johab).

Here is how:

  ReadFile("%b\Dict\English\UK.dic", 9,0,1,0);
  WriteFile("%b\Dict\English\UK.dic","%!9", 2,0,1);

or

  ReadFile("%b\Dict\Ru\Ru.dic", 9,0,1,1251);
  WriteFile("%b\Dict\Ru\Ru.dic","%!9", 2,0,1);

or

  ReadFile("%b\Dict\Greek\Greek.dic", 9,0,1,1253);
  WriteFile("%b\Dict\Greek\Greek.dic","%!9", 2,0,1);

You can now open this file in WinEdt and sort it as a Dictionary
using WinEdt's Sort Lines dialog (Tools Menu). Using UNIX (LF)
terminators saves memory and speeds up loading because WinEdt
assumes that a word list is properly sorted without testing it!
Sorting can also be achieved through the Dictionary Manager
dialog...

Of course, the default dictionaries are already converted and
sorted and the rest will be made available on WinEdt.org in WinEdt
7 format. Simple users don't have to worry about such issues...

HINT: the CP Converter Page in the Document Settings dialog can
also be used to load a file in a particular code page and save it
in a different format (without using ReadFile and WriteFile macro
functions).

- New macros to provide execution summary by analyzing the log
file:

// Execution Summary for TeX:
// Test time that it takes to parse the log file...

 PushTagsandRegisters;
 StartWorking('Analyzing log file...');
 ErrorLogUpdate; // If needed...
 ProcessMessages;
 StartTimer;
 GetErrorCount(1, 0, 4, 3, $$000001001);
 GetErrorCount(2, 0, 4, 3, $$000010100);
 GetErrorCount(3, 0, 4, 3, $$000000010);
 GetErrorCount(4, 0, 0, 3, $$000000001);
 LetRegNum(2,%!2+%!4-%!1); // Add Filtered Warnings!
 LetReg(9,'Errors: %!1, Warnings: %!2, Boxes: %!3');
 GetPageCount(0,"<@{ }Output written on *(\(@{[0-9a-zA-Z]}\) page*)\.",99,0);
 IfStr('%!0','','>',!"LetReg(9, '%!9, Pages: %!0');");
 GetTimer(4);
 StopWorking;
 Prompt("%!9%\[Elapsed Time (msec): %!4]");
 PopTagsandRegisters;
End;

__________________________________________________________________


WinEdt 6 [Build 20110315 (v. 6.0)]
==================================

- A problem with locating source files from MiKTeX log files has
been fixed

- A problem with silent install has been fixed

- Support for MetaFont has been added

- New functionality with aux directory has been added...

- Uninstalling WinEdt 6 no longer removes WinEdt 7 application data
folder

  and more...


WinEdt 6 [Build 20101215 (v. 6.0)]
==================================

- NSIS configuration has been added. This way WinEdt edits and
compiles its own installation scripts...

- Enhanced Installation Options (Admin vs. Private Installation,
etc...)

- Enhanced Icons for filetype associations (much better appearance
with large icons)

- DDE Fix for Adobe X (http://forums.adobe.com/message/3323310)

- A problem with properly restoring Execution Modes Settings with
Default configuration have been fixed (introduced by accident in
Build 20101207 when support for NSIS compiler has been added)...

- Two minor bug fixes:
   local images for Options Interface
   AV with generic [non-TeX] Wizard

- Forward Search with PDF-XChange v.2.5 can now highlight a box
(not just a proper page).

- Some oddities with undoing and redoing with free caret interface
have been fixed.

- PDF Alternative Viewer #4 in Execution Modes now works properly
(before it would use the value for Viewer #3)...

- Some minor enhancements to default settings...


WinEdt 6 [Build 20101121 (v. 6.0)]
==================================

- This build uses NSIS Setup Installer (with more install and
uninstall options)...

  Silent Install or Uninstall uses a command line switch /S and
  /D=<destination> (/D must be the last parameter used in the
  command line and must not contain any quotes, even if the path
  contains spaces. Only absolute paths are supported).
  This can come handy for network installations!

- Problems with automatic licensing on Win7 networks have been
fixed...

- Bug with RegEx containing 8-bit characters or strings has been
fixed...

- Some problems with WinEdt appearance with 120 dpi screen
resolution and Classic Windows Theme (or sometimes non-default
themes) have been fixed... In particular, the buttons in the
toolbar in Options Interface could become invisible under such
settings.

- Refresh oddities with dialogs when switching from mouse to
keyboard UI have been fixed...

- INI Scripts (accessible through the Options Interface) now allow
input directive, eg.:

  %INCLUDE="ConfigEx\Script.ini"

This should simplify installation of Configuration Components from
WinEdt.org. Double-clicking on Active String %INCLUDE="?" opens a
local copy of included script for editing.

%%INCLUDE includes the script and ignores the rest of the file
(useful if the script is supposed to replace the contents of the
original).

  %%INCLUDE="ConfigEx\Script.ini"

is a shorter equivalent of

  %INCLUDE="ConfigEx\Script.ini"
[END]

%include does the same as %INCLUDE except that it ignores the
directive if the specified file does not exist (include only if it
exists).

These directives have been added to highlighting and active strings
for INI files.

- Comments in the default Private.ini provide some guidance on how
(not) to use this feature, its limitations, and possible
problems...

- There is now only one BackgroundSchemes.ini configuration
containing a few examples of background schemes. By default they
are all disabled but it is just a matter of changing ENABLED=0 to
ENABLED=1 and reloading the script in order to enable any of the
pre-defined schemes. Comments in the file provide further guidance
(eg. for those that want to use "fancy" bitmaps for background)...

- The same for Toolbar.ini. There are still predefined alternatives
but your choice of toolbars (and possible customizations and
additions) should be maintained in this file. Comments in
Toolbar.ini provide additional guidance...

- The Options Interface has been modified in order to accommodate
the above changes with Background Schemes and Toolbar.

- Context Popup Menu in the Options Interface now contains Expand
All and Collapse All items.

- Labels in Tree and Gather now contain comments to show how to
collect labels with other packages (including listing, beamer,
cleveref, etc...). If you are using any of these and would like
WinEdt to collect labels in alternative formats remove the comments
and reload the modified script...

- Fixed right margin can now be changed in Font Schemes for a
particular scheme. If not specified (or specified as 0) then the
default one as specified under Wrapping applies... Default settings
use this feature to reduce right margin for ASCII documents (such
as my emails):

FONT_SCHEME="ASCII Documents"
  MODE="ASCII|EDT;INI"
  RIGHT_MARGIN=67

- Yet another PDFTeX engine has been added to the execution modes:
LuaTeX and LuaLaTeX are now there...

- Gather interface now uses ICON (if specified) in its list
control...

- WinEdt did not provide an option to auto-match delimiters in
response to mouse click. Delimiters are matched when they are typed
and when you move the cursor over them with Left and Right Arrows.
The following options in Delimiters.ini (accessible through the
Options Interface -> Delimiters!) control this functionality:

 AUTO_MATCH_LEFT_RIGHT=1
 AUTO_MATCH_TOGGLED=1
 MATCH_MOVE_OVER=1

Three new options were introduced to further control this feature:

 MATCH_MOVE_TO=1
 MATCH_ON_CLICK=1
 MATCH_ON_TYPE=1

- It is now possible to use the same shortcut for different menu
items in different configurations...

- Using a double-shortcut and then reloading Popup Menus through
Options Interface resulted in AV. Fixed...

- It is now possible to use variables (such as %H,%B,%!B,%!H,
etc...) in the execution modes. This is particularly handy for
portable installations where TeX System or other accessories are
installed relative to WinEdt (but the drive letter of the USB stick
may change)... Furthermore, PDF Page in in Execution Modes allows
you to specify and choose from 4 alternative PDF Viewers (beside
the default one that is auto-detected).

- TeX System macros for MiKTeX defines a response for "e":
// "e" Response with Environment Variable:
  SetEnvVar('MIKTEX_EDITOR', !'WinEdt.exe "[Open(|%f|);SelPar(%l,7);]"');

- TeX System macros for TeX Live defines a response for "e":
// "e" Response with Environment Variable:
  SetEnvVar('TEXEDIT', !'WinEdt.exe "[Open(|%s|);SelPar(%d,7)]"');

- This build contains macros that work with ConTeXt Mark IV
(previous versions were designed for older version of ConTeXt). If
you are upgrading from older version of WinEdt make sure that the
executable for ConTeXt in WinEdt's Execution Modes is set
context.exe (instead of old texexec.exe)...

If you want to use old ConTeXt you will have modify the menu:

  ITEM="ConTeXt"
    CAPTION="Co&nTeXt"
    CONFIGURATION="Default;MiKTeX;TeX Live"
    IMAGE="TeXConTeXt"
    SAVE_INPUT=1
    // ConTeXt Mark IV
    MACRO="Exe('%b\Exec\TeX\ConTeXt.edt');"
    // ConTeXt Mark II
    // MACRO="Exe('%b\Exec\TeX\ConTeXt_old.edt');"
    REQ_FILTER=:"%!M=TeX"|"%!M=TeX:STY"

- New options and enhancements to Execution Modes (including a new
page that allows specification of environment variables such as
BIBINPUTS and TEXINPUTS)... MIKTEX_EDITOR and TEXEDIT variables can
also be defined in this page (if automatic detection is TeX System
macros does not work).

- Startup macro has been modified to make this work and it now also
supports Local Startup...

- RunConsole and WinExe macros now contain extra parameters to deal
with oddities pertaining to differences between MiKTeX's texify.exe
and other executables. MiKTeX's error with initializing GUI
Framework (when install on demand package maintenance is triggered
during compilation due to a missing package) should no longer be a
problem if you are running MiKTeX in WinEdt's Console -- regardless
of choices in MiKTeX's Options ("Ask me first" or "Yes")... The
default macro %B\Exec\ExeCompiler.edt has been modified accordingly
in order to handle the exceptions.

- Error Detection now finds proper source file even when the
filename in log file is split in two lines and contains a mix of \
and / in path specification...

- An Exception when using Unindent (Shift+Tab) at the beginning of
an empty line has been fixed.

- Auto-Scrolling while selection with mouse is now "smooth" -- it
does not accelerate when you want to stop...

- WinEdt is now more selective if it has to activate an already
running instance of itself. It is no longer enough for the caption
of an existing Windows to match -- also the build and patch of that
window's application must match.

- A few macros have been fixed (eg. Active String SHORTCUT="" now
works properly with an empty argument).

- Windows Tooltips are now properly positioned when WinEdt is
running on a secondary monitor.

- SetFileMode('.'); resets mode depending on the file extension
(overwriting any previously set mode)...

- Do macro now has an extra parameter Protected:0/1.

 Do(!"Browse(0,'','%p');",1);
 IfOK('Prompt("OK")','Prompt("NOK")');

which would execute Macro in "protected mode" and consequently does
not stop the execution if the Browse interface has been canceled.

There are only about dozen macro functions that act like Browse
(EnterReg, EnterLongReg, Open, Exe, GetDim, GetCouter,
GetLobgString, GetString, WrS, ReadFile, Browse, McrLoadFromFile,
McrSaveToFile) and they could then be executed in a protected mode
through Do macro (if desired)...

- Line 66 in ExeCompiler.edt macro has been fixed to:

  IfStr("%!5","","<>",!"JMP(!'GUI-Done');");

instead of (typo):

  IfStr("%!5'","","<>",!"JMP(!'GUI-Done');");

which prevented the option Enter Extra Switches on Spot (Execution
Modes) from working properly for most accessories...

- Erase Output Files macro now deletes *.aux, etc... (rather than
just %N.aux). It also preserves the option "Include Subfolders" for
the next time WinEdt is started (as a part of dynamic data).

- Default settings have the option "Use --synctex..." in Execution
Modes | PDF Viewer disabled in order to avoid problems related to a
bug in MiKTeX 2.8 or 2.9 (when a filename contains a space this
option causes TeX to fail)... Also older versions of MiKTeX and TeX
Live do not support this option!

- If you decide not to create User Profiles during installation you
should enable Local Folder Creation. If User Profiles are enabled
then Application Data Folder is used for %b otherwise %b=%B\Local
is used. This levels the ground for all users regardless of whether
they created a user profile or not (eg. portable installations
should not enable user profiles)... Local data is preserved during
updates or upgrades.

Command switches to suppress default behavior are available for
advanced users with very special needs. Wizard clearly display the
current %B and %b folder in the readonly control in its first page.
If you disable both options then %b=%B and you are assumed to know
how to Backup and Restore (preserve) your settings during
upgrades...

    The User Profiles Page of the Wizard allow you to type custom
    Application Data folder for WinEdt (used only if User Profile
    Creation is Enabled). This (user-specific) folder is stored in
    Windows Registry (HKCU)... It should not be used for Portable
    installations that cannot rely on Registry. %B\Local is a good
    choice for such installations!

- Maintenance has been simplified: by default %b contains all your
customized settings and these settings are always preserved during
upgrades. Options -> Maintenance Menu contains and item "Cleanup"
that removes all local (%b) copies if ini (configuration) and edt
(macros) that are identical to the default ones in (%B). Both
folders can be browsed from the first page of the Wizard (on Win7/
Vista you may have to start WinEdt as Administrator before you can
browse a protected %B folder).

Furthermore, the context menu in the Options Interface now has an
option "Show Custom Flags" which will cause all branches in this
interface that contain local copies of ini or edt files to be
flagged with an extra icon. If you first perform a cleanup and then
"flag" custom scripts in this interface you'll have a pretty good
idea where do your settings differ from the defaults. You can then
open local and default (readonly) copy of such a script, use
Windows Menu -> Split Left command to align both files next to each
other and the use Next Difference (Search Menu) to see the
differences. You can then decide if you want to incorporate any of
the new default changes into your custom settings...

All WinEdt settings are stored in ini files (accessible through the
Options Interface) where they can be modified. Before changes
become effective you must load a modified script (they are not
automatically loaded during startup as many users assume!). The
command Rebuild All in the Maintenance menu will load all scripts
and thus rebuild the compiled version of your settings (WinEdt.dnt)
while Rebuild Local loads only local scripts. Only the compiled
version is loaded during the startup (significantly reducing the
startup time). However this version is NOT meant to be edited
manually (dnt stands for Do Not Touch). These settings are computer
generated based on the loaded ini files!

Maintenance menu allows you to create a backup of local copies of
ini files as well as your current compiled settings WinEdt.dnt. The
context menu in the Options Interface contains items to manually
create backup for a selected item or else open its backup copy for
readonly editing (if it exists).

Compiled Settings can restore backup or default compiled version
WinEdt.dnt -- restoring requires a restart of WinEdt. These actions
are there if you want to quickly compare applied default settings
with your custom ones or if you have to do an emergency restore
after your customizations went (really!) bad. For example, you
could use Default command, restart WinEdt (now it uses default
settings) and then use Rebuild command to reload your custom
settings or use the Options Interface to load only the selected
ones (certainly not those that have been "corrupted")!

In any case, you can either use default settings, stick with your
customized settings as they are (ignoring any changes or additions
to the defaults) or perform selective upgrades by comparing your
settings to the additions (where these are of any interest to you
-- such as eg. [perhaps] LuaTeX interface in this version).

And if you are moving to another computer and you want to import
identical configuration from you other machine: copy the contents
of %b folder and you have it!

- Cleanup macro in previous build of WinEdt had a problem because
edt and ini files were edited without trimming extra spaces at the
end of lines and without trimming empty lines at the end of file.
This could cause the macro to declare two scripts different even if
they differ in some trivial trailing space or empty line. The
default scripts have now been cleaned of such spaces and by default
WinEdt now trims them when editing such scripts. The following
changes have been made to Defaults:

TRIM_SPACES=1
  FILTER="*;INI;EDT|DATA;Binary"
TRIM_LINES=1
  FILTER="*;INI;EDT|DATA;Binary"

You may have to remove ini files from your project (Recent File
List) if you want these changes effective for local scripts that
you have already edited (or else use Document Settings Dialog to
manually change the values).

WinEdt 6 [Build 20100317 (v. 6.0)]
==================================

Bug Fixes:

  - [DICTIONARIES*] now works as expected...
  - Options Interface can be shown from the context popup menu without
  causing problems...
  - A few Filter Sets (containing double quotes) for highlighting were not
    properly defined in FilterSets.ini -- fixed.
  - A fix to Load Config.edt in TeX Live folder ([C]onfig.edt typo)...

New:

  - Execution Modes TeX System (for MiKTeX) now has an extra option:

    Maintain MiKTeX as Administrator

   When enabled MiKTeX Maintenance Menu Items (and toolbar) uses MiKTeX's
   Admin Maintenance Accessories... Execution Modes initialize the variable
   'MiKTeX-Admin' to '_admin' or '' (empty) and menu items use this variable as
   follows (in the default settings):

    ITEM="MiKTeX_Options"
      CAPTION="MiKTeX &Options"
      IMAGE="MacroScript"
      MACRO="Run('mo%$(|MiKTeX-Admin|);.exe');"
      REQ_FILTER="%$('TeX-Bin');\mo%$('MiKTeX-Admin');.exe"

  - In Wizard| User Profiles it is now possible to type a custom user
  application data folder and then press "Create/ Update User Profile" Button
  to make this folder your custom application data folder...

  - During installation there is a new option:

      Create &Local Application Data

    This option (with Create User Profile Disabled!!!) is suitable for
    portable installations on pen drives or custom installations for one user
    where local data is stored in %b=%B\Local and it is preserved there
    during upgrades...

  Between these two options there should really be no need to edit Get
  Application Data Folder.edt macro script (unless you have very, very
  special needs).

MetaPost and DTX Mode additions:

  - Added command completion in MetaPost mode
  - Added support for building Index and Change History in DTX mode
  - Added gathering of Changes in DTX mode
  - Insert Comment and Remove Comment have been adjusted to work in
    MetaPost and DTX modes
  - Added support for inserting stuff in MetaPost and DTX documents

The following *.ini files were (slightly) modified from previous
build to accommodate the above fixes and new functionality:

 MainMenu
 FilterSets
 Switches
 Keywords
 Dictionaries
 Gather
 Tree

- Create user Profile Macro has been modified so that executes
Startup if %b has been changed...


WinEdt 6 [Build 20100309 (v. 6.0)]
==================================

- Settings, Preferences and Appearance Dialogs have been replaced
with the new (customizable) Options Interface. It provides a tree
control that can be used to edit new categories (68 of them) of INI
files. Most new Keywords in WinEdtEx.dat correspond to the Options
that were scattered in the above dialogs. There is plenty to
explore there: Options -> Options and read Help for guidance...

- INI files have been implemented for Menu Setup, Dictionary
Manager and Highlighting Dialogs as well.

- No .ini files are loaded during WinEdt's Startup. Compiled
(computer generated raw data) is stored and loaded from WinEdt.dnt
(Do Not Touch). This makes startup faster and safer. Modifications
have to be done through the new Options Interface and loaded
immediately in the same interface. All .ini files are stored in
%b\ConfigEx folder...

- All Images and Icons used by WinEdt have been redesigned and the
appearance of WinEdt and consistency of its GUI has changed quite a
bit. Most users should find this an improvement (especially on
Windows with Themes enabled). And for others: WinEdt 5.5 is still
there (exactly as it was) and you can, of course, continue to use
your current (customized) version of WinEdt indefinitely. No need
to upgrade if you are happy with what you have!!!

------------------------------------------------------------------

CONFIGURATIONS:
===============

Configurations Filters for Menu and Toolbar have been introduced.
It is even possible to specify sub-configurations (eg. MiKTeX:HTML)
which means that all (menu and toolbar) items enabled for MiKTeX or
HTML will be visible.

Changing the configuration no longer rewrites any menus or toolbar
- Configuration filter makes items visible or invisible and
disabled. This works very well as opposed to rewriting menus and
toolbar which is slow and results in flickering. The code is clean
and newly written (rather than patched)...

There is no longer any need for Update Configurations in the
Maintenance: Configuration filters for menus and toolbar take care
of this!

  New Variable %!C expands to the Current Configuration

  SetConfig("Configuration",ForceMenuUpdate: 0..1);
  (Menu and Toolbar are updated if the configuration is changed
  or if the update is forced).

If used properly, this makes WinEdt more versatile than ever!

------------------------------------------------------------------

TOOLBAR:
========

In the Options Interface you can immediately chose from a bunch of
Toolbar Settings that may be suitable for your work (1 or 2 rows).

Functionality and appearance have been substantially extended and
changed.

    The previous toolbar was too restrictive because the layout
    of two (or more) rows was such that it forced one to match
    separators or else it looked odd. This means that sometimes
    buttons that do not really belong there were included just
    to fill the space. Now each Row is an independent toolbar
    and they are vertically separated: freedom at last!

Toolbar is now edited and loaded through the new Options interface.
By default there are some initial choices and they can be easily
modified.

The following properties are implemented:

[TOOLBAR]
 TOOLBAR="Name"
  INVISIBLE
  CONFIGURATION
  WIDTH
  HEIGHT
  BUTTON
    NAME
    TYPE
    HINT
    IMAGE
    MENU

Mostly default values suffice. For example omitting the image file
means that the button inherits the image from the menu item (as it
should). Menu Item ID should be specified as a string parameter for
BUTTON. For example:

  BUTTON="Set_Main_File"
  BUTTON="Remove_Main_File"

  BUTTON="|" is separator
and
  BUTTON="-" is divider

    These two are the only ones that take custom WIDTH as a
    parameter.

In the absence of HINT specification the (stripped of &) caption of
the menu item is used (as it should be).

If WIDTH and HEIGHT for each toolbar are omitted the (default)
dimensions specified in the header of TOOLBAR section are used.
That is a preferred way as toolbars should look the same...

INVISIBLE and CONFIGURATION filters make it possible to link a
toolbar or certain item/ button to a particular configuration.

TYPE (3..8) has to be specified for buttons that implement
additional functionality:

  0 (default) = ordinary button (no need to specify TYPE)
  1 separator (no need to specify if you use "|" as a ID)
  2 divider (no need to specify if you use "-" as a ID)
  3 Check Button (currently up)
  4 Check Button (currently down)
  5 Drop Down Menu - clicking on the button only displays this
    menu
  6 Drop Down Menu - Button has a fixed menu item associated
    with it
  7 Drop Down Menu - choosing any menu item associates this
    item with the button and executes it..
  8 The same as 7 except that choosing a menu does not execute
    this item

7 and 8 change the icon, hint and MENUID when you make menu
selection. This is suitable for a bunch of TeX / LaTeX / PDFTeX /
AMSTeX ... Compilers and reduces the clutter in the toolbar. Such
buttons are used in the new default toolbar!

3 and 4 could be used for options such as SRC specials on or off
etc...

Finally items in the dropdown menus are specified as

  MENU="MENUID"
  MENU="-" for menu separator

NAME is there only for future use for macros that can query and set
the status of buttons... It may only be useful for buttons that
implement dynamic drop-downs or up/down state. The following macros
are available to manipulate buttons:

  BtnClick("Name","MenuItem");
    Simulates a click on the button or its drop-down menu
    item...
  BtnGetDown("Name", Register: 0..9);
    Returns: 1 or 0 for Type 4 and 3 (respectively)
  BtnSetDown("Name", down: -1..1);
    -1=up; 0=toggle the value; 1=down (Type 3 and 4 only)
  BtnGetMenuItem("Name",  Register: 0..9);
    Menu Item Associated with this button (can change for types
    6..8)

    For example it is now possible to introduce a menu item
    with a single shortcut (eg. Ctrl+T):

      TeX Compiler
      BtnClick('TeX Compile');

    The main advantage being a single shortcut that executes
    whatever you select in the drop-down menu. It might be
    useful to have such an item and omit shortcuts for TeX
    executables present in the drop-down... Or else perhaps
    Compile and Preview macros for TeX Mode should take
    advantage of this. We'll see...

Currently all images must be 16x16 and they are loaded from
\Buttons\Images (local and global) at startup or later through
the Options Interface (or LoadImages Macro).

Old Toolbar.dat files cannot be loaded in the new version.

WinEdt.btn file no longer exists in the new version:

    New 16x16 (24-bit) bitmaps can be simply put in the
    %B\Bitmaps\Images or (private) %b\Bitmaps\Images folder and
    WinEdt will automatically load them when restarted or
    through the Options Interface.

    Contributions with quality images that are not included in
    the default settings (but can be used for additional
    configurations) are welcome!

------------------------------------------------------------------

MENU:
=====

ALL Menu Images have been revisited and are now used consistently
in the Menu and Toolbar (hundreds of hours of work went into this).

Te&X menu has been separated from &Accessories.

&View Menu has been introduced to toggle visibility of certain GUI
controls.

No menu or toolbar rewriting is required when switching
configurations (only visibility of items changes - much faster and
less flickering!).

Special menus where file lists are stored can be main Menu or
Submenus IDs. WinEdt no longer automatically adds recent file list
(it must be included in the menu setup -- that's why ShowFileList;
macro was implemented: simpler is better!).

 [MAIN_MENU]
 FILE_MENU
 PROJECT_MENU
 WINDOWS_MENU
 MENU
   CAPTION
   DISABLED
   INVISIBLE
   CONFIGURATION
   IMAGE
   SUBMENU
   END
   ITEM
     MACRO
     SHORTCUT
     SAVE_INPUT
     START_FOLDER
     DEFINITION
     REQ_FILTER
     REQ_DOCUMENT
     REQ_FILE
     REQ_MAIN_FILE
     REQ_SELECTED_TEXT
     REQ_MODIFIED_TEXT
     REQ_CLIPBOARD_TEXT
     REQ_A_MODIFIED_DOCUMENT
     REQ_UNDO_INFO
     REQ_REDO_INFO
     REQ_UNDO_BUFFER
     REQ_WORKING_STATUS

ITEM="-" is interpreted as a (horizontal) menu separator.

The same for Popup Menus except 3 special menus are different:

 [POPUP_MENUS]
 CLIENT_POPUP
 TEXT_POPUP
 SELECTED_POPUP

When WinEdt exports Menus the SHORTCUT value contains a scan code
followed by the English description of the shortcut:

    SHORTCUT="16576::Ctrl+`"

Scan-codes make loading the menu faster and they also preserve
shortcuts when switching keyboards or installing WinEdt on a
non-English keyboard. If you edit Menu.ini directly you don't have
to specify a scan code. However, avoid specifying shortcuts that
may not exist on other keyboards. For example on an English
keyboard there is no Ctrl++ (Ctrl+Shift+= is a proper shortcut in
this case)...

To avoid duplicating quotes in strings that contain macro
definitions it is now possible to specify "raw" strings (the rest
of the line) in WinEdt's .ini files. For example

    MACRO=:IfSel("0","=","Ins('\RCSMark{}');CharLeft;","InsLabel('\RCSMark','{','}')");

rather than

    MACRO="IfSel(""0"",""="",""Ins('\RCSMark{}');CharLeft;"",""InsLabel('\RCSMark','{','}')"");"

There are no longer shortcuts for invisible popups. Use Popup macro
instead to implement double or triple shortcuts (this was on my
to-do list).

Each menu should have a unique ID that can be used to refer to this
item in the Toolbar or by Menu and Popup Macros. Thus translating
the menu does not affect any functionality since IDs should be left
alone (only Captions are subject to translations).

Menu() and Popup() macros now first use MenuIDs and only if this
fails menu captions are used (for compatibility with the old
version).

Old Menu.dat files cannot be loaded in the new version. There may
be some manual editing required to change any old menu.dat file
into menu.ini that can be used with the new version. WinEdt.img
file no longer exists in the new version.

------------------------------------------------------------------

- Things have changed between Config and Exec folders. There is
more stuff in Exec and less in Config (Load Config.edt etc...).

- WinEdt now uses new macros:

      MACRO="Exe('%b\Exec\PDF\PDF Preview.edt');"
      MACRO="Exe('%b\Exec\PDF\PDF Search.edt');"

      MACRO="Exe('%b\Exec\PDF\PDFCloseDoc.exe');"

Configuration (TeX System)-sensitive:

      MACRO="Exe('%b\Exec\TeX\DVI Preview.edt');"
      MACRO="Exe('%b\Exec\TeX\DVI Search.edt');"

etc... (more consistent macro script names and
configuration-sensitive functionality!)

- New PDF Macros should work with Adobe, Sumatra, GSView, Foxit or
PDF-XChange (compatible with the new Exec Modes but not with old
ones!)... Adobe 9 can no longer restore previous position after a
document has been recompiled (at the moment there is no remedy for
this!).

- New Macro MDISplit is used for new items in Window Menu. Split
Left or Split Top can be used to quickly tile documents and make
them ready for comparison. Compare commands in the Search Menu work
with such documents (it is no longer required to first minimize all
documents and tile the two that are to be compared -- which was
rather annoying with many documents opened).

- Highlighting of switches now allows specification of background
color. Furthermore background can be painted with gradient (left to
right).

- New Parameters used for portable installation:
 %H - drive of %B
 %h - drive of %b
 %!H - %B up to the first instance of \WinEdt
 %!h - %b up to the first instance of \WinEdt

This can be used to specify TeX Root relative to WinEdt (drive
letter may depend on where you plug your portable device!).

- TeX Menu now contains items for ConTeXt and MetaPost.

- New: support for compiling MetaPost documents and Documented
LaTeX (DTX).

-WinEdt now supports long Project Lists stored in a file (rather
than windows registry). The default file is:

  %b\WinEdt-PrjList.dat

and it can be adjusted in the (simplified) Project Manager section
of the Options Interface. This makes WinEdt portable (if installed
on a removable device [without automatic profile creation]) since
it no longer uses Windows registry for any of its settings or
registration... Also WinEdt now maintains a list of up-to 999
recent projects.

- New Macros:
  IfCMDSwitch("Char","Then","Else");
  ShowFileList;
  ShowProjectList;
  ReloadImages;

  SetBTN macro is out as there is no .btn file anymore!

- New variables:
  %!C Variable gives the current configuration
  %* used for parameters in Filetype Associations
     (before a global register %2 was used and that was not a good idea)

- ADVANCED! New Command Line Switches:
  -X command line switch suppresses using of the profile.
  Startup macro contains the lines:

  IfCMDSwitch(!"I",!"JMP('no_profile_update');"); // Install Run
  IfCMDSwitch(!"X",!"JMP('no_profile_update');"); // No Profile...

  (-x,-Y,-y,-Z,-z switches are admissible but have no
  predefined meaning. They can have an effect in combination
  with the above macro...)

- Compile and Preview items in Accessories Menu call new
mode-sensitive macros. They in turn call TeX Compile or HTML Help
Compiler (or any other accessory or appropriate previewer if
properly customized) depending on the mode of the main file/
current document... That's why they have generic (Borland-style)
shortcuts. ALL Macros in Exec folder have been revisited...

- Advanced menu now contains interfaces for new Menu and Toolbar
ini files.

- WinEdt console now no longer uses RTF control but is based on a
custom code. This makes it more robust, less flickering and gives
it a more console-like keyboard interface...

- Tree Form has an extra (optional) toolbar at the bottom. This
interface can be used to show or hide forms that are by default
docked at the bottom of the screen (Console, Errors, Gather, Find
in Files, and Macro Recorder).

------------------------------------------------------------------

The information below pertains to what was initially uploaded as a
beta version of WinEdt 5.6. However, due to substantial changes to
WinEdt's GUI WinEdt 5.6 project has been abandoned in favor of the
new version 6.0 (and the beginning of the new series of WinEdt 6).

------------------------------------------------------------------

- A bug fix with the new option to prevent wrapping of comments
(Options -> Advanced -> Environments):

 WRAP_SOFT_COMMENTS=0 // Do not Wrap Comments in Soft Mode!

Previously a paragraph was not wrapped if the next line contained a
comment...

- A filter has been put in place to prevent (unwanted) activation
of active strings with wildcards. Both typing, and, double-clicking
response is now more selective...

- SendMail (MAPI) functionality did not work properly with Outlook
Express. The problem was that the Main Windows Handle was passed as
a parameter (instead of the Application Handle). This resulted in
broken keyboard and mouse interface inside the mailer as well as
unwanted modal task in the taskbar. Fixed.

- The Insert key now has the old default functionality (toggle
Insert Mode). It can be adjusted in Options Interface -> Advanced
-> Common Macros...

- Select All functionality (refresh oddity) has been fixed and
vertical scroll bar is now properly resized after such selection
has been replaced with a smaller text. Previously the last line
would end up at the top of the screen...

- Console applications (TeX, LaTeX, and all) now call new common
macros in Exec\TeX folder. A new macro ExeCompiler.edt in Exec
folder takes care of actual execution as defined in the Execution
Modes. By default console applications run in WinEdt's Console
docked at the bottom of WinEdt's Window. The appearance and
position of this Window can be adjusted through the Forms Section
of the Options Interface (just like Tree and Gather Control).
Visibility of WinEdt console can be toggled through a new menu item
in the Accessories Menu (Ctrl+Shift+C).

  Note that Console allows keyboard input. When Activated and
  Focused it captures keyboard input. To give focus back to the
  Active MDI Window, use ESC key of click on the text or use
  Ctrl+Shift+C to hide and disable the console. Only one
  application at the time can be run in WinEdt's Console (which
  is usually what you want when you are compiling a TeX
  Document).

Execution Modes dialog allows you to change default properties
pertaining to the execution of TeX accessories. In particular, you
can disable the "WinEdt Console" option and press "Apply to All"
button to establish previous mode of execution using a separate
Windows Console ("black box"). For some applications this may be a
preferred method... At this stage it is up to beta testers to
experiment and provide feedback and solutions. My testing with
MiKTeX 2.7 and TeX Live 2007 did not reveal any problems with the
new default settings and the new console.

- The accessories menu and toolbar contains "Compile" and "Compile
Selected" items (F9 and Shift+F9). At the moment these two items
can be configured in the Execution Modes (compile to dvi, ps or pdf
and use 3 different methods to create pdf). Advanced users may take
a look at the macros that do the job (the same set is used for
MiKTeX and TeX Live) and come up with improvements and new ideas
how to quickly configure these two items. The "Compile" item should
be defined for the most common kind of compilation that you
encounter for your work. That may vary from one user to another...

- It is not required that TeXify item in the accessories menu
contains texify.exe as an executable (in particular, TeX Live has
no texify.exe!). You could specify your favorite TeX Compiler (eg.
xelatex.exe) and possibly enable 3 custom iterations in the
Execution Modes to let WinEdt's Macro run BibTeX and MakeIndex up
to 3 times (as required to get compiled document up-to-date).

- Redirection of TeX Aux files to another folder may not work with
all accessories and TeX Systems (this was also the case in 5.5). It
assumes that they support *-directory=dir switches and that Aux
folder already contains subfolders for documents placed relative to
the main file. If you encounter problems with this you should
consult the macros and the documentation/ help for TeX accessory in
question and see if you can come up with an elegant solution (eg.
by using the command prompt to achieve what you want). And if it
cannot be done than you'll have to give up this feature or resort
to some brute force solution in order to allow such accessory
process files in "remote/non-default" folders... If you cannot find
the way to accomplish the task from the Command Prompt then it is
unlikely that a WinEdt macro can do anything about it!

- WinEdt Macro engine was subject to substantial changes that were
required to accommodate and ever increasing number of macro
functions. The old case sentence executing code on the stack was
stretched to the limit and something had to be done about it. Users
should not notice any difference except for improved macro
execution speed and performance. You should know that it is always
possible that some unintentional change in the behavior of macro
scripts might result from this... If so, we'll deal with it.

- New macros for execution of console applications (inside WinEdt's
Interface):

  RunConsole("Command","Folder","Caption",
    no_Reset,no_Show,no_Echo,no_Console,no_hide_Console: 0..1);
  SetConsoleCharset(s: -1..4; charset: 0..255);
    s = -1: use charset value (0..255)
         0: Custom (as specified in Highlighting| Forms)
         1: Editor default
         2: Windows default
         3: ANSI
         4: OEM
  SetConsoleText("Text", GOTO_End,Append: 0..1);
  GetConsoleText(Register: 0..9);
  SetConsoleInfo("Info Caption");
  GetConsoleInfo(Register: 0..9);
  ShowConsole(Visible: -1..1, test_Visibility: 0..1);
  FocusConsole(Focused: -1..1, test_Focus: 0..1);
  ResetConsole;
  IfConsoleRunning("Then Macro","Else Macro");

- ShowExecutionModes macro function has been stripped of parameters
for extra files that are no longer used (not compatible with the
old one!!!):

  ShowExecutionModes('Execution Modes - MiKTeX',>
    '%b\Exec\MiKTeX\ExeMode.edt',>
    '%b\Exec\MiKTeX\ExeMode_Backup.edt',>
    '%b\Exec\MiKTeX\ExeMode_Custom.edt',>
    '%b\Exec\MiKTeX\ExeMode_Default.edt',>
      1); // Extended Mode with Extra Pages for TeX System and TeX Output

- Execution Modes Interface has been redone to allow new options
with WinEdt console execution.

- New macro to remove extra/ redundant spaces from the command line
(except inside double-quotes):

  TrimCommandLine("Command", Register: 0..9);

- Search -> Hide Errors Menu Command (CtrL+Shift+E) now hides the
console as well:

  ShowErrorLog(0);ShowConsole(-1);

- Tree and Gather interface now allows some extended processing and
specifications in order to include more useful information
pertaining to Bibliography Items:

    EXTENDED="@{}()\"
    EXITEMS="author,title,year,@"
    EXLINELIMIT=16
    CAPTION="%?: %!?"

If you don't want this in the Tree or Gather comment out this lines
and use

    CAPTION="%?"

to display only bib label. Extra processing might be a bit slower
in huge bibliography files (data bases). In Gather form docked at
the bottom long captions with Author, Title,... make sense.

- Macro GDIPopup has extra parameters:

   GDIPopup("Page","Caption",Refresh,Sort,Track_onClick,Track_onDblClick,OK_onDblClick:0..1,
     "Selected Item", "Filter String",Remove_Filter:0..1,Show_Buttons:-1..1,
   New:
     Extended_Items:0..1, // Show Extended Bib Data for \cite{}
         Extended captions must be enabled for Gather interface or else
         GDIPopup interface always shows short captions.

     List_Separator_Mode: 0..2, "Separator_Char");

   List_Separator_Mode
     0 - don't allow multiple selections
     1 - allow multiple selections
         extra edit control is made visible when you press
         Separator Character (by default comma)
     2 - allow multiple selections
         extra edit control is initially visible

- A new Global Options under the [ENVIRONMENTS] section:

  WRAP_SOFT_COMMENTS=0 // Do not Wrap Comments in Soft Mode!

This property is automatically on in Semi-Soft Wrapping (where
wrapping such lines would cause problems with compilation!).

- Tree Branches now allow specification of # which is expanded to
the number of items inside. For Example:

  BRANCH="Bibliography (# Items)"

Repeat ## twice to include character # in this string (if
required).

- Input Directives (Tree.ini) now allow specification of the
CAPTION. Advanced users can change the way the filename will appear
in the tree (eg. by stripping off the PATH or Filetype similar to
the FILENAME directive). Custom processing takes place after
FILENAME has been processed. %? refers to the unprocessed caption
(filename)...

- New Switch for comments in LaTeX Documents:

  \begin{comment} .... \end{comment}

- New Switch for verbatim: \verb/?/...

- A few enhancements to MUI (including multiple selections in list
boxes as documented in Macro Manual).

- HTML Compiler now calls TtH for TeX Mode (before it was disabled
for this mode and it only worked for HTML Help Files).

- Document Tabs now respond to middle click (close the associated
document) and double-click on the empty portion (open a new
document). The same as Firefox or IE7...

- WinEdt now comes with LaTeX Help e-book (HTML File with
documentation for LaTeX and other TeX Accessories). WinEdt's Help
Menu has an interface for it in its Help Menu...

==================================================================

Bug Fixes:
==========

- A problem with finding files in the project tree when PATH is
being used in WinEdt's Input Directives has been fixed. GetTree
macro now correctly qualifies such files (as do other functions
that depend on such files such as FindInFiles).

- \#{...} and \#~{...} RegEx filters now allows expressions that
span over one line if the expression contains > or **.

- A Bug with \# RegEx in FindInString has been fixed.

- The caret is now properly positioned when large extra line
spacing is specified Font section of the Options Interface...

- A bug for LstGetItem has been fixed (it now correctly returns an
item as specified by the index parameter).

- Word Count now properly ignores text in softly wrapped comments
(bug fix)...

- A delimiter matching bug with (unlikely) constructions like $\$$
or $$\$$$ has been fixed.

- WinEdt (in the background) is now properly displayed in the
taskbar on Vista even if it is running a modal dialog...

- Windows Classic Appearance Fixes:
  - Unwanted Horizontal Bar no longer appears when not
    necessary in softly wrapped documents!
  - A Refresh Oddity with Document Tabs after WinEdt has been
    resized has been fixed.

==================================================================

- Commands (in the menu) have been replaced by macros: simple is
better....

CMD(""); macro still exist for compatibility with old macros.
Macros give menu items functionality (Commands, Documents and
Utilities no longer exist).

A bunch of macros have been introduced to replace the old
commands...

    The file WinEdtCMD.dat describes macro equivalents of old
    commands (this file is loaded and parameters to CMD macro
    are replaced by their macro equivalents [...] on the
    right).

- Long Macro definitions in HTML (Insert) menu have been replaced
with macro scripts (the same for a few long items in Popup Menus).
Neat and tidy....

- The following Macros have extra parameters (extended
functionality as documented in Macro Manual):

  Popup
  SetSort
  SortLines
  GetColor
  GDIPopup

- The following Macros have less parameters (as documented in Macro
Manual):

  ShowExecutionModes
  SetIndent

- All Import/ Export macros have been deleted. The new Options
interface makes them redundant...

The following macros no longer exist:

  // Legacy Windows (doesn't work on Windows >= 6)
  WinHelp
  HelpKeyword
  SendToDOS
  // Not used any more ...
  SetBTN
  SetGUI
  // Obsolete Configuration Macros
  // Can be adjusted by loading an INI file
  // Some Settings are now mode-sensitive ...
  // Use LoadConfig if you really must overwrite this settings from a macro
  // Tabs.ini and Font Schemes for mode-sensitive settings
  SetTabs
  // Project Manager
  SetRestorePrj
  // Backup .. File Status Detection
  SetBackup
  SetAutoSave
  SetIdleSave
  SetUpdateDrives
  // Editor .. Defaults
  SetEditor
  SetModeDef
  // Events Handlers
  SetOnStartup
  SetOnExit
  SetOnMDIOpen
  SetOnMDIActivate
  SetOnPrjClose
  SetOnPrjOpen
  // Import/ Export Functionality
  AddDictionary
  RemoveDictionary
  AddMode
  DelMode
  AddActive
  DelActive
  ActiveOK
  AddBackground
  DelBackground
  AddFilters
  DelFilter
  AddSwitches
  DelSwitch
  AddKeywords
  DelKeyword
  AddColumns
  DelColumn
  HighlightingOK
  AddMenus
  AddPopups
  AddTranslations
  // Import *.dat ...
  LoadDictionaries
  LoadProject
  LoadMenus
  LoadPopups
  LoadToolBar
  LoadStatusLine
  LoadBookmarks
  LoadColors
  LoadBackground
  LoadFilters
  LoadSwitches
  LoadKeywords
  LoadColumns
  LoadSettings
  LoadLanguage
  LoadActive
  LoadTranslations
  LoadDelimiters
  LoadPreferences
  LoadModes
  LoadDefaults
  LoadFont
  LoadTemplates
  LoadPrint
  LoadSort
  // Export *.dat ...
  ExtractDictionaries
  ExtractProject
  ExtractMenus
  ExtractPopups
  ExtractToolBar
  ExtractStatusLine
  ExtractBookmarks
  ExtractColors
  ExtractBackground
  ExtractFilters
  ExtractSwitches
  ExtractKeywords
  ExtractColumns
  ExtractSettings
  ExtractLanguage
  ExtractActive
  ExtractTranslations
  ExtractDelimiters
  ExtractPreferences
  ExtractModes
  ExtractDefaults
  ExtractFont
  ExtractTemplates
  ExtractPrint
  ExtractSort

____________________________________________________________________

WinEdt 5 [Build 20071003 (v. 5.5)]
==================================

- A new macro function GetAppDataFolder has been added and
documented. It is now used in the macro script

  WinEdt\WinShell\Profiles\Get Application Data Folder.edt

The old method of obtaining this value from the registry in
some cases failed. On Windows Vista this resulted in WinEdt
crashing when being closed (serious enough to merit an
investigation). This macro function uses Windows API according
to Windows guidelines and it should be completely reliable
without introducing any compatibility issues for users that
have already created a profile in older version of WinEdt. The
problems with the old version were rare (only 3 users ever
reported them). However, it is best to follow the proper
guidelines and avoid relying on the registry key that may be
corrupted...


WinEdt 5 [Build 20070921 (v. 5.5)]
==================================

- WinEdt Help has been extended with a section on Environment
Variables which explains how to define such variables and how
to configure WinEdt to locate your input files that reside in
designated folders outside the directory where the main file is
located. This has been a frequently asked question and many
users mistakenly assumed that WinEdt's Input Directives
configuration affects where TeX is looking for such files. The
new help section (in the Advanced Chapter) explains it all...


WinEdt 5 [Build 20070913 (v. 5.5)]
==================================

- A problem on Vista with some controls becoming invisible in
dialogs with Tab Page Control when both keyboard and mouse has
been used to switch between pages has been fixed...

- A minor refresh oddity regarding the line numbers has been
detected and fixed...

- A minor correction to the default error detection in order to
filter out more (harmless) warnings produced by PDFTeX...

- A few typos in the help have been fixed...


WinEdt 5 [Build 20070819 (v. 5.5)]
==================================

- A problem with running WinEdt 5.5 on Win98 has been fixed.

- Further improvements to the macro that opens pdf files: it
now works correctly with GSView and Foxit Reader as well as
Adobe 8...

- Added support for

  \import{dir/}{file}

input directive in the default settings...

- Minor fixes to the Help and Documentation....


WinEdt 5 [Build 20070716 (v. 5.5)]
==================================

- Menus on VISTA now look better (no custom drawing which gave
menus old-style [pre-Vista] appearance).

- ToolTips (Hints) for WinEdt's Toolbar now use Windows tips
which gives them a proper "vista" appearance.

- Advanced Page in the Menu Setup Dialog contains options that
control the use of Windows Menus and Tooltips (as opposed to
Delphi's Menus and Hints):

  Allow Custom Menu Drawing  (off on Vista; on otherwise)
  Use Windows Tooltips       (on on Vista; off otherwise)

If on your Vista you encounter any problems with the new
options you should use XP settings...

- Character | is now allowed in custom hints for WinEdt's MUI
controls...

- A bug fix related to Find/ Replace in All Opened Files:

  when soft wrapping and formatting to the size of screen was
  enabled the first found instance in the file could be
  mismatched if WinEdt was resized before the search took
  place (a string where the found string used to be before the
  document is reformatting is selected instead). Fixed...

- A problem with the mouse cursor jumping (up and left) after
attempting a selection with a mouse or double-clicking on a
word when Vista-style scaling is enabled has been fixed. The
source of the problem is a bug in Vista, however, WinEdt now
avoids using SetCursorPos API function to avoid triggering this
Vista bug...

- A problem with custom iteration through multi-byte (16-bit)
Chinese Characters and associated display oddities have been
fixed...

- A few fixes to the Help and Documentation (fixed links and
last minute changes and additions, including some tips on Vista
appearance and the new options that control it)...

- On Windows Vista MiKTeX 2.6 Update Wizard item in WinEdt's
Menu has to be changed from

 Run(|copystart.exe "%$('TeX-Root');\miktex\config\update.dat"|);

to

 Run(|copystart_admin.exe "%$('TeX-Root');\miktex\config\update.dat"|);

Default configuration in this build takes care of this but if
you preserved your old settings you must make the change
manually in the Menu Setup Dialog. This has to do with Vista
security and execution of applications that require
administrative privileges. The old command will not work on
Vista and WinEdt will simply report that it failed to execute
copystart.exe...

- Adobe macros have been updated so as to work with Adobe 8
without relying on Menu ID to close a document. We'll see...

*** TeX Live 2007 issues only:

- WinEdt now has a new TeX Live configuration compatible with
TeX Live 2007. It comes with new execution macros including a
custom version of [PDF]TeXify and links to the selected TeX
Live Documentation in the Help Menu...

- In dviout (TeX Live dvi viewer) enter the following as a src
command in its Options -> Setup Parameters| Common Dialog:

    WinEdt.exe^s"[Open(|%s|);SelPar(%d,8)]"

Then press the Save Button followed by the Apply Button.
Neglecting to do so will not permanently enable Inverse Search
from dviout... I am not sure how SRC specials work with files
in subfolders since dviout only takes filename (without PATH)
as a parameter...

- Ordinary Preview call in WinEdt must fix dviout failing to
get in the foreground and it should be:

  Run(|%$('DVIView'); -1 "%P\%N.dvi"|,'%P',0,0,'%N.dvi - dviout',1,1);SetFocus('- dviout');

- Forward dvi search in WinEdt should be:

  Run(|%$('DVIView'); -1 "%P\%N.dvi" # %!l "%/Q%n%t"|,'%P',0,0,'- dviout',1,0);

Parameter %Q (see Macro Manual) has been introduced to specify
relative directory names because dviout does not know how to
match a full file specification with a relative one...


WinEdt 5 [Build 20070501 (v. 5.5)]
==================================

- Under VISTA WinEdt sometimes "refuses" to start. This happens
because of a Hint Window previously displayed in Windows
Taskbar when the mouse was positioned over WinEdt. WinEdt
mistook this Window for its running instance. The problem is
now fixed for this build...

- This build has been extensively tested with MiKTeX 2.6 under
Vista. It works well and I did not have to make any manual
changes in the Execution Modes Dialog: WinEdt correctly
detected all software. It is, however, important that you
install all software with Administrative account (especially on
Vista). Otherwise you will likely experience a lot of problems
because of the new security features in OS... You can later use
it as a restricted user (as long as you enabled the profile
creation - a default setting in WinEdt's Installation Wizard).

- Options -> Appearance Dialog now contains new options whether
to use Cool Bar in WinEdt's Toolbar and GUI Control. Depending
on your version of Windows and enabled themes cool bars may be
aesthetically pleasing (or annoying to some users). However,
they may also result in extra refreshing when WinEdt is
resized. You can make your choices and apply the changes
directly in the Appearance Dialog (Tool Bar and GUI Page) and
see what works for you...

- Extensive flickering after any system changes or after the
computer wakes up from hibernation has been eliminated (traced
into Delphi's VCL)...


WinEdt 5 [Build 20070417 (v. 5.5)]
==================================

- Documentation (help) has been updated including the new
section on the Advanced Configuration (new in 5.5)...

- A fix to a Compile Selected macro...

- Extension to [TREE] and [GATHER] sections:

CURRENT_DOCUMENT_ONLY now allows values 0..2:

  0 = search only as part of tree (if applicable)
  1 = search it when no main file is set
  2 = always search the current document

The same for ALL_OPENED_DOCUMENTS=0..2.

- A minor RegEx fix in Softly Wrapped Documents:

  "\#{<@^{b}}b"

- Forward pdf search now works with Foxit as well thanks to the
fix in "Exec\Adobe OpenDoc-Find.edt" by Robert...

- Execution Modes interface now allows Browsing for Folders and
Executables rather than having to type them directly in Edit
controls...

- Changes to GetPreamble Macro -- a minor extension and
explanation on how it works (see Macro Manual)

- Extra Options in Incremental Search (for even more different
opinions on how it should work:-)...

- UTF-8 Demo has been slightly corrected. UTF8 euro can be
displayed after all (thanks, Robert) if you use:

  \usepackage{textcomp} % required for \texteuro


WinEdt 5 [Build 20070323 (v. 5.5)] (beta 5)
===========================================

- Default Settings: WinEdt no longer uses redirected TeX Aux
Folder in its default settings. This can be manually turned on
and off in the Execution Modes| TeX Output Interface...

- WinEdt now properly positions prompts and some "floating"
dialogs (eg. Spell Checking) when it is running in the
secondary monitor. Previous builds would display such dialogs
on the primary monitor. Fixed for 20070323.

- WinEdt now properly detects the newest Ghostscript (AFPL is
now GPL). Fixed for 20070323.

- When a project list was shorter than 2*number of opened files
WinEdt did not restore ALL previously opened documents. Fixed
for 20070221.

- Mouse Popup Menus in Build 20070319 do not work properly.
Fixed for 20070221.


WinEdt 5 [Build 20070319 (v. 5.5)] (beta 5)
===========================================

- Tree and Gather interface now properly work with a current
document when no main file is set (or the project tree is not
built)...

- A bug with manual paragraph wrapping has been fixed (the
command was previously disabled when auto-wrapping was turned
off).

- Log files are now properly parsed even if the line break
occurs in the middle of the line number (as TeX has been known
to do)...

- New Parameter to allow UTF-8 and/or BOM Unicode detection:

  ReadFile("",#0..9,#0,Unicode: 0..2);
    0 - no unicode detection (as before)
    1 - BOM Unicode Detection
    2 - UTF-8 and BOM Detection

- The Wizard now allows you to specify the filter of modes for
which UTF-8 format is enabled. By default you'll find something
like:

UTF-8|ACP;EDT;INI

with BOM disabled. Should you want to use UTF-8 for all TeX
documents you can add TeX to the filter. Also consult the

  UTF-8 Demo

sample LaTeX Document in WinEdt's Document -> Samples Menu to
learn more on how to handle UTF-8 documents and how to avoid
corrupted documents...

  Windows has no direct support for UTF-8 and such documents
  have to be correctly recognized and then converted to Windows
  UNICODE or Ansi Page (ACP) when loaded and displayed by WinEdt...

This functionality is new and it is possible that some glitches
remain to be fixed but the basic functionality should be there.

- A new faster and better GetMode macro in Macros\Events is now
being used to determine the mode. It recognizes UTF-8 encoding
from (emacs coding directive):

  % -*- coding: utf-8 -*-

or for TeX documents also from:

  \usepackage[utf8]{inputenc}

- New macros for UTF-8 support:

  IfFileUTF8("Filename","Then Macro","Else Macro");

  UTF2Ansi("String", Register: 0..9, Test: 0..1);
    - if test parameter is set to 1 then no error is reported
    if the string is not in UTF-8 format and no conversion is
    performed: used IfOK to determine the format...

  Ansi2UTF("String", Register: 0..9, BOM: 0..1);
    - if BOM parameter is set to 1 then Byte Order Mark is
    inserted at the beginning of the string. Notepad always
    used BOM to sign and recognize UTF-8 files but many
    compilers (including TeX) don't like extra bytes at the
    beginning of the file...

    Make sure that you understand what is UTF-8 before you
    perform any conversions. For example converting UTF-8
    document with Ansi2UTF will result in a corrupted file!

- The Compile Selected macro now works properly with UTF-8
files and it detects the lack of the preamble in which case it
uses a generic LaTeX preamble rather than letting the
compilation result in fatal LaTeX Errors...

- RegEx extension (see the macro manual for details):

   <something>\E{isMath}

 a shorter form of:

   <something>\X{\"|Exe('%b\Macros\RegEx\isMath.edt');|}

 matches <something> only inside Math Environments!

 Switches (as defined in Syntax Highlighting) are used to
 determine whether a match is inside such an environment...

- Execution Modes has been extended with Forward Search option
for PDF (when using \usepackage{pdfsync}). The package has some
limitations and by default forward search is not enabled but it
can easily be changed through Execution Modes interface...

- Extra parameters for

  Browse(Register: 0..9,
    "Filter|*.*",
    "Initial Folder",
    "File Name",
    "Default Extension",
    Filter Index: 0..9999);

Browse(0,"Folders|*........","Current Folder");

Can be used if you want to browse for input folder rather than
a file. Use GetFilePath(0,'%!0'); to get rid of the "Current
Folder" part in the return...

- MUI Lists now allow "escaped" item separator: A|Bar:|||C...

- Drop-Down Boxes and MUI now works properly with resolutions
other than 96 when scaling of forms is enabled...

- MUIReset macro has an extra numeric parameter. Specify this
value to be the your screen resolution if the dimensions in MUI
refer to values different from default (96) [not likely on
newer computers]...

- A few minor bugs (as reported on the mailing list or private
correspondence) have been fixed. Confirmations welcome...


WinEdt 5 [Build 20061213 (v. 5.5)] (beta 4)
===========================================

- Preferences Dialog| Event Handlers now contains an option

  "Report Errors when undefined %. variables are encountered"

By default this option is disabled and WinEdt now acts like
before (includes the variable as an ordinary string). Beta 3
translated such variables into empty strings and this could
make some macros behave differently. Macro writers can enable
this option when they are testing their scripts to make sure
that they are not using undefined variables. For the rest
compatibility with the older versions (having the option
disabled) is probably safer especially if some macro script
behaves differently...

- New macro scripts for compilation of pdf files are Adobe 8
compatible. Adobe 8 crashes when it receives a sequence DDE
OpenDoc and CloseDoc and a new solution is required to release
a pdf file before it can be compiled. The new macros and
Acrobat Page in the Execution Modes interface take care of
this...

- Dictionary Manager now has an option to automatically
capitalize the beginning of sentences (a surprisingly popular
feature request)...

- Dictionary Manager (Ignored Text) now has an option to enable
and specify the hyphenation string (\- is used by TeX). When
enabled som\-thing is considered misspelled while some\-thing
is OK...

- Dictionary Manager now has a new Tab Page (Abbr.) where you
can enable and define a list of abbreviations that get
automatically expanded when you type a trigger string (by
default a single space but it can be customized) immediately
after the abbreviation. Abbreviations are edited in a format:

  "abbr" = "expanded string"

(one per line). This functionality could be implemented with
Active Strings but it is much easier to edit a simple list of
substitutions (it is also faster as it does not involve any
macro execution). A usual string rules apply: if the
double-quote is a part of string it has to be repeated twice...

Defaults don't use any abbreviations since the such
functionality is very subjective: while some users may love it
others may equally hate it!

- Menu Setup| Advanced Dialog has an extra option "Automatic
Hot Keys"...

- A fix to RegEx: A tag can now be used immediately after the
wildcard. For example:

    <\(?*\)><\0>

now finds repeated lines. In older versions it does not unless
the first expression is grouped:

    {<\(?*\)>}<\0>

- A fix to IfisMode function.

 IfisMode("LaTeX","LaTeX3","Prompt('True')","Prompt('False')");

now returns "False" as one would expect...

- New macros to allow automatic selection of the items in the
Tree (Navigation Bar/TOC):
  TreeExpandBranch("Branch",Recuse_Children: 0..1);
  TreeCollapseBranch("Branch",Recuse_Children: 0..1);
    Empty Branch refers to the file tree and "*" indicates all
    branches.
  TreeSelectBranch("Branch",LocateCurrentPosition: 0..2,
    AutoCollapse: 0..2,
    AutoCollapseTopBranches: 0..2,
    AutoCollapseSelected: 0..2);
    - Empty Branch refers to the file tree and "*" indicates
    currently selected branch...
    LocateCurrentPosition:
      0 - select the main branch
      1 - locate the current position in specified branch
      2 - ignore branch and leave the currently selected node:
          collapsing still applies
  TreeAutoSelect(Select: -1..1, "Branch",
    Only_if_Slected: 0..1,
    AutoCollapse: 0..2,
    AutoCollapseTopBranches: 0..2,
    AutoCollapseSelected: 0..2);
    - Empty Branch refers to the file tree and "*" indicates
    currently selected branch...
    - Auto-collapsing may prevent too many branches in TOC being
    expanded in large projects:
      0 = off (no collapsing)
      1 = on (do not recurse)
      2 = on (recurse and collapse all children)

- Context popup menu in tree branches contains an item to
manually locate the current position in this branch.

- Project Menu contains items to Automatically Select Items in
TOC, Files and to turn automatic selection off:

  TreeSelect('TOC');TreeAutoSelect(1,'TOC',1,2,0,2);
  TreeSelect('');TreeAutoSelect(1,'',1,2,0,2);
  TreeAutoSelect(-1);

- Help in the "Icons and Filetype Associations" Dialog now
works (broken link in the help file has been fixed)...

- A few missing links in MUI chapter of the Macro Manual have
been fixed...


WinEdt 5 [Build 20061121 (v. 5.5)] (beta 3)
===========================================

- Changes to the Default Settings:

    - Preferences| Shell: "Yielding Enabled" if by default off
      (less responsive more robust!)
    - Center Lines for Find
    - Line breaks for soft wrapping are now by default invisible.
    - Delay in Errors to 0
    - \item and \bib out of paragraph breaks (\bibliography in)
    - compile selected (no selection: current document)
    - Language Sensitive Script (disabled in Settings| Language Dialog)
    - fpTeX -> TeX Live (all references and folders have been renamed)
    - New Menu entry for expanding Tabs in Edit -> Format Menu
    - Modified Menu Entry for Erase Working Files (see below)
    - Modified Menu Entry for Search -> Errors
       (new settings in 5.5 are not compatible with 5.4 or less)
    - MUI Menu in Accessories (mostly for future interfaces to TeX
      Accessories - volunteers needed)...
    - Documents Menu now has items to access Backup and Auto-Saved Document
    - Options -> Advanced (default) configurations have been
      improved or made more suitable for an average user
      (especially Environments and Font Schemes). Check them out...
    - Default Highlighting and Special Dictionaries have been
      added and updated for new Macro Functions, MUI Keywords and
      properties and Keywords for (advanced) INI configuration
      files. The following new dictionaries have been added:
             %B\Config\HTML\HTML.dic (HTML;XML)
             %B\Config\Edt\MUI.dic   (EDT)
             %B\Config\Edt\Ini.dic   (INI)


- A bug with "disappearing" caret has been correctly diagnosed
by Robert and I was subsequently able to fix it (hopefully for
good)...

- The Macro Manual is up-to date (MUI Section, updated Tree,
Gather, GUI Page and all other extended or new macros). Also
the Main Help for the new Execution Modes has been added (a few
more sections are missing or need updating in the Main Help).

- The Environments section of the advanced configuration now
works as intended. Not all environment-sensitive settings are
supported in this version but control over formatting should
work as intended. This is perhaps the most powerful new feature
in 5.5...

    This makes Smart Wrapping much smarter when properly
    configured for any particular markup language. Even
    soft-wrapping users may benefit if they choose to use
    hanging indents and possibly opt for non-wrapped verbatim
    environments and some other environment-sensitive functions
    that are currently supported.

    Free Caret interface or inputting of Tab characters from
    keyboard can also be enabled only for selected
    environments. Furthermore, Free Care Interface is now also
    a part of a font scheme and can be overwritten for certain
    modes (eg. managing code or data files).

See at the end of the news on this build for a lengthy
explanation regarding this functionality....

    The environments section in previous beta builds did not
    work as expected and a few users noticed that their
    verbatim environments have been corrupted because of that.
    This is now fixed but just in case be cautious if you
    decide too customize these settings and create a backup of
    you documents...

- Additional EXTENSION and PATH specification in input
directives:

  // Extended Input for bibliography (expands any TeX \PATH specifications!)
  // Use PATH sparingly as it may take a long time to build the tree otherwise...
  DIRECTIVE="\bibliography{?}"
    FILENAME="%[!|Exe('%b\Macros\GetBibFiles.edt');|];%$('_ExTreeInput');"
    SEPARATOR=","       // allows comma separated list of bib files
    EXTENSION=".;.bib"  // possible extensions (.=default [.bib] as appended by the above macro)
    PATH="%P;%p"        // add additional locations for your bib files, eg.:
                        //     "%P;%p;%$('TeX-Local');\bibtex;C:\TeX\bibtex\My Bib Files"

- SetFileMode Macro has an extra parameter to determine whether
or not any submode associated with the line terminators (eg.
UNIX) should be appended to the specified mode or not...
GetMode* macros in Macros folder have been modified to use this
parameter.

- a new variable %&x;

  Stands for chr(x) [x: 0..255 DEC OR HEX $00..$FF ASCII Code of a char]

- New File Variables:
    %A = Auto-Save File (expanded)
    %R = Backup File    (expanded)
    %u = Drive\Path

  Document Menu contains items to open (readonly) Backup or
  Auto-Saved File when they exist. The default settings for
  Backup and Auto-Saving remain:

    %p\%n%t.bak
    %p\%n%t.sav

  Backup and auto-save files should be there when needed but
  one usually doesn't want to see them crowding the source
  folders. Opinions about this may vary; it can be easily
  customized... For example:

      %C\Backups\%u\%n%t.bak
      %C\Backups\%u\%n%t.sav
    or
      %b\Backup\%u\%n%t.bak
      %b\Backup\%u\%n%t.sav
    or
      %p\Backup\%n%t.bak
      %p\Backup\%n%t.sav
    or
      %P\Backup\%n%t.bak
      %P\Backup\%n%t.sav

  will place such files in another folder. They can still be
  accessed through the Document Menu but they will not crowd
  the source folders. The choice is yours. Wizard contains the
  most common options for Backup while Preferences| Backup
  Dialog contains the rest (for fine-tuning)...

- New Variables for direct access to RegEx Tags in macros:

    %#0..%#9

  This can make such macros shorter and easier to read (rather
  than using GetTag function).

- Before the log file is loaded into WinEdt's Error Search
Interface for error processing WinEdt now executes the macro
script:

%b\Exec\_errLog.edt

This macro can initialize two variables:

  _errLogFile
    this string is loaded into the interface if the original
    log file contains too much of unwanted information or is in
    a "weird" format...

  _errLog
    this string is used to determine warnings and errors:

   !E:log_line_num["source file"[:source_line_num[+offset][:select_string]]]
   !W:log_line_num["source file"[:source_line_num[+offset][:select_string]]]

When initialized this variable is used to determine where are
errors and warnings located in the log file and in the
sources...

This way you can unleash the power of RegEx to process errors
and warnings that are not supported in the defaults (eg. almost
c-style but not quite). The default does some processing for
"Fortran" mode; it can be customized to do just about anything
without introducing more Error Types directly in WinEdt. Check
it out (the default macro contains lots of comments and
additional explanations)!

- A "bug" with reporting files with old dates (<1980) not to
exist has been fixed (traced to Delphi's FileExists function).
Windows file date starts on Jan-01-1601. A new macro function:

  SetFileDate(FileName, mode, year, month day, hour, minute, second, msec);

where the mode is a combination of:
   1 - last modified time
  10 - creation time
 100 - last access time

can be used to manipulate file stamps within admissible
range...

- New Macro:
  IfGetNum("String Expression",min,max,"ifOK","ifError");
Can come handy with MUI...

- Printing now works properly with tabs and special
"environments". A few old bugs have been fixed (total page
count with FF) and a few extra options in Advanced Tab. Also
there is a checkbox to select current document's font rather
than using a custom font for printing...

- An extra option in Preferences| Editor Dialog:

    Allow "Arrow Down" past EOF

 (when Free Care Interface is enabled).

 It is ignored in Soft Wrapping Mode...

- Delete Working Files now allows specification of more than
one directory separated by semi-columns. Default is %P;%O in
order to clean-up both source folder and aux folder if the
output has been re-directed via execution modes. The interface
is smart enough not to search the same folder twice if the two
coincide...

The macro EraseWorkingFiles no longer has as the first
parameter a macro script that initializes the items:

  EraseWorkingFiles("Folder List;", "Caption", Subfolders: -1..1, Invisible: 0..1);

A new macro:

  ClearFileItems;

has been implemented and the menu command now looks like:

  Exe("%b\Exec\Erase Working Files.edt");

rather than the old

  EraseWorkingFiles("%B\Exec\Erase Working Files.edt","%P","Erase Output Files",0);

where the default macro script Erase Working Files.edt starts
with an extra line:

    ClearFileItems;

and ends with another one to show the interface:

    EraseWorkingFiles("%P;%O","Erase Output Files",0,0);

This makes this interface more consistent with others that
follow the same logic (Clear, Add, Show)...

If you are upgrading you'll have to take care of this in
WinEdt's Tools Menu to:

  Exe('%b\Exec\Erase Working Files.edt');

- Compile Selected macro now works even if no text is selected
(compiling the whole [sub]document in a temporary file)...

- A few reported bugs and typos have been fixed (as
communicated on the mailing list)...

- Custom Font for Docked Forms (Default or Current + Updating):
works properly with more than one font scheme...

- Found Strings are now centered by default. The option can be
enabled in the Context Popup Menu inside the Find Dialog but
for some reason disabled option was a default...

- Backup, Restore, Default now allow two more items:
    Errors
    Wrapping
If you are upgrading from older versions you should load the
new default Errors (as well as the default Options menu from
the same interface: Options -> Maintenance -> Default)...

Also consider executing the Default Startup Sequence from the
last page of the Execution Modes: without it some options there
will have no effect and may be ignored. There should be no
custom TeX System.edt macro in your Application Data folder
(%b\Exec\MiKTeX). The default global one (%b\Exec\MiKTeX) is
what should be used.

- SetSort macro has an extra (-1..1) parameter to control
whether a sequence of digits is compared as a number or a
string. When Numeric Digits option is enabled A10X is greater
than A2Y...

  SortLines macro still uses "Flags" (for compatibility sake).
     10000 is used for Numeric Digits
    100000 is used to ignore this parameter and use SaveSort,
           SetSort and RestoreSort instead...

- New Macros to efficiently handle (large) string lists with
separators:

 LstEnum("Source","Separator",Trim_Spaces: 0..3,
         Remove_Multiple_Spaces: 0..1,Remove_Multiple_Entries: 0..1);
 LstGetCount(Register: 0..9);
 LstNextItem(Register: 0..9);
 LstGetItem(Reg: 0..9,Index: -2..999999999,);
   -1 returns the source string
   -2 returns the separator
   0..Count-1: enumerated items
 LstGetStr(Reg: 0..9,"Sep",Last,Original_Sep: 0..1);
 LstSort(Direction,Case_sensitive,Ignore_Length,Remove_Multiple: -1..1,
         Table: -7..8,Numeric_Digits: -1..1);
 LstRelease;

- WinEdt now by default preserves tabs in input if they were
already present ("Allow Tabs in Input (read)" option in
Preferences| Tabs Dialog). That's how it should be.

However, Tabs are not always a good thing in some documents
(after all they are characters pretending to be spaces but they
are not spaces). If you want to get rid of them in a particular
document there is now a macro ExpandTabs to expand them into
the required number of spaces. The presence of Tabs is
indicated in the Word Count. The menu Item (without a default
shortcut) "Expand Tabs" has been added to the Edit -> Format
menu.

  ExpandTabs(
    Tab_Length: 0..99,
    Properties: 0..2,
    Scope: 0..2,
    Quiet: 0..1);

- Macro Function SetTabs has been revisited for the new
settings:

  SetTabs(
    Tab_Length: 0..99,
    Properties: 0..3,
    Allow_Input: -1..1,
    Allow_Keyboard: -1..1,
    Optimize_Leading_Spaces: -1..1,
    Optimize_Non-leading_Spaces: -1..1);

Value 0 does not change that property. This affects default Tab
Settings as specified in the Preferences| Tabs Dialog.

    Note that changing Tab properties may require refreshing
    and even reformatting for softly wrapped documents. Thus
    this macro should not be used unless absolutely necessary.
    Set mode-sensitive font schemes with different tab
    properties for different modes, instead...

=====

*** More on ENVIRONMENTS:

It is possible that not everything will work as intended in
this beta release and proper documentation for this feature is
still pending... However, advanced users that feel comfortable
diving into Environments.ini will probably get an idea what and
how can be done.

After giving the whole issue of automatic indentation proper
consideration (having a goal to implement at least neat
formatting of indented itemized environments) the ENVIRONMENTS
section now also has a companion PARAGRAPHS section where
special rules can be set for the strings that indicate
beginnings of formatted paragraphs.

By Default you'll find something like:

[PARAGRAPHS]

PARAGRAPH="\item"
  MODE="TeX"
  ALLOW_SOFT_WRAP=1
  CASE_SENSITIVE=1
  OFFSET=1
  OFFSET_BY=4

PARAGRAPH="\bibitem"
  MODE="TeX"
  ALLOW_SOFT_WRAP=1
  CASE_SENSITIVE=1
  OFFSET=1
  OFFSET_BY=4

PARAGRAPH="	" // Tab (not space!)
  MODE="*"
  ALLOW_SOFT_WRAP=0
  CASE_SENSITIVE=1
  OFFSET=1
  OFFSET_BY=0

PARAGRAPH="<li>"
  // Hanging Indent for this tag
  MODE="HTML"
  ALLOW_SOFT_WRAP=1
  CASE_SENSITIVE=0
  OFFSET=1
  OFFSET_BY=4

OFFSET indicates that the left margin for rest of the paragraph
is offset by a specified number relative to the indentation of
the first line of the paragraph which must start with the
argument for PARAGRAPH item (possibly indented: Tabs are not
treated the same way as spaces). Positive offset means that the
item will hang out while negative item means that it will be
indented.

The string "\item" should be removed from Settings| Paragraph
Breaks for this to work but since itemize environments now
allow formatting of indented lines it is possible (in the new
default wrapping settings and environments) to let WinEdt
format such environments in Smart Wrapping... Try it.

It is quite powerful functionality and it was anything but
trivial to implement. Wait till we hear from more adventurous
users. Of course, there will be requests for more environment
sensitive functionality (eg. Highlighting, Spell-Checking and
more). Eventually it will be implemented but bare in mind it
takes lots of work and testing and the existing feature should
be well tested before any extensions are added (probably for
the next version)...

In Environments.ini you'll find examples (mostly of
non-formatting/ verbatim) special environments for TeX like:

ENVIRONMENT="Preamble"
  MODE="TeX"
  ALLOW_SOFT_WRAP=0 // soft wrapping takes care of formatting?
  SCOPE=1
  PRIOR=9
  STRICT_PRIOR=1
  CASE_SENSITIVE=1
  START="\documentclass"
  STOP="\begin{document}"
  FORMAT=-1

ENVIRONMENT="Verbatim"
  MODE="TeX"
  ALLOW_SOFT_WRAP=0
  SCOPE=1
  PRIOR=9
  STRICT_PRIOR=1
  CASE_SENSITIVE=1
  START="\begin{verbatim}"
  STOP="\end{verbatim}"
  FORMAT=-1

// Allow formatting of indented lines inside this environment

ENVIRONMENT="Itemize"
  MODE="TeX"
  ALLOW_SOFT_WRAP=1
  SCOPE=1
  PRIOR=4
  STRICT_PRIOR=0
  CASE_SENSITIVE=1
  START="\begin{itemize}"
  STOP="\end{itemize}"
  // ---
  FORMAT=0 // default=0 on=1 or off=-1
  FORMAT_INDENTED=1
  MARGIN_OFFSET=-4 // shrink right margin by 4 chars
  OFFSET=0  // defaults from here on
  OFFSET_BY=0
  AUTO_INDENT=0
  LINE_WRAP=0
  FREE_CARET=0
  INPUT_TABS=0

Except for the offset values (-99..99) all other parameters
(from \\ --- on) have values -1..1 (with 0 using the default).

Specifying OFFSET here is probably a redundant feature here but
it makes it possible to enforce indented or "hanging"
paragraphs within certain environments...

LIMITATIONS: Only Scope 0 and 1 are currently supported with 1
meaning global scope and 0 ending with the firs empty line.
Environments currently cannot start or end in the middle of a
line (this would create some problems unless a very fast way of
parsing lines for such switches is implemented). Environments
are local to a document and do not get inherited by any
included files. They are nested according to their priorities
the same way as highlighting switches. Only 255 special
environments are allowed for any document/ Mode (total can be
larger but only 255 or less should be enabled for any
particular mode, submode or else WinEdt will report an error -
there are good reasons for this)...


WinEdt 5 [Build 20060905 (v. 5.5)] (beta 2)
===========================================

- A problem with Restore (Import) old settings functionality
has been detected and fixed. Beta 1 failed to properly load the
information pertaining to Menu Images Height which resulted in
"inflated" menus as described by a few users after their
restores...

- The option to Hide Returns now works properly (before it was
ignored)...

- Dynamic Tabs are now properly displayed (before an extra /
no-glyph character #9 was displayed in the center of the tab
width)...

- A few oddities pertaining to soft wrapping have been fixed.
Most notably the wrong caret position after deleting the first
word in a softly wrapped line... Also a few problems when the
option "Keep all Spaces" is disabled have been fixed.

- Auto Indenting in Soft mode now works properly (before
unindented resulted in lost leading spaces!)...

- Format Paragraph with selected text in a softly wrapped
document now works as expected...

- GetSwitchStack macro now returns switches with Scope<2...

- Compile Selected Text now works properly with redirected AUX
folder for MiKTeX...

- Sorting with removing multiple instances in Gather and Tree
now works properly. Before Gather removed wrong entries and
Tree control simply ignored this sorting preference...

- Gather and Tree control did not properly handle multi-line
items in files that were not opened. Fixed...

- Gather and Tree controls are now smarter and do not collect
data in the same file even if they are "oddly" configured (as
was the case with Beta 1)...

- Input directives now allow specification of a separator when
more than one file is allowed. For example:

  // Extended Input for bibliography (expands any \PATH specifications!)
  DIRECTIVE="\bibliography{??}"
    SEPARATOR=","
    FILENAME="%[|Exe('%b\Macros\GetBibFiles.edt');|];%!0"

will correctly handle a document:

    \def\refs{C:/LocalTexMF/bibtex/bib}

  in the preamble and

    \bibliography{\refs/PJCSTR_strings,\refs/PJCBIB_DISreduced}

(the number of ?s determines how many lines are allowed). The
above is good enough to cover 2 lines:

   \bibliography{\refs/PJCSTR_strings,
                 \refs/PJCBIB_DISreduced}
- The option

  ALLOW_MUTIPLE_SIBLINGS_INCLUSION=0

now works properly in Input Directives...

- A few macro scripts (including Restore [backup] and some
settings in Tree.ini) have problems if Application Data folder
contained an apostrophe (') in its name. Fixed...

- IfFileOlder macro has an extra numeric parameter to be
interpreted as:

  if file1 older than file2 by at least specified extra minutes then...

  furthermore if file2 is omitted (empty string) then its date
  is substituted by the current time:

  if file1 older than specified extra minutes then...

  This can come handy in custom backups and such...

- A slight fix of RegEx ("." is now more greedy -- as before)

- The following RegEx extensions are now implemented but not
documented:

  \&x; Stands for chr(x) [x: 0..255 DEC OR HEX $00..$FF ASCII Code of a char]
       Also Allowed in simple [sets]
       For example: tab character  = \&9;
                    "white spaces" = [ \&9;]
  \"'ANSI String'
     Example:
         \\begin\{equation\*\}\[llr\]
       is the same as
         \"'\begin{equation*}[llr]'
     Any character (not only ') can be used as a string delimiter.
     If used in the string it has to be repeated twice...

  The first one will come handy with documents containing
  dynamically expanded Tabs that look the same as spaces...

  The second one can reduce required escaping when strings
  contain lots of characters reserved in RegEx...

- MDIActivate.edt macro script has been fixed (MDI-Locked /
MDILocked typo)

- The Word Count now displays the number of Spaces and Tabs in
the document (if any)...

- Execution Modes now allows specifying folder assigned to
TeX-Local variable (for private use). There is no
auto-detection for this value since MiKTeX 2.5 no longer puts
any such thing in the registry.

- The options "Auto-detect" in Execution Modes are now
automatically disabled when changes to the associated edit
control are made (to avoid unnecessary misunderstandings with
custom changes being "ignored")...


WinEdt 5 [Build 20060814 (v. 5.5)] (beta 1)
===========================================

- A problem with Access Violation resulting by using GetDate
macro function on some systems with DEP enabled has been
patched (traced to Delphi's RTL/ Language callback function).
If the problem persists or occurs due to some other problematic
code in RTL exclude WinEdt from DEP (there is no real AV; just
DEP [over]reacting to code segments on a sack as used by some
callback functions in Delphi).

On XP this is done through:

  Windows Control Panel -> System -> Advanced: Performance Settings...

  Go to "Data Execution Prevention" and Add WinEdt to Applications
  exempt from DEP.

- *** IMPORTANT: Default settings now use Soft Wrapping for TeX
documents because the default mode filter enables Soft Wrapping
for Modes:

  TeX;HTML;ANSI;Soft|Hard

This is apparently what most new users expect and many consider
WinEdt having serious bugs when it comes to wrapping simply
because they are not aware of or don't care for alternatives to
Soft Wrapping. Those that want to be more selective (old
default behavior) and don't want unconditional Soft Wrapping
should Start Options -> Configuration Wizard, go to the
Wrapping Tab Page and change the filter to:

  HTML;ANSI;Soft|Hard

Then Restart WinEdt and everything will be as before. The above
Wizard also contains other selected options that should allow
you to quickly configure WinEdt to your standards. Defaults
just can't be everyone's choice but it should only take minutes
to reset the main preferences in the Wizard to different
standards...

- WinEdt now supports dynamically expanded Tab Characters
(standard behavior) and variable width fonts such as Lucida
Bright or Times New Roman. Default Font and Tab preferences can
be set from the new redesigned Pages in the Preferences Dialog.
Furthermore, advanced users that want different font or tab
properties depending on a document mode can configure
additional modes by editing and reloading configuration file
(Options Menu -> Advanced -> Font Schemes).

  NOTE: Fonts used in WinEdt's editing Window have nothing to do
  with fonts used in your compiled TeX documents as some users
  mistakenly assumed in the past...

The macro SetTabs (now hardly needed since this behavior is
mode-dependent and can be configured globally) has been
modified to reflect new functionality...

- The Extended Configuration has been extended and split from
WinEdtEx.ini into sub-sections. The Options -> Advanced Menu
has been redesigned to accommodate the new functionality and
makes customizing such settings easier. Gather interface and
WinEdt's GUI control with TeX Symbols are no longer initialized
through the old and convoluted interfaces WinEdt.gdi and
WinEdt.gui but are instead implemented as new sections for
Extended configurations. The following sections are now
available and can be modified and loaded independently if the
defaults are not sufficient:

  Tree
  Gather
  GUI Page
  Font Schemes
  Environments
  Document Tabs

All corresponding *Ex.ini files have been placed in a new
ConfigEx folder and a copy of that folder is maintained in the
application data folder while a global one reflects defaults.
Local one is only created when modifications are made. The
default Startup.edt macro has been modified to load split
components in ConfigEx folder rather than a single one
WinEdtEx.ini which is no longer a part of the defaults.

  NOTE: the changes imply that any custom GUI of GDI additions
  designed for older versions cannot be imported directly. However,
  with minimal editing they can be imported in the new settings
  easily enough... The change is for the better and had to be done
  (better sooner than later)...

The Environments section is work in progress. Currently it can
only exclude certain environments (such as verbatim) from
formatting. More fancy stuff will be implemented soon...

IMPORTANT: It is important that the new default Startup.edt
macros is used in order for this to work. If you are not sure
execute "Default Startup Sequence" in the Last page of Wizard
or Execution Modes. If you have manually modified and created
startup macros you may have to revisit the changes and make
sure that they are compatible with the new default startup
conventions.

- The execution Modes interface has been extended and it now
allows direct specification of Adobe, Ghostscript, GSView,
PATH...

For MiKTeX it also allows manual specification of: TeX Root
etc..., TeX Output Folder, format for Compile Selected (pdf,
dvi or ps) and the method for creating pdf files (PDFTeXify can
use either: PDFLaTeX, dvi->ps or dvi->ps->pdf). Compile
Selected Macro has been rewritten to allow the extension.

  Only MiKTeX Configuration supports these additions since both fpTeX
  and YandY TeX systems are no longer developed and thus WinEdt's
  configurations for them will stay as they are...

With these extensions there should be no need for average user
to ever modify any macro scripts even if auto detection of
certain accessory fails. Just enter it in the interface and you
are fine...

IMPORTANT: It is important that the new default Startup.edt and
TeX Sytem.edt macros are used in order for this to work!

Macros in Exec\MiKTeX folder had to be rewritten to allow the
new functionality. If you want output files produced by TeX in
a separate folder you should specify a permanent location (eg.
C:\TeX\Aux) or a relative location (eg. %P\Aux). If the
specified folder does not exists WinEdt can create it when
required or else a standard location %P is used instead
(depending on the option in the interface). Redirecting the
output can keep the source folders clean (free of .log, .aux,
.bbl, .blg, etc... files). This configuration has to be
extensively tested but it works reasonably well with samples
that come with WinEdt. Try it!

  This options should not be used with BATCH Execution mode because
  the number of switches exceeds the number of admissible parameters
  in bat files.

- The macro ShowExecution Modes now has two extra parameters:

  CS_Mode (use for Compile Selected)
  ShowExtraPages: 0..1

Only MiKTeX Configuration Macros use extra pages to specify TeX
System parameters and preferences...

- New Macro:

  SetExitHandler("Label");

If the script macro is interrupted (eg. due to compilation
errors) this procedure Call("Label"); is executed before
exiting. This makes sure that any settings can be properly
restored (used in Compile Selected macro to restore the main
file and execution modes even if the compilation for some
reason failed). It can come handy for other situations
(procedure specified by the Label must exists and it should be
simple with no chance of errors there)...

- New variables

  %O points to the Output Directory as specified in the Execution
  Modes (by default, or if empty, it is the same as %P -> compatible
  with the old version).

  %E returns the name of the Error Log file which takes the Output
  Directory into consideration.

- New Macros that can be used to determine what switches are
currently active (eg. are you inside a math environment?):

  GetSwitchStack(Reg: 0..9, "Separator", Line,Column);
  GetSwitchIndex(Reg: 0..9, "Switch", Line,Column);
    if the Switch parameter is empty the function returns the depth of
    Stack otherwise the result is 1-based index of the switch on the
    stack.

Line and Column are optional (default=current position).

The names of the switches and their properties are defined in
the Highlighting Dialog...

Example: ... ${x_{i|j}}$ ... (where | is the caret position).

  GetSwitchStack(0,';');Ins('%!0');
      $?$;{?};{?};
  GetSwitchIndex(0);Ins('%!0');
      3 // Stack contains 3 switches
  GetSwitchIndex(0,$?$);Ins('%!0');
      1 // bottom of the stack
  GetSwitchIndex(0,{?});Ins('%!0');
      3 // the last one is indexed
  GetSwitchIndex(0,$$?$$);Ins('%!0');
      0 // not inside this environment

- MDI Activate Event Handling has been improved. The new
default Macro Event handler illustrates the technique to
prevent simultaneous handling of this event when subsequent
activations occur before the macro is finished. This should
also eliminate the error of "Creating a Child Window" related
to this event...

- A rare bug with optimizing leading spaces in indented,
softly-wrapped paragraphs (resulting in producing extra
trailing spaces) has been reported and fixed.

- Context popup menu in the Find Dialog now has an extra option
"Preserve Page". Unless this option is enabled the dialog
always starts with ordinary Find (not Find in Files) even is
the previous search has been Find in Files. I just couldn't get
used to the alternative behavior...

- Branch now allows two extra actions:

  BRANCH_BEFORE_BUILD = "macro"
  BRANCH_AFTER_BUILD  = "macro"

Specified macros are executed before and after the branch is
build. For example, to sort items in descending order specify:

  BRANCH_BEFORE_BUILD = "SaveSort;SetSort(1,1,1,1,1);"
  BRANCH_AFTER_BUILD  = "RestoreSort;"

Branches are sorted according to the current Sorting
preferences that can be manipulated with the above macros...

- Input Directives now allow optional filename specification in
order to process more sophisticated directives. Here is an
example:

  // Extended Input for bibliography (expands any \PATH specifications!)
  DIRECTIVE="\bibliography{?}"
    FILENAME="%[|Exe('%b\Macros\IncludePath.edt');|];%!0.bib"
  // Extended Input for import.sty (example)
  DIRECTIVE="\includefrom{?}{?}"
    FILENAME="%[|Exe('%b\Macros\IncludeFrom.edt');|];%!0"

A new definition for \bibliography{?} can expand TeX
definitions in bib file specification (see the macro). This
directive eliminates the need to use a "dummy" gather directive
for bibliography since the extended version takes care of the
".bib" extension! You can modify the handler or make a custom
one to search for files in any custom folders where you may
keep such file (rather than entering dummy directive with full
path specification)...

- Input directives now work properly even if a long filename
containing spaces is softly wrapped...

- Filenames containing the % characters can now been loaded
(previous version could not handle such files). But such files
should be avoided if at all possible as for example TeX does
not like them and some "escaping" is required to compile such a
file.

- A few extra guards inside the event handlers (avoiding
triggering an event before the handler is finished) have been
introduced.

- Some inconsistencies in the Macro manual have been fixed.
Keywords used in [INPUT_DIRECTIVES] and [NAVIGATION_BAR]
sections of are now explained under the Tree Interface topic in
the Macro Manual (thanks to Robert)...

- WinEdt Macro Interpreter should now execute macro scripts
(especially nested loops) noticeably faster because it uses a
much better algorithm to locate IDs of standard functions. The
old one searched non-sorted list from top to bottom which
became rather inefficient as the number of implemented
functions approached 500. Depending on the complexity of the
macro the new execution should be noticeably faster...

- WinEdt now comes with its own set of macros for MUI. It can
be used to implement custom dialogs and interfaces using
WinEdt's macro capabilities inside the interface.... May not be
completely straightforward to use by macro writers but it can
create very nice and powerful interfaces for end-users.

  TO BE DOCUMENTED!
   (there is one sample in MUI folder - more pending...)

- WinEdt Errors have been extended with extra types so as to
better separate LaTeX Errors and Warnings (some serious errors
like not finding a package or a sty file were previously
treated as Type IV Warnings-- not very good!). Also, a special
categories have been created to separate BibTeX Errors and
Warnings from LaTeX ones. Help has been updated accordingly and
the default settings have been modified.

    This also called for a change in IfLogErrors and FindError macros.
    They have been redesigned to accommodate for a new functionality
    in a more friendly manner. Macro Manual explains how they work.
    Unfortunately, old macro scripts that call these two functions
    will have to be modified since the parameters and their meaning
    have been changed. Defaults in Exec folder have been fixed for
    the better...

    This also affects the old Error menu item in the Search menu. It
    should be modified to: [FindError(1,1,0,4,1);]. This will be
    automatically done if you restore the default Search Menu.

    Changes to these two macros are not compatible with parameters
    in older version. Any macro scripts using these two macros will
    have to modified in order to avoid syntax errors. This was not
    done on purpose but once it was done I decided to leave the new
    syntax...

- Some typos in the main Help have been fixed (more Help
Updates pending for the official release)...

- Minor fixes and enhancements (that escaped being
documented:-)

__________________________________________________________________


WinEdt 5 [Build 20050701 (v. 5.4)] (official release / SP1)
===========================================================

- A problem with propagating registration data on networks or
multi-user installations has been fixed. The process of profile
creation and registration is now more transparent...

- A problem with non-default projects or configuration files
and automatic profile creation has been resolved...

- Macro interpreter now reports errors when it encounters empty
or multiply defined labels. Before it would quit without a
warning or else use the first label definition (potentially
making it hard to debug such macro scripts)...

- A bug with loosing the first character in a softly wrapped
line from Tags when using a Set Regular Expression has been
fixed.

- Replace All is now much (over 60 times) faster...


WinEdt 5 [Build 20050629 (v. 5.4)]  (official release)
======================================================

- A few typos in the Help have been fixed and some examples
were added to the Macro Manual... Macro Manual is now merged
with the Main help.

- Installer now offers an option to create a user profile
(enabled by default)...

- A bug with refreshing the last character with 16-bit (Asian)
characters have been fixed.

- All samples in the Document Menu now refer to the Application
Data folder in order to make the default settings 100%
user-profile friendly...

- A few minor oddities (such as a reported RegEx bug) have been
fixed...

- WinEdt can now correctly handle (Read and Write) UNICODE or
UTF-8 files that start with BOM (Bite Order Mark, eg. as
created by Notepad for such files) as long as these files can
be translated into the default code page (language/system
dependent) and thus treated as ASCII inside WinEdt. The next
version will have more (but not full) UNICODE support...


WinEdt 5 [Build 20050513 (v. 5.4)] (pre-release)
================================================
[Friday the 13th edition:-)

- All known problems with Incremental Search have now been
addressed and the help has been updated accordingly (as
communicated on the mailing list)...

- A bug with the License Monitor has been fixed (previous Build
reported exceeded quota for site licenses even if only one
instance of WinEdt was running)...

- A serious problem with sorting GDIPopup items (it could
result in a series of Access Violation messages) has been
fixed. Beware that the bug in the previous build could cause
serious problems with \cite{} active string response!!!

- MDIActivate event handler now uses PostMessage in an attempt
to solve some SYNC problems in custom event handlers...

- A few minor issues as communicated on the mailing list have
been addressed...


WinEdt 5 [Build 20050509 (v. 5.4)] (pre-release)
================================================

- a few minor and rare refresh oddities have been addressed.

- a (rare and previously present but undetected) problem with
the cursor position after reformatting a paragraph in response
to multiple spaces at the end of the line has been fixed...

- WinEdt is now properly activated when clicked upon even if it
is displaying a modal dialog...

- WinEdt.gdi has been modified to "understand" bibliography
files using brackets @book(...,) (rather than only
@book{...,})...

- An extended functionality for Incremental Search: the dialog
now has an option to be executed as non-modal dialog. Also
pressing F3 closes the dialog and allows subsequent search with
F3 shortcut..

- A bug with RegEx substitutions have been fixed (when using \s
in the replacement RegEx).

- IfOK macro now acts more intelligently when used in RegEx (it
is no longer required to start with SetOK(1); when using macros
in RegEx).

- If you experienced problems "Error Creating MDI Child" when
WinEdt is started with many files opened enable the option
"Yielding Enabled" in the Preferences| Shell Dialog.

- The SendMail macro now has a flag to suppress any error
messages...

- Keyword HTML Help now works properly with multiple chm files
opened simultaneously.

- InsLine(Filter:-1..3); macro has been enhanced...
  Filter:
    -1 Always insert a new line (same as NewLine)
     0 only if the line is not empty or possibly consisting of spaces
       if the option "Trim Spaces (EOLN)" is enabled for this document
     1 only if the caret is not at the end of line
     2 trim spaces at the end of the line (to caret) and then insert a
       new line if the caret is not at the end of line
     3 trim spaces at the end of line (possibly to the left of caret)
       and then insert a new line if the caret is not at the end of line

- Filelist dialog now has a button to remove non-exiting files
from the list. This can come handy to clean-up a long file list
accumulated over time...

- GDI Popup interface now responds to the following shortcuts:
  Ctrl+R - Refresh Data
  Ctrl+S - Toggle Sorted Property (Sort/Unsort)
  Ctrl+T - Track Source file

- %y is properly 1-offset (rather than 0-- a bug in previous
versions).

- The Main Help is now indexed...


WinEdt 5 [Build 20050317 (v. 5.4)] (pre-release)
================================================
[St. Patrick's edition:-)

- all remaining reported problems (since 20050201) have been
thoroughly investigated and hopefully fixed for good: waiting
for confirmation.

- WinEdt's Macro Manual has been (pretty much) finished. A lot
of work went into it. Check it out and report any inaccuracies,
typos or (minor) suggestions for improvements, such as a better
description or example...

- The main Help and Users's guide still need some work and
indexing (it will be done in time for the official release).

- Default settings are now pretty much as planned for the
official release (pending any problems but avoiding any
additions that may cause unexpected conflicts [eg. reserved
shortcuts] at this stage).

- Official release is now within two months and there will be
no new functionality until then (except for any remaining minor
bug fixes).

______________________________________________________________________________

WinEdt 5 [Build 20050201 (v. 5.4)] (working beta build)
=======================================================

- A bug with refreshing line numbers (under certain
circumstances) have been fixed.

- A problem with using Stop; macro outside a Loop has  been
fixed.

- A bug with automatic matching of toggled delimiters has been
fixed: $\{0,1,2,\dots,T\}$

- The new Macro Call can now be used inside loops

- Delete and Backspace in softly indented documents now do what
one would expect

- Roberts LaTeX Doc macro is now a part of the default settings
for MiKTeX and fpTeX: check it out in the Help Menu.

- EDT Mode has been updated with highlighting for recently
added macros.

- More documentation in the new Help and extended and revisited
Demo.tex (a LaTeX Sample in the Documents Menu).

- HTML Help sources for the new WinEdt Help are no longer
included in order to reduce the size of the download by a few
MB. They will be made available separately after the official
release...

- Menu item for GSView has been modified so as to preview the
currently edited eps or ps file (when applicable).

- A few enhancements to the default settings and a few minor
bug fixes as communicated on the Mailing List

- (A rare) Access violation when rapidly closing lots of softly
wrapped maximized documents in a resized Window has been
detected and fixed.

- A problem (access violation) with using a mouse wheel in a
tree control with less than 3 items has been fixed.

- YandY Configuration (as it was) is now again included in the
defaults: all required files...


WinEdt 5 [Build 20050113 (v. 5.4)] (working beta build)
=======================================================

- A problem with WinEdt not starting when its Registry was
corrupted has been fixed. WinEdt now issues a warning message
about it and then continues to load...

- A bug with Run() that has an extra parameter Wait:0..1 has
been fixed: Append was interpreted as Wait and that could
prevent WinEdt from starting if any application launched with
that parameter (eg. GSView) during the previous session was
still running...

- WinExe now automatically releases STD Handles when Input/
Output stream is redirected to a file (no need to call
CloseSTDHandle(3);)...

- A bug with custom scroll wheel response in a tree control has
been fixed (sometimes a message "List index out of bounds (0)"
would popup up...

- YandY TeX Configuration is no longer included in the
defaults. Users that want to use WinEdt with their (properly
installed) YandY TeX will receive YandY.zip archive (31KB) that
can be used to install this no longer supported TeX
configuration...

- Adobe macros have been improved to work with full Acrobat
when more than one document is loaded...

- A minor bug/ typo in the Insert Menu has been reported and
fixed.

- More documentation (all dialogs have now been linked with the
new Help). Obsolete help system WinEdt.hlp is no longer
included...

- The first version of (indexed) Macro Manual is included.


WinEdt 5 [Build 20041222 (v. 5.4)] (working beta build)
=======================================================

- A bug with auto-delimiter checking $$\$$ which caused WinEdt
to freeze when \ was inserted inside $$$$ has been fixed.

- A bug with reformatting a paragraph containing empty lines in
Soft Wrapping Mode has been fixed...

- Rewriting the menu on Win98 should no longer cause WinEdt to
crash.

- Changes to docked forms in Highlighting Dialog are now
instant (no need to restart WinEdt).

- Tree operations have been optimized (GetTreeEx and SetTreeEx
are much faster with long lists).

- Startup macro has been modified to correctly initialize
Previous View command for Adobe Reader 7. However, Adobe 7 has
some internal problems with placing MDI documents in the task
bar creating extra Tabs when more than one document is
opened...

- Closing a project no longer automatically deletes the tree or
erases the file list. It is up to Prj-Close.edt event handler
to do it (if required). The macro DeleteTree has two extra
parameters to help with selective cleanup:

  DeleteTree(UseFlag: 0..1, Flag: $$0000..$$1111);
  //  UseFlag: 0..1
  //    0 delete the tree (as before)
  //    1 use flags to select the tasks
  //      Binary Flags from left to right $$0000..$$1111:
  //        Clear Gather Control
  //        Delete the Tree
  //        Clear File List
  //        Remove persistent Main File

  DeleteTree(1,$$1111); // The same as before...

- Removing the main file no longer deletes the tree. The
default menu command was changed from:

 [CMD('Remove Main File');DeleteTree;]
to:
 [CMD('Remove Main File');]

This makes re-establishing the previous main file easier... Set
Main File still rebuilds the tree (it does not hurt if it gets
updated now and then).

- A few minor fixes...

- More (but not ALL) dialogs are now linked to the new Help...


WinEdt 5 [Build 20041213 (v. 5.4)] (working beta build)
=======================================================

- A few minor corrections and fixes to the default settings and
installer options (as communicated on the Mailing List)...

- There is now only one Configuration Wizard with all actions
and less text.

- Most dialogs are now hooked to a new HTML Help System
(WinEdt.chm). The work on a new help continues (it has to be
indexed, proofread and completed with missing topics). The old
Help is still there but will eventually be completely replaced
by the new one for the official release.

Sources for the New Help are in Doc\Help folder (open
WinEdt.hhc and set it as a main file in order to have WinEdt
build the project tree and navigation bar with over 100 html
topics currently available -- more to come).

Beside the Main Help WinEedt.chm there is also a working
version of what will become an indexed macro manual Macro.chm
(sources are included)...

Enhancements to WinEdtEx.ini and tree building functionality
had to be implemented in order to make WinEdt more suitable for
HTML Help authoring. HHC submode is used for this purpose.
Accessories menu contains an interface to HTML Compiler
(hhc.exe). WinEdt will automatically detect the executable from
the registry if it is properly installed - you can get a free
HTML Help Workshop form MS Downloads site... HTML Preview macro
has been enhanced so that it previews *.chm file while working
on an HTML Help Project. Help keyword macro has also been made
context-sensitive and brings up a different help depending on
the mode of the current document.

After a while I found WinEdt better at managing a growing HTML
Help project that Help Workshop (I decided to use Soft format
for HTML files). Ideas from advanced users for improving HHC
mode are welcome (try it first)...

- An experiential "semi-soft" wrapping mode (as discussed on
the mailing list) has been implemented but remains to be
carefully tested...

- While documentation is a work in progress the Help Menu
remains in transition. It would be nice to compile (index and
organize) the Macro Manual into .chm as well but that would
take quite some work. Any suggestions or volunteers?

- Default settings no longer use the Pause options in Execution
Modes (because a few users were experiencing problems with such
console execution mode)... Better avoid such problems in
defaults. Help in Execution Modes now explains the details.

- A few Dialogs and interfaces have been simplified...

- More MDI Events in Preferences Dialog...

- Default Event Handler Macro Scripts have been moved to
Macros\Events subfolder. By default they also call Local\Event
handler (if it exists). They also restore tags and registers
(to avoid any problems when an event is triggered during search
or another macro execution).

- Similarly the Menus Folder contains many new macros used in
the Menu (in particular  Insert Menu has been reorganized)...

- Indented wrapping in Soft Mode.

- Options -> Configurations menu has been split into three
menus:
      Configurations (MiKTeX, fpTeX, ...)
      Maintenance (Backup, Restore, Default...)
      Advanced (WinEdtEx.ini, Startup and TeX System macros)

- Automatic Delimiter matching now properly handles \left and
\right delimiters in TeX Mode.

- A few refreshing oddities (with background colors) have been
fixed.

- Nested Popup Menus now work as expected. Furthermore, macro
Popup now has an extra parameter for Sync execution:

 Popup("Popup Menu Name","Popup Menu Item",Visible:-1..1,SYNC:0..1);

 SYNC parameter suspends WinEdt until the (invisible) popup command
 is executed... Can be used in macros.

- WinEdt now detects screen resolution (eg. Large Fonts) and it
scales dialogs and forms according to the font size.

- Macro GlobalMark now has an integer parameter Tag:

   If a nonzero Tag is specified then the mark is set only if the
   last mark was not set with the same tag. This can come handy in
   Navigation Bar when inserting labels or citations with double click
   response while having tracking in source file enabled for single click.
   GlobalReturn resets the Tag back to 0 thus this functionality will
   work correctly if you change your mind and return back to the original
   position through Global Return command (in the toolbar of the Tree Form).

- Macro Run() now has an extra parameter Wait:0..1 that can be
used for synchronized execution of a sequence of applications
(depending on each others output)...

- New Macros for clean macro writing (especially in event
handlers). Ring Stack for Tags and Registers  0..15:

   PushTagsandRegisters;
   PopTagsandRegisters(Tags,Registers: -1..1111111111);
   GetTagStack(Register: 0..9);
   SetTagStack(StackPointer: 0..15);

  Pop macro allows selective restoring of tags and registers:
    -1 = none
     0 = all
     0..9 (mask)

  The last two macros are there mostly for debugging purposes
  (to detect bad macros that do not restore the stack)...

- New macro:

  IfScrollLock("Then","Else");

This allows extra qualifier for ALL shortcuts (not just
arrows). For example, those that are accustomed to an old IBM
Keyboard can define double functionality for arrow keys:

 [IfScrollLock(!"ScrollDown(1);",!"CMD('Line Down');");]
 [IfScrollLock(!"ScrollUp(1);",!"CMD('Line Up');");]
 [IfScrollLock(!"ScrollRight(1);",!"CMD('Char Right');");]
 [IfScrollLock(!"ScrollLeft(1);",!"CMD('Char Left');");]

IfScrollLock always returns false unless the option

  Enable "Scroll Lock" Key

in Preferences| Shell Dialog is enabled!

- New Macro:
  IfKeyDown(Key:0..255,toggled,async:0..1,"Then","Else");

This macro can be used in custom keyboard interfaces.

Examples:

  IfKeyDown(145,1,0,"Prompt('Scroll Lock');");
  IfKeyDown(144,1,0,"Prompt('Num Lock');");
  IfKeyDown(20,1,0,"Prompt('CapsLock');");
  IfKeyDown(16,0,0,"Prompt('Shift Down');");
  IfKeyDown(18,0,0,"Prompt('Alt Down');");
  IfKeyDown(1,0,0,"Prompt('Left Mouse Button Down');");

etc...

  Virtual Key codes are described in the Macro Manual...

- Sectioning commands in WinEdtEx.ini now allow (multiple)
specifications like:
  ITEM="\subsection{?}"
    ALT="\subsection[?]"
    ALT="\subsection*{?}"
    ALT="\subsection*[?]"
This should reduce unwanted entries when a wildcard is being
used instead \subsection?{?}...

- BEGINNING_OF_LINE_ONLY filter in TOC now allows values 0..2.

  0 - any position
  1 - allows indented
  2 - must start in the first column

- The same in GATHER control...

- Highlighting Dialog now allows Custom Font and background
color for docked forms (they are imported and exported as a
part of Background Schemes)

- VCL Application Form Fix:

  > - Opening two windows (WinEdt and another application) with
  > Ctrl-Click I often put WinEdt in one half of the screen and Yap in
  > the other. However, the method under Windows to right-click on both
  > programs with Ctrl pressed does not work as the WinEdt window
  > doesn't adjust properly. This happened already in version 5.3.

  This is an old issue with ALL Delphi applications.

  However, after a few weeks of messing up with Delphi's VCL I managed
  to fix it:

  Options -> Preferences | Advanced now (next build) has an option
  "Delphi Application Style". With this option disabled WinEdt reverses
  the creation of its Main Form and Application Handle (which is then
  created as a child of the Main Form). This ensures standard behavior
  of WinEdt in the task bar and eliminates problems with tiling
  applications (well there is more to it but this summarizes
  the issue)... With this option enabled everything is as it
  was...

- Problems with MS Virtual Desktop Manager have been fixed
(WinEdt no longer "insists" on being displayed in task bars for
all 4 virtual monitors). The same reason as above....

- New Macros for macro execution flow:
    Call(Label");
    Return;
    JMP("Label");
    GetCallStack(Reg: 0..9, #0..1);

- New Macro (used to reduce oddities with Insert Environments
  Macros in Soft Mode):
    TrimLine(LetOfCaret: 0..1);

- New Macros (instead of no longer existing TeX and Shell
Wizards):
    ShowLicenseMonitor;
    SearchForFile(#0..9,"filename","Directory List");
      If List is empty Windows PATH Environmental Variable is
      Searched...

- New Macro (consistent with other similar ones):
    ShowToolBar(#0..2);

- Old previously unfinished macro (inverse of GetTreeEx):

    SetTreeEx("String Data");
      Data must be in the same format as returned by GetTreeEx
      (properly indented with line numbers and Item Index
       at the end (?):[?])...


WinEdt 5 [Build 20040513 (v. 5.4)] (beta build)
===============================================

- A few minor corrections and fixes to the default settings and
installer options (as communicated on the Mailing List)...

- Open dialog now allows multiple file selections (as it
should)...

- A problem with DDE Server functionality during synchronized
execution has been fixed. MUI plug-in works with this build (it
did not with the previous one)...

- Rewriting the menu in response to a shortcut no longer
results in an error ("List Index out of bounds (-1)")

- GUI control now contains two extra buttons for \mathds{} and
\mathfrak{} (in the same group as \mathbb{}, \mathbf{},
\mathcal{} and \mathrm{})...

- By default [PDF]TeXify no longer uses Clean Build because a
few users complained that they can no longer open the log file
after TeXify-ing (that is because with clean build option
TeXify deletes log and aux , etc... files after a
compilation)... Those that feel strongly for "clean" TeXify-ing
will have to customize their preferred execution mode (and
create a backup of it for future upgrades -backup and restore
is just a click on the button in the Execution Modes
interface)...


WinEdt 5 [Build 20040504 (v. 5.4)] (beta build)
===============================================

- WinEdt Setup (winedt54.exe) is compiled with INNO Setup
Compiler (see http://www.innosetup.com). WinEdt's INNO setup
files are included in WinShell\INNO Setup folder (advance users
can take a look to see exactly what components are preserved
during the installation)... The file Administrator.txt in
WinShell\Profiles folder explains how to perform a silent
install or uninstall and how to configure concurrent license
monitoring (if necessary)...

- This build has been compiled with Delphi 7 Professional (as
oppose to previous version that used an older compiler Delphi
5). This should make the appearance more XP-themes
compatible...

- Default settings have been slightly modified. In particular,
the local folder is no longer overwritten during upgrades and
users can place customized configuration files or macros
there... WinEdtEx.ini that is actually used by default is now
in %b folder and it can be modified (backup Restore and Default
commands can be used to archive this configuration file - see
below for more additions and changes in WinEdtEx.ini). User.dic
is never overwritten during upgrades and the installer allows
an option to preserve previous settings (WinEdt.ini)...

- Uninstall now completely removes WinEdt, its application
folder and cleans up the registry: use with care unless you
want to completely remove WinEdt and all its subfolders from
you system...

- A known issue with "Range Check Error" (when no project tree
is present) has been addressed...

- Fixes and enhancements in the default settings as
communicated on the Mailing List.

- A few minor bug fixes (especially the ones related to Soft
wrapping oddities)...

- Dialogs are no longer scaled depending on the resolution.
This should eliminate bad appearance of Tab pages under some
circumstances (eg. switching to Asian Locale)...

- Appearance Dialog allows specification of Large Toolbar
Icons. On Systems with resolution 1600x1200 (or more) this may
improve the appearance of the program. Unfortunately, large
bitmaps haven't been re-created manually (time-consuming task!)
and have been simply scaled by factor 2. Should anyone with
time at hand prepare better looking large images (32x32 or even
48x48) to be included in the defaults let me know... Even if
only the most commonly used images are improved it would worth
the effort...

- GUI control can be enlarged through the interface in the
Appearances Dialog. On high-resolution screen non-flat (3-D)
button appearance with 115% enlargement looks better
(especially on XP). You can experiment until you get optimal
result on your system...

- Document Tabs allow closing on double-click option
(Appearance| Tabs).

- Menu Setup| Advanced dialog now allows more control over the
presence of Hot Keys and Persistent Accelerators in visible
Popup Menus...

- Shell configuration Wizard now allows specification of
Startup folder...

- Filetype associations interface also allows specification of
any extra switches (such as -V if you want WinEdt not to load a
project when started by double-clicking an associated file).

- Concurrent License Monitoring (for network installations) has
been implemented and is now documented in

  "...ShellConfig\Profiles\Administartor.txt."

Shell Configuration Wizard allow you to set it up and monitor
the usage (intended mostly for system administrators and
advanced users)...

- Background attributes for current line can now be specified
in the Highlighting| Background Schemes Dialog...


WinEdtEx:
=========

- LoadConfig() macro now has an extra parameter that allows you
to append new items to the existing (default) data:

    LoadConfig("INI File Name",Append:0..1);

This makes it possible to have more than one WinEdtEx.ini file
for mode-specific tasks...

- Items in the Navigation Bar (TOC) in WinEdtEx.ini now allow
and extra option:

    BALANCED="{}\"

This option forces WinEdt to collect balanced wildcards and
thus properly display TOC in case the title contains nested
braces. The third (optional) character in the string ignores
control characters \{ and \} which do not have to balanced if
control character is specified...

This string can also be used to collect data with ANSI Strings
and strings using an ESCAPE convention by setting:

    BALANCED="""""" or BALANCED="''" (depending on ANSI Quote)
and
    BALANCED="\", (depending on the ESCAPE character)

respectively. Defaults have been fixed appropriately...

- Items in WinEdt.gdi also allow an extra Balanced parameter
with the same meaning as TOC...

- Some users also wanted TOC Items to be cleared of labels
etc... This is now possible by specifying a set of RegEx
substitutions that are performed before the item is placed in
the tree. Default for TeX do the following:

    SUBSTITUTION="\label{*}"
      SUB_FIND="\\label\{*\}"
      SUB_REPLACE=""
      SUB_REG_EX=1
      SUB_CASE_SENSITIVE=1
    SUBSTITUTION="  "
      SUB_FIND=" +{ }"
      SUB_REPLACE=" "
      SUB_REG_EX=1
      SUB_CASE_SENSITIVE=1
    SUBSTITUTION="\ldots"
      SUB_FIND="\ldots"
      SUB_REPLACE="..."
      SUB_REG_EX=0
      SUB_CASE_SENSITIVE=1

to remove labels, multiple spaces and change "\ldots" to "...".
There is no limit on the number of substitutions but some
restrain should be exercised if you don't want to affect the
performance too much...

- BuildTree macro now has a parameter TreeEx which determines
if Branches defined in WinEdtEx.ini (such as TOC) are build as
well:

  BuildTree(Rebuild: -1..1);
    -1 - never
     0 - only if tree control is visible
     1 - always

- BRANCH_SORTED=1 now works as intended (before it was
ignored):
    the branch items are sorted depending on preferences in the
    Sort Dialog (Table,Ascending and Case Sensitive)...

- *** IMPORTANT: The following Keywords in [DOCUMENT_TABS] are
no longer recognized in WinEdtEx.ini:

  VISIBLE
  MULTILINE
  SCROLL_OPOSITE
  DISPLAY_FILETYPES
  HOT_TRACKING
  CUSTOM_COLORS
  TEXT_COLOR

They can be set the Appearance Dialog and were ignored anyway.
For the official release it looks like a good idea to clear
WinEdtEx from ignored attributes but users that have customized
this behavior may have to manually delete a few lines from
WinEdtEx.ini before it can be successfully loaded in a new
version.

WinExe and Execution Modes:
===========================

- WinEdt now provide new execution modes interface. It can be
started through the TeX Configuration Wizard or directly from
the (default) Options Menu. The idea is to give users easy
control over extra switches passed to default accessories
(including paper size specification for converters that allow
such command-line switches).

- Macro WinExe has an extra parameter to allow more control
over execution of console applications.

 WinExe("Executable","Command Line","Startup Folder","Caption",
        Flags:00000000..11111111, Priority: -1..1,
        "STD Input","STD Output","STD Error",
        Pause: 0..111);

     Pause (a combination of):
        100 - Pause only if Console is still in the foreground
        010 - Pause if OK    (Exit Code =0)
        001 - Pause if Error (Exit Code<>0)

Specifying this flag is ignored in Detached or Background mode.
The flag imposes the use of STDIO with console CONIN$, CONOUT$
and CONERR$ for STD IO (specified STD files are ignored).

Flag 100 will always cause WinEdt to prevent automatic console
closing if the application launching fails thus allowing you to
read what's wrong (eg. missing executable or dll or invalid
switch or parameter). It is recommended that this flag is ON
even if you are not interested in console output...

This can be used to avoid using problematic BATCH files (spaces
in filenames, etc...) for users that want the console to remain
opened after the process is finished until they press any key.
This may not work on Win9x/ME because implementation has to
take advantage of advanced console creation functions and
handlers (some only available on NT,2000,XP).

     Flags have been extended with two extra options:
       100000000 - Force Focus
       010000000 - Focus Existing Application with the same
                   caption (if it exists)

       This way WinExe is in every respect extension of a simpler
       Run() macro...

- Execution Modes have been redone to allow easy specification
of common switches (eg. Paper Size and Orientation). The new
interface requires more macros. This macros are of no concern
to ordinary users but can be (and are) used to prepare a GUI
that allows such users to make selections pertaining to how
they want their compilation(s) to run [including specification
of extra switches].

  ShowExecutionModes('Caption','Output','Backup','Custom',
        'Default','Direct','Pause','Detached','BATCH');
    Show The interface (after all of the AddApplication macros
    have been processed). The user can now make selections through
    GUI and the result is saved in the specified Output Macro
    File. The result assigns 1 to all enabled variables in a
    specified Output Macro. The macros in Exec folders take these
    variables into consideration when launching an application...

  AddApplication('Name','Executable','Switches','Parameters',
   'Environmental Variable',
    EnablePaperSize: 0..1, EnableLandscape: 0..1,
    EnableFlags: 0..999999999, EnableAttributes: 0..999999999);

  If Environmental Variable is a non-empty string that this
  variable is assigned the name of the executable...

  The Flags have to be specified a combination of binary masks
  $$10101.... Only checkboxes with the flag 1 will be enabled in
  the interface. The meaning is described in the macro manual...

- A new macro to be used for entering switches on spot like
ExternalPrint(); but more compatible with the new Execution
Modes interface:

  EnterSwitches("Application",Use_Previous_Value: -1..1,
    Landscape_Enabled: 0..1, Page_Size_Enabled: 0..1,
    Page_Selection_Enabled: 0..1,"From_Switch","To Switch");

Check for example dvi2ps.edt to see how to use this macro...

- A new macro that allows assignment of global registers
%0...%9 and provides a drop down interface with previous
values:

  EnterString("Prompt","Caption",Register:0..9,
               Sorted:-1..1,
               CustomFont:-1..1,
               AutoComplete:-1..1,
               AutoDropDown:-1..1,
               AutoCloseUp: -1..1,
               Width,Height:0..999,
               RestoreFlag:0..1111);

Default value 0 uses the current setting for size or property.
Defaults can be changed in the Popup Menu in the dialog
interface or in case of size by resizing the dialog...
Win9x/ME/NT may not respond to all Auto* properties in the
drop-down list.

A common use of this function will only specify the first three
parameters...

Restore Flag can be specified to restore previous values for
any combination of the following:

  0001 - Sorted
  0010 - Custom Font
  0100 - Auto Drop Down List Properties
  1000 - Size

Note: Global registers %0,%1 and %2 are being used in the
default settings and should not be used in custom macros to
avoid conflicts with the default configurations...

- The function LoadToolBar (used in configuration components
that
  require custom toolbar) has been extended:

  LoadToolBar("Filename", LayoutOnly: 0..1);

With LayoutOnly flag set to 1 nonessential toolbar attributes
(such as the size and 3-D/ flat appearance of buttons) are
ignored...

- Regular Expression extensions:
  ==============================

  \"'ANSI String'

      This can be used to avoid extensive "escaping". Eg.

      <\"'\label{...}'

      instead of a longer and more error prone equivalent

      <\\label\{\.\.\.\}

      (any character can be used for string delimiter and it has to be
      repeated twice if it is to appear in the string).

  \S{Find}{Substitute}{RegEx}
     can be used in powerful Replace RegEx
  \s{Find}{Substitute}{RegEx}
     the same except that ordinary (non-RegEx) substitution is performed
     it is faster when RegEx is not required while replacing

       Search for: "<\(Journal+{-+[a-z]}\)"
       Replace with: "\s{-}{ }{\0}"

    Is a good example for this one (Tags would not be useful in
    Replacing because we don't know how many words are in a phrase).

  Powerful Extension:
  ===================

  \X{Macro to be executed}
     IfOK status determines if match is OK
  Can be used to collect all labels that are never referred to, etc...
  Specify Macro inside as an ANSI String (unless you want to use hot Tags!)

  \x{Macro to be executed}
     The same except that not IfOK is used

  \Xx{Macro to be executed}
  \xX{Macro to be executed}
     The same but it does not affect matching directly

    If %!1 contains all \ref items then the following finds labels
    that are not being referred to:

    \\label{\{\(*\)\}}\x{\"|GetTag(0,2);FindInString("%!1","%!2");|}

    and this gives only the ones that are being used:

    \\label{\{\(*\)\}}\X{\"|GetTag(0,2);FindInString("%!1","%!2");|}

    Note it is important to use: {\{\(*\)\}} because \{\(*\)\} will
    not work here! One can use SetOK explicitly...

    In this case a simple form:

    \\label{\{\(*\)\}}\X{FindInString("%!1","\0");}

    works as well but it is safer to enclose macro in "quotes" to
    avoid any problems with characters that have a special meaning
    in RegEx...

- New Macros (for clean macro script writing):

    SaveRegisters(Flag: 0..1111111111);
    RestoreRegisters(Flag: 0..1111111111);
    ClearRegisters(Flag: 0..1111111111);
    ClearSavedRegisters(Flag: 0..1111111111);

Flag stands for Registers 0..9 (from left to right). Only
registers with flag 1 are affected...

- New Macro to make WinEdt more responsive in macros that take
a long time to finish. Use with care as it may cause sync
problems if used at the wrong spot:

    ProcessMessages;

- Bookmark and Line numbers panels have been given a 3-d
appearance and the background schemes now allow specification
of background color and font attributes for current line, thus
making current position more visible. Defaults do not use this
option but it is easy to activate it in the Highlighting
Dialog...

- Find and Replace Dialogs now have Auto Scope option enabled
and Replace All in Selected text restores the selection to its
previous state after replacing is finished. Selection can also
be restored manually by the new RestoreSelection macro in the
tools menu (F10)...

- New Macros (by default in Tools Menu):

   MarkSelection(CurrentMark: 0..9, SelectedMark:0..9);
   RestoreSelection(CurrentMark: 0..9, SelectedMark:0..9);

- New macro to make Replacing in Strings easier (rather than a
loop with FindInString and ReplaceInString):

 SubstituteInString("String","Find_Str","Replace_Str", Flags:0, Result:0..9);

   Replace all instances of Find_Str in String with Replace_Str
   and store the result in the %!<Result> register
   Flags (same as ReplaceInString)::
           0 - default
           1 - Regular Expression
          10 - Case Sensitive
         100 - Respect Capitalization (ignored with Case Sensitive!)
        1000 - use UNIX EOLN format (LF instead of CR+LF)

- Advanced feature (for users that are preparing configuration
components that require menu additions):

In Extracted Menu Files (eg. Main Menu.dat) as used for
importing additional configurations it is now possible to
specify shortcuts directly rather than using Windows Shortcut
Code. This can be slow if many shortcuts would be frequently
loaded like this but it can come handy if you want to specify a
few shortcuts directly in Menu.dat file (rather than relying on
WinEdt's Import/ Export functionality to update the shortcut).

Example:

MENU:&Accessories
  Flags:0
  Hint:
  Macro:387
    Item:&TeX
    Hint: TeX
    File:"%!M=TeX"
    Path:%P
    Definition:Exe('%B\Exec\MiKTeX\TeX.edt');
    Shortcut:24660 [Shift+Ctrl+T]
    Tool Bar:61
    Image:206

You can now specify a different shortcut directly as follows:

    Shortcut:[Shift+Ctrl+Alt+T]

If "Shortcut:" is followed by a number than this (much faster)
specification is used and the string is ignored when the item
is loaded; otherwise WinEdt parses the string and computes the
actual shortcut code...

Note menu is language dependent and the actual shortcut as
displayed in the menu may be different (eg. ALT can be
displayed as GRAVE in non-English locales). In Menu.dat files
you must always use Shift/Ctrl/Alt quantifiers (they will be
properly displayed in the menu once WinEdt calculates the code-
the specified string is not used in the actual menu).


WinEdt 5 [Build 20031209 (v. 5.4)] (beta build)
===============================================

- A few bug fixes and minor changes to the default settings as
communicated on the Mailing List...

- Exec macros have been extended and modified to cover Acrobat
6 (problem with locked files).

- GUI control has been modified so that it now "adjust" to
different backgrounds...

- New option "Show Line Numbers for Modes" in the Appearance|
Bookmarks dialog. This determines the visibility of the line
number panel when a document is initially opened. By default
Ctrl+= toggles visibility of line numbers and the property is
preserved on per-document basis in the project file...

- Changes to the Switches Dialog (an extra option that allows
to control whether the Start and End Trigger are highlighted
the same as the switch). Here is the new meaning of the
options:

  - The Start Option now indicates that the switch becomes effective
  immediately.

  - The End option has the same meaning as before: if checked the end
  trigger is stepped over (essential for toggled and nested
  environments). However, the switch attributes are applied to the
  end trigger only if the Option in front of the Scope is checked.

  - The Switches dialog now has a new option BOLN which indicates that
  the switch only applies in the beginning of line (useful for
  things like Fortran comments). Previously the option in front of
  the Start trigger had this meaning (far from intuitive).

Old Highlighting settings will be correctly imported (without
any intervention on users side).

- Switch can also have an attribute "Indented". When this
option is checked the switch does not apply to the leading
spaces inside environments...

- More "Require *" properties in the Menu Setup Dialog
   - Requires Clipboard text (eg. Paste from Clipboard)
   - Requires Main File      (eg. Remove Main File)
   - Requires a Modified Doc (eg. Save All)

- Event Handlers for BuildTree (see Project Manager Dialog).
  Before means before the navigation Bar is build but after the
  File inclusion part has been build. After is executed after
  WinEdt is done with building the tree and navigation bar.

- New Macro:

  GetFileTimeStamp("Filename",Register:0..9);

  Returns @+16 HEX digit representing 64-bit
  file time stamp identifier.
    It can be compared with IfStr(...);
    (not IfNum which uses smaller 32-bit integers).

- %X Full name of the currently executed macro file
  %C Path of the currently executed macro file

- Document Tabs can now be rearranged by "drag-and-drop" and
the context popup menu has extended sorting capabilities to
reorder document tabs...

- New Macro:

  SortDocumentTabs(Flags:-1..1111,Descending:0..1);

  Flags:
    -1 - MDI Order
     0 - Full path and filename
  The following can be combined (from left to right):
    0001 - Path
    0010 - Name
    0100 - Type
    1000 - Mode
  Thus 0 is an equivalent (short way) of specifying 0111.

- Filelist interface (Complete File List) now allow extra
sorting commands and list manipulation (removing files, hiding
the PATH) through a newly added toolbar...

- Extended Macros:
    ScrollUp(Lines,MakeCaretVisible:0..1);
    ScrollDown(Lines,MakeCaretVisible:0..1);

- New Macro:

    GetTreeEx(Reg: 0..9,"Branch Name");
 If Branch Name is empty then the whole contents of the Navigation
 Bar is copied as a string into the specified register. Defaults
 for now only have "TOC" for TeX and HTML mode, respectively...
 Each Item in the branch consists of 3 lines (except for the
 branch itself which starts in the first column and consists only
 of a branch name). A Branch must be defined in WinEdtEx.ini!

    SetTreeEx("String Data");
      Data must be in the same format as returned by GetTreeEx
      (properly indented with line numbers and Item Index
       at the end (?):[?])...

      Example 1:

       <TOC:[0]
        >C:\Alex\WinEdt\Samples\Thesis\Abs.tex(2):[9]
          *\prefacesection{Abstract}
          :Abstract
        >C:\Alex\WinEdt\Samples\Thesis\T1.tex(4):[1]
          *\chapter{The Space of Lomonosov Functions}
          :The Space of Lomonosov Functions
         >C:\Alex\WinEdt\Samples\Thesis\T1.tex(17):[2]
           *\section{Introduction}
           :Introduction
         >C:\Alex\WinEdt\Samples\Thesis\T1.tex(51):[2]
           *\section{Reflexive Topological Spaces and Continuous Indicator Functions}
           :Reflexive Topological Spaces and Continuous Indicator Functions

      Example 2:

       <TOC:[0]-
         trailing - Removes TOC from Navigation Bar: [?]-


WinEdt 5 [Build 20030429 (v. 5.4)] (private build)
==================================================

- Gather Interface and the Tree (Navigation Bar) did not
properly enumerate lines numbers in softly wrapped documents.
This has now been fixed...

- A crash with Building a tree (TOC) in deeply nested HTML
files have been fixed.

- A bug with losing the "Persistent Main File" and "Relative
File List" in the Project manager dialog when rebuilding the
tree has been fixed.

- A Bug with right-clicking on a misspelled word has been fixed
(WinEdt now provides a context sensitive response: spell check
dialog with a list of spelling suggestions).

- A series of problems with non RegEx not inline search have
been fixed (especially in Soft documents). This is a search for
strings containing spaces that can span over two lines...

- Incompatibilities with Highlighting (background color for
switches) have been addressed. The defaults have been modified
to display math environments with a different background.

- Misspelled option BEGINING_OF_LINE_ONLY has been corrected to
BEGINNING_OF_LINE_ONLY. If you want to keep your custom
WinEdtEx.ini then you'll have to perform a Replace of the above
string before new WinEdt will successfully load it... The one
that comes with WinEdt has been fixed.

- In the Navigation Bar (WinEdtEx.ini) there are now additional
custom responses for:

    ON_CTRL_CLICK
    ON_CTRL_DBL_CLICK
    ON_SHIFT_CLICK
    ON_SHIFT_DBL_CLICK
    ON_ALT_CLICK
    ON_ALT_DBL_CLICK

beside the:

    ON_CLICK
    ON_DBL_CLICK

- In the Navigation Bar (WinEdtEx.ini) items now have an extra
property:

    RETURN_AT_EOF=0..1   (0=no 1=yes)

  This is intended for better tree appearance in case you want the
  include directives to be in the same branch as TOC (not
  default). It all depends on how you use input directives in
  combination with sectioning commands...

- In the Navigation Bar (WinEdtEx.ini) items now have an extra
property:

    BRANCH_EXPANDED=0..2 (0-no, 1-yes on level 1, 2=fully expanded)

By default TOC Branch is expanded on level 1...

- WinEdt now remembers the selected item in the TOC Branch and
makes sure that it is visible and selected after the tree is
rebuild (assuming that the document has not been rearranged
beyond the recognition).

- A New (advanced but useful with RCS) property of Document Tab
Icons:

    RESET_TAG=New_Tag_Value
      Can be used to "remember" that the document was in certain
      state (eg. Modified) When the document reaches a state
      (Selector) with non-zero RESET_FLAG Documents's tag is reset
      to this value (no other action is taken)...

- A bug fix with the macros (they did not work in previous
Build):

   CLToIndex(1,2,3,"String");
   IndexToCL(1,2,3,"String");

- Find in Files did not find the appropriate line if the string
was found in the last line of softly wrapped document. Fixed.

- New Macros to allow taking advantage of Find in Files
functionality behind the scenes:

  FindNext(Direction: -4..4; Track: -1..1; TrackListView: 0..1);

  Direction:
       0 Stay where you are
    +/-1 Next/Previous instance
    +/-2 Next/Previous line
    +/-3 Next/Previous file
    +/-4 the last/first item
  Track:
    -1..1: Off, Default, On
  TrackListView:
    0..1: Off, On
     If List is Visible tracking the selected item in the list
     makes macros slow dues to unnecessary refreshing and
     scrolling in the list...

  GetFindItem(Reg: 0..9; Object: 0..6);

  Object:
    0 Current Item Actual Found String:
              After this call with tagged RegEx one can use FindInString
              and after that GetTag macros to process parameters...
    1 Current Item (as displayed in the list)
    2 Current Item File
    3 Current Item Line/ Paragraph (Soft) Index
    4 Current Item Column/ Paragraph Offset (Soft) Index
    5 Current Item Index
    6 Total Number of Items

IfOK responding properly to allow iteration.

Note that in combination with:

    FindInFiles;
    ShowCollectForm(No_Toggle_Yes: -1..1);
    SetFindFilesOnly(No_Toggle_Yes: -1..1);
    SetFindinFilesSelected(No_Toggle_Yes: -1..1);
    SetFindinFilesCurrent(No_Toggle_Yes: -1..1);
    SetFindinFilesOpened(No_Toggle_Yes: -1..1);
    SetFindinFilesProject(No_Toggle_Yes: -1..1);
    SetFindinFilesFolders(No_Toggle_Yes: -1..1);
    SetFindinFilesSubfolders(No_Toggle_Yes: -1..1);
    SetFindinFilesModeFilter("Mode1;Mode2");
    SetFindinFilesTypeFilter(".type1;.type2"));
    SetFindRoot("PATH");

This allows you to collect and process data without ever having
to see the actual interface (FindInFiles does not show it) and
without any focus shifting...

  Example:
  ========

  One can write a macro that collects all graphics directives and
  process them one by one (eg. by converting eps files to pdf or
  png for pdf processing).

  I didn't get around to test it but a sample below works:

    // Sample code to enumerate found items
      SaveFind;
      SetFindinFilesProject(1);
      SetRegEx(1);
      SetFindStr("\\include\{*\}");
      SearchReset;
      FindInFiles;
      RestoreFind;

      FindNext(-4,-1);
      Loop(!|>
        GetFindItem(0,0);>
        IfOK(!'>
          FindInString("%!0", "\\include\{\(*\)\}", 0,1, 11);>
          IfOK(!*>
            GetTag(0,1);>
            GetFullPath(1,"%!1.tex","%P");>
            Prompt("%!1"); //Do something more useful like running gswin32c.exe here<>
          *,>
          *Relax;*);>
        ',>
        'Stop;');>
        FindNext(1,-1);|);

    End;

    // Sample code to copy found items into clipboard
      StartWorking('Copying...');
      LetReg(1,'');
      FindNext(-4,-1,0);
      Loop(!|>
        GetFindItem(0,0);>
        IfOK(!'>
          LetReg(1,"%!1%\%!0");>
        ',>
        'Stop;');>
        FindNext(1,-1,0);|);

      CopyToClipboard("%!1");
      FindNext(-4,-1,1);
      LetReg(1,'');
      LetReg(0,'');
      StopWorking;

    End;

- Options to use filters in the Find in Files Dialog interface
have been removed. They were deemed redundant since leaving the
filter empty does the job and it is easy to forget to check or
uncheck the options.

  Consequently the following Macro functions no longer exist:

    SetFindUseModeFilter(No_Toggle_Yes: -1..1);
    SetFindUseTypeFilter(No_Toggle_Yes: -1..1);

- Extension to GDIPopup Macro:

 GDIPopup("Page","Caption",Refresh,Sort,Track_onClick,
           Track_onDblClick,OK_onDblClick: 0..1,
           "Selected Item","Filter",Remove_Filter: 0..1);
   This function is used in Active String Response to \ref{} and
   \cite{}. It allows a keyboard interface to find and insert a label.
   If you specify an Item than this Item is initially selected...

   If you specify a non-empty filter string then only items starting
   with this string are displayed. These string can (optionally)
   be removed from the displayed items (since it is irrelevant).


WinEdt 5 [Build 20030401 (v. 5.4)] (private build)
==================================================

- Minor Bug Fixes and numerous small enhancements...

- Find in Files functionality to collect strings (or WinEdt's
  RegEx) in  files or current project tree. "Find In Files"
  interface is located in the second Tab Page in the Find dialog
  (Ctrl+F)...

  In the Appearance| Docking Dialog you can dock the Collect Form
  in which the found items are displayed. By default it is not
  docked but you may want to have it docked at the bottom of the
  screen (similar to Gather Form).

  A Bunch of macros to provide additional interface to this
  functionality:
    FindInFiles;
    ShowCollectForm(No_Toggle_Yes: -1..1);
    SetFindFilesOnly(No_Toggle_Yes: -1..1);
    SetFindinFilesCurrent(No_Toggle_Yes: -1..1);
    SetFindinFilesOpened(No_Toggle_Yes: -1..1);
    SetFindinFilesProject(No_Toggle_Yes: -1..1);
    SetFindinFilesFolders(No_Toggle_Yes: -1..1);
    SetFindinFilesSubfolders(No_Toggle_Yes: -1..1);
    SetFindinFilesModeFilter("Mode1;Mode2");
    SetFindinFilesTypeFilter(".type1;.type2"));
    SetFindRoot("PATH");


- WinEdt 5.4 now looks better on Windows XP (some controls have
been upgraded to have an XP look). However, if you want the
Document Tabs to look XP-ish you must disable the option
"Custom Colors" in the Appearance| Document Tabs Dialogs. There
is now a different way to indicate the document status by using
Icons (see below about extensions in WinEdtEx.ini). This
limitation is due to a conflict between the Tab Appearance and
custom painting of their contents (somewhere deep in Windows
API or Delphi but I was not able to find a way around). If you
prefer the current Tab appearance then comment out the section
[DOCUMENT_TABS] in WinEdtEx.ini (see information below)...

- WinEdtEx.ini provides an interface to extended functionality.
Unlike WinEdt.ini this file can/ must be edited and this is the
only way to change certain settings that rely on this file.
Currently the following sections are implemented:

  [DOCUMENT_TABS]
  [NAVIGATION_BAR]
  [INPUT_DIRECTIVES]

The file can be edited (based on the templates provided in the
default settings). You don't have to use all or any of the new
features provided in this interface but you may have to modify
the above file. Use common sense and care when making
modifications since the file can be corrupted and you'll use
your custom settings until you fix the syntax errors introduced
by careless editing. Create a backup to avoid disasters!


- New Macro function to load or re-load WinEdtEx format file:

    LoadConfig("INI File Name");

Startup macro should start with something like:

  Requires(20030330);

  IfFileExists('%b\Local\WinEdtEx.ini',>
    !"LoadConfig('%b\Local\WinEdtEx.ini');",>
    !"IfFileExists('%B\Local\WinEdtEx.ini',>
      !""LoadConfig('%B\Local\WinEdtEx.ini');"");");

after you place the WinEdtEx.ini in your Local WinEdt folder
(if you created a user profile that's in your application data
folder or else in WinEdt's Root folder).

- Improved Navigation capabilities (combining the Gather and
  Tree functionality inside the Tree Control). By default the tree
  shows document structure and included graphics. This can be
  customized in WinEdtEx.ini:

[NAVIGATION_BAR]

BRANCH="TOC"
  BRANCH_MODE="TeX"
  BRANCH_ICON="TOC"
  BRANCH_SORTED=0
  BRANCH_CASE_SENSITIVE=1
  BRANCH_IGNORE_COMMENTS=1

  ITEM="\chapter?{?}"
    MODE="TeX"
    CASE_SENSITIVE=1
    BEGINING_OF_LINE_ONLY=1
    CURRENT_DOCUMENT_ONLY=0
    ALL_OPENED_DOCUMENTS=0
    COMPLETE_PROJECT_TREE=1
    ICON="Chapter"
    LEVEL=8
    CAPTION="%?"
    MAX_LINE_SPAN=3
    ON_CLICK="TreeTrack(2);"
    ON_DBL_CLICK="Relax;"
    ACTION="Find"
      MENU_ICON="Find"
      MACRO="TreeTrack(2);"

  etc..

Note that the LEVEL attribute determines how the items are
nested (it is a good idea to leave some breathing space if you
later decide to insert more items, eg. Parts contains
Chapters)...

  New Macros used in these files:

    Used in responses for currently selected item:

      TreeTrack(SelMode: 0..9, filter=0..2);
         filter - 0 None
                  1 Only if Open on Click is enabled
                  2 Only if Open on Double-Click is enabled
      TreeGetFileName(Reg: 0..9);
      TreeGetLineNumber(Reg: 0..9);

- How the graphics is collected in the Navigation Bar and
displayed:

  ITEM="\includegraphics?{?}"
    MODE="TeX"
    CASE_SENSITIVE=1
    BEGINING_OF_LINE_ONLY=0
    CURRENT_DOCUMENT_ONLY=0
    ALL_OPENED_DOCUMENTS=0
    COMPLETE_PROJECT_TREE=1
    ICON="Image"
    LEVEL=0
    CAPTION="Image: %?"
    ON_CLICK="TreeTrack(2);"
    ON_DBL_CLICK="Exe('%b\Macros\GraphicsPreview.edt');"
    // %? is filename possibly without extension
    ACTION="Find"
      MENU_ICON="Find"
      MACRO="TreeTrack(2);"
    ACTION="Preview"
      MENU_ICON="View"
      MACRO="Exe('%b\Macros\GraphicsPreview.edt');"

You must place GraphicsPreview.edt macro in your Local or
WinEdt Global Macros folder.

The macro searches for common graphics extension (you can
change the order) and uses ShellExecute command to display the
graphics. This, too, can be changed if you have a different
favorite previewer or if your graphics files are not associated
with any application. How this works depends on how is your
system configured since WinEdt at the moment does not provide a
custom previewer:

The following macro function was implemented to make the macro
shorter (since the Graphics files are usually located
relatively to the main file):

    GetFullPath(Reg: 0..9,"FileName","Root PATH");

If you want to make changes you must customize the macro
GraphicsPreview.edt...

- Input Directives can be specified to suppress and extend of
the functionality in the Preferences| Input Dialog. Directives
now have more attributes regarding recursion and can be
specified in mode-dependent groups.

[INPUT_DIRECTIVES]

INPUT="TeX"
  MODE="TeX"
  MAX_TREE_DEPTH=9
  OPEN_ON_DBL_CLICK=1
  BEGINING_OF_LINE_ONLY=1
  CASE_SENSITIVE=1
  FILE_MUST_EXIST=0
  ALLOW_RECURSIVE_INCLUSION=0
  ALLOW_MUTIPLE_SIBLINGS_INCLUSION=1
  ALLOW_MULTIPLE_INCLUSION=1
  INCLUDE_TYPE_FILTER="tex;ltx;texi;dtx;ins;bib"
  RECURSE_TYPE_FILTER="tex;ltx;texi;dtx;ins;bib;bbl"
  DIRECTIVE="\include{""?""}"
  DIRECTIVE="\input{""?""}"
  DIRECTIVE="\input ""?"""
  DIRECTIVE="\include{?}"
  DIRECTIVE="\input{?}"
  DIRECTIVE="\input ?"
  DIRECTIVE="%GATHER{?}"
  DIRECTIVE="\Input{?}"
  DIRECTIVE="\INPUT{?}"

INPUT="HTML"
  MODE="HTML;XML;PHP"
  MAX_TREE_DEPTH=9
  OPEN_ON_DBL_CLICK=1
  BEGINING_OF_LINE_ONLY=0
  CASE_SENSITIVE=0
  FILE_MUST_EXIST=1
  ALLOW_RECURSIVE_INCLUSION=0
  ALLOW_MUTIPLE_SIBLINGS_INCLUSION=0
  ALLOW_MULTIPLE_INCLUSION=0
  INCLUDE_TYPE_FILTER="html;htm;xml;php;txt"
  RECURSE_TYPE_FILTER="html;htm;xml;php"
  DIRECTIVE="<a href=""?"""
  DIRECTIVE="<frame src=""?"""


- Document can be tagged with special attributes (eg. their
status
  in RCS). A document icon displayed in the Tab Control (next to
  the document name) can be configured so as to depend on the Tag.

    SetDocTabIconTag(Tag: #0..999999999,"Document Name");
    GetDocTabIconTag(Reg: 0..9,"Document Name");

  WinEdt does not care about the meaning of the Tag. Document
  Icons in the Tab controls can indicate if the file is locked,
  readonly, modified (many combinations and the default use only a
  few). This can be tuned in WinEdtEx.ini...

- A new option in the Dictionary Manager:

    Check Only words containing 7-bit ASCII characters

  in Spell Checking Options Tab Page.

  This option is intended to make English/ Asian (or any foreign)
  mixed editing easier because it allows you to spell check the
  English (7-bit ASCII) portion of the text without highlighting
  foreign (8-bit extensions) words as misspelled (if there is no
  dictionary available for this language). For example, Asian
  (CJK) users will benefit from this as will Hebrew and Arab
  and possibly other multi-lingual users...

- Exe("Macro") function is now more flexible. If you specify %b
in
  a filename or folder and the file does not exist then the
  function tries %B instead. This should make it easier to write
  User Profile friendly macros (use %b and WinEdt will execute the
  default in its root folder if the user did not overwrite it).

  This also solves problems with multiple-instance configurations...

- Fixes and enhancements to the Gather and Tree (Navigation
Bar) Interface...

- New Macro:

  GetCheckListItem(Index: 0..999, Reg: 0..9);

    Get a string associated with a specified item in the CheckBox
    interface.

- A bug with choosing the appearance of Bookmarks on XP has
been fixed.

- An elusive BUG with Backspace and Delete commands sometimes
not working if executed *immediately* after moving a caret to a
new position with a mouse has been fixed...

- ADVANCED: UNICODE Copy and Paste and Read/Write:

In Preferences| Advanced dialog you can specify the preferred
format (CODE PAGE) that should be used for advanced (UNICODE)
clipboard operations.

This data can also be specified with the following macros:

  SetClipboardPasteFormat("CP List");
  SetClipboardCopyFormat("CP");
  SetUnicodeCP("CP"); // affects Read and write of UNICODE files
  GetLastPasteCP(Reg: 0..9); // Last CP used for UNICODE Paste

Code Page can be specified for Clipboard and Read/Write UNICODE
conversion. The following Constants have a special meaning:

  _ACP     Windows ANSI Code Page   (CP_ACP)
  _OEMPCP  OEM (DOS) Code Page      (CP_OEMCP)
  _MACCP   MAC Code Page            (CP_MACCP)
  ACP      Current ANSI Code Page   (GETACP)
  OEMCP    Current OEM Code Page    (GETOEMCP)

If a non-empty string is specified then WinEdt requests
clipboard data in Unicode format (if available) and then
performs a conversion to specified code pages from left to
right until it encounters CP that allows the conversion without
loss of data. For example, Paste can use the following CP list:

  SetClipboardPasteFormat("ACP,OEMCP,1251");

    // First try the current code page, dos code page and finally
    // Cyrillic code page (see below for the list of CP codes)

Whether or not any such conversion is required depend on your
version of Windows and the way other applications use Windows
Clipboard. Of course in order for WinEdt to properly display
the text you have to use proper charset (font script). Check
the help on SetFontCharset(Value: 0..9999); macro function to
see how to change the font (some common scripts are available
in the Options| Font Menu). Unless you encounter problems with
plain text copy and paste operations you should avoid using
UNICODE since it doubles the data size and slows down the
operation due to conversions. However, on some systems (XP) you
may have to use UNICODE format if you want to exchange data
containing more than 7-bit characters between different
applications.

For example (if required) one could have more than one Copy and
Paste commands. The following macros are examples:

  Copy as OEM
  SetClipboardCopyFormat("OEMCP");
  CMD("Copy");

  Paste as Greek
  SetClipboardPasteFormat("1253,ACP"); //just in case if text is NOT Greek
  CMD("Paste");

Not all of the CPs are available on all systems.

  65000 CP_UTF7  UTF-7 translation
  65001 CP_UTF8  UTF-8 translation

Following are the ANSI code-page identifiers:

    874 Thai
    932 Japan
    936 Chinese (PRC, Singapore)
    949 Korean
    950 Chinese (Taiwan, Hong Kong)
    1200    Unicode (BMP of ISO 10646)
    1250    Windows 3.1 Eastern European
    1251    Windows 3.1 Cyrillic
    1252    Windows 3.1 Latin 1 (US, Western Europe)
    1253    Windows 3.1 Greek
    1254    Windows 3.1 Turkish
    1255    Hebrew
    1256    Arabic
    1257    Baltic

Following are the OEM code-page identifiers:

    437 MS-DOS United States
    708 Arabic (ASMO 708)
    709 Arabic (ASMO 449+, BCON V4)
    710 Arabic (Transparent Arabic)
    720 Arabic (Transparent ASMO)
    737 Greek (formerly 437G)
    775 Baltic
    850 MS-DOS Multilingual (Latin I)
    852 MS-DOS Slavic (Latin II)
    855 IBM Cyrillic (primarily Russian)
    857 IBM Turkish
    860 MS-DOS Portuguese
    861 MS-DOS Icelandic
    862 Hebrew
    863 MS-DOS Canadian-French
    864 Arabic
    865 MS-DOS Nordic
    866 MS-DOS Russian (former USSR)
    869 IBM Modern Greek
    874 Thai
    932 Japan
    936 Chinese (PRC, Singapore)
    949 Korean
    950 Chinese (Taiwan, Hong Kong)
    1361    Korean (Johab)

- Extended functionality for ListFolderFiles Macro:

 ListFolderFiles(Reg: 0..9,"Path", "filetype filter",
                 recurse_subfolders: 0..1, relative_path: 0..3, flags:0..111);

    Flags (from left to right):
      Include System Files   100
      Include Hidden Files   010
      Include Readonly Files 001

- Extended functionality for Beep Macro:

  Beep(#0..4,"Filename.wav");

 The second (optional) parameter can specify an existing AUDIO
 (*.wav) file to be played...


WinEdt 5 [Build 20020826 (v. 5.4)] (private build)
==================================================

- Extended CL <-> Index Macros...

- New Open and Save As dialogs on Win2000/XP...

- New XP-style appearance of dialogs and controls on WinXP.
  WinEdt now uses TMS Delphi package available at:

        http://www.tmssoftware.com/winxp.htm

    Another possibility to achieve this is to PATCH WinEdt.exe
    with Style-it XP utility available at:

        http://bootxp.net/styleitxp/

Thanks to Denis who directed me to the above web sites.

- a problem with assigning shortcuts to context popup menus
that are also linked to the right mouse response has been
fixed.

- a few oddities and bugs (especially a serious problem with
popup menus) have been fixed in this build...


WinEdt 5 [Build 20020725 (v. 5.4)] (private build)
==================================================

- A (not commonly encountered but reproducible) problem with
saving the ini file has been fixed...

- A problem with corrupted or disappearing menu with
auto-configuration event handler has been eliminated (resource
leak has been fixed)...

- A bug with the "Idle Saving" option has been fixed...

- RegEx that compile in more than 255 RegEx instructions are
now handled properly.

- C-style errors are now detected with UNIX specification and
they allow drive specification for full filename.

- Compounded Words Option has been introduced for Dictionaries.
Compounded words can be highlighted with different attributes
that misspelled ones.

- An oddity with files reported as externally modified after a
switch to/ from daytime savings has been fixed: WinEdt now
properly handles UTC (Universal Time Coordinate) format...

- WinEdt Wizards are now centered with respect to the Main Form
(rather than desktop which caused problems on two monitors)...

- In WinEdt 5.4 it is possible to change Command, Utility, or
Document into a Macro without deleting the old menu item and
inserting a new macro. Just enter a new definition inside
square braces [...] and WinEdt will automatically change the
item to macro. I found it useful because in the long run all/
most menu items will be eventually converted to macros...

- SetSort macro has an extra parameter:

 SetSort(Ascending,Case_Sensitive,Ignore_Length,Remove_Duplicates: #-1..1,
         Table: -7..8);

   Extra parameter for Tables (0..7): Table: -7..8

      0:      use the current table (whatever it may be)
      1..8:   use table x-1
      -7..-1: if current table is 7 (Dictionary) then use -x-1;

- Sorting of GDI Pages (Page directive now allows Sorting
Preferences):

 Page("Caption", "Mode Filter", "External File?", Case Insensitive: 0..1,
   Always Sorted: 0..1, Quick Sort: 0..1,
   Ascending,Case_Sensitive,Ignore_Length,Remove_Duplicates: -1..1,
   Table: -7..8);

Parameter for Tables has the same meaning as in SetSort.

The Page sorting preferences (if specified with non-defaults)
also reflect the initial preferences in the Sort Dialog
displayed when explicit Sort command in the interface is
executed with Quick Sort option disabled.

Furthermore, the context popup menu contains the option to
enable or disable Auto Sorting and Quick Sorting. This option
changes the properties of the current page for the duration of
the current WinEdt session. Permanent changes require
modifications to WinEdt.gdi...

- Prefix and Suffix may be specified as the last two parameters
for GDI Items. These two strings are a part of data displayed
in the gather list control... The TOC Page has been modified to
take advantage of the new functionality:

  //  Item('TeX','*',1,1,'\chapter?',0,1,1);
  //  Item('TeX','*',1,1,'\appendix?',0,1,1);
  //  Item('TeX','*',1,1,'\bibliography?',0,1,1);
  //  Item('TeX','*',1,1,'\nonumchapter?',0,1,1);
  //  Item('TeX','*',1,1,'\prefacesection?',0,1,1);
  //  Item('TeX','>>*',1,1,'\section?',0,1,1);
  //  Item('TeX','>>>>>>*',1,1,'\subsection?',0,1,1);
  //  Item('TeX','>>>>>>>>>>*',1,1,'\subsubsection?',0,1,1);
  Item('TeX','',1,1,'\chapter?{?}',0,1,1,'Chapter: ','');
  Item('TeX','',1,1,'\nonumchapter?{?}',0,1,1,'chapter: ','');
  Item('TeX','',1,1,'\appendix?{?}',0,1,1,'Appendix: ','');
  Item('TeX','',1,1,'\bibliography{?}',0,1,1,'Bibliography: ','');
  Item('TeX','',1,1,'\prefacesection?{?}',0,1,1,'Preface: ','');
  Item('TeX','>>',1,1,'\section?{?}',0,1,1,'Section: ','');
  Item('TeX','>>>>>>',1,1,'\subsection?{?}',0,1,1,'Subsection: ','');
  Item('TeX','>>>>>>>>>>',1,1,'\subsubsection?{?}',0,1,1,'subsection: ','');

 LoadSettings - parameter for extras (See the Macro Manual)
 ExtractSettings - parameter for extras (See the Macro Manual)

- New "Colors and Highlighting" interface. The Colors page has
been moved from Preferences Dialog to the new interface
(previously called just Syntax Highlighting). Also, the
Background Page in the appearance dialog has been removed and
it is now replaced with a new page, called Background Schemes,
in the extended Colors and Syntax Highlighting Dialog. It
allows you to setup mode-dependent background, left / right
margin color schemes. Furthermore it is possible to specify
bitmaps for fancy tiled background effects (should one feel
less stressed writing on a piece of wood or on a brick wall:-).
Of course this means more import/ export macros and
modifications to the default settings...

First, there are two different schemes for Views A and B (view
can be toggled in the status line or Ctrl+Shift+=). The rule is
as follows:

The last selected scheme for a particular mode applies. By
default "A: Dots Blue" is enabled for EDT mode (eg. WinEdt
Macros). You can change the mode filter to empty or * and now
it will apply to all (primary view) documents except for any
modes that are enabled after this point in the list.

That's why it is best to put the "default" scheme to the top of
the list and then only overwrite those modes that you want...

*** Remember: The last enabled scheme always applies!!!

- New Import/Export Macros to cover Background Schemes:

  AddBackground("Filename");
  ExtractBackground("Filename");
  LoadBackground("Filename");

- Also:

  ExtractBookmarks("Filename");
  LoadBookmarks("Filename");

- New macros for process launching (execution):

  IfFinished("Then","Else");
  GetExitCode(Reg: 0..9);
  TerminateProcess;

These macros refer to the last process launched from WinEdt
with WinExe or Run macro. Use with care (TerminateProcess
should be used only for emergency and it may result in lost
data or resources).

  WaitForMessage(timeout: 0..99999; Process_Messages: 0..1);

A custom Sync handler (after WinExe) should look like:

 Loop('IfFinished("GetExitCode(0);Stop;","WaitForMessage(10,1);");');

Without WaitForMessage call WinEdt would compete with the
running process for CPU in a tight loop (thus making the
compilation much slower)!

- New Macros (or symmetry reason):

  SetEnvVar <-> GetEnvVar

(even if one will mostly use %@();)

  ReadFile <-> WriteFile

(dump a register in one step)

  WriteFile("Filename","String");
  GetEnvVar(Reg: 0..9,"VAR");

- New Parameter for EOLN format for WrL macro:

WrL("String",EOLN: -1..3);

  EOLN: 0 - Default=CR+LF
        1 - UNIX=LF
        2 - VMS=CR
        3 - Exotic=LF+CR
       -1 - Current Document

Note that before -1 (Current Document's EOLN format) was the
default which does not make much sense...

- New Macros to manipulate/ navigate Strings:

  GetDocEOLNFormat(Reg: 0..9);
  SetDocEOLNFormat(EOLN: 0..3);
  GetStrEOLNFormat(Reg: 0..9, "String");
  SetStrEOLNFormat(EOLN: 0..3, "String", Output Register: 0..9);

  EOLN: 0 - Default=CR+LF
        1 - UNIX=LF
        2 - VMS=CR
        3 - Exotic=LF+CR

  MoveBy(chars:-999999999..999999999, useCLStart:0..1, eoln_length: 0..2);
    Move by a specified number of characters in the current
    document (left or right depending on the the parameter chars
    being negative or positive, respectively).

  SetCLStart(flag: 0..2, eoln_length: 0..2);
    flag 0 = beginning of the document
         1 = selected portion (or block)
         2 = current position
    Sets the parameters for Index <-> Line Column functions

  IndexToCL(index, regC, regL, "String");
    This function returns 1-based Column and Line of the text
    corresponding to the given Index in a 0-based string extracted
    from the text...

    If the optional String Parameter is omitted then the current
    file is used. SetCLStart is only used for the current document...

    An Example:
    ===========

      // A portion of text is selected
      LetReg(0,"%S"); // Get Selected Text
      SetCLStart(1);  // Remember where the string came from...
      // Pass the string %!0 to some external application which finds
      // the index of the position you are interested in...
      // Store the index in register 1
      // Go to that Position in your document
      IndexToCL(%!1, 2,3);
      GotoCL(%!2,%!3);

  CLToIndex(c,l, reg, "String");
    The inverse of IndexToCL();

-New macros to change or obtain the font script:

   SetFontCharset(Value: 0..9999);
   GetFontCharset(Reg: 0..9);

- New macro for WordWeb (Thesaurus):

    WordWebLookup(Reg: 0..9,"Word",CloseonCopy: 0..1);

    Requires WordWeb installed. Free download is available at:

        http://wordweb.info/free/

   WinEdt macro function to check and possibly replace a word (after
   copying a word in WordWeb interface [eg. pressing on a Copy
   button or using a shortcut Alt+C]) can be defined as:

   SelWord(1);WordWebLookup(0,"%S",1);
   IfOK(!'BeginGroup;CMD("Delete");Ins("%!0");EndGroup;');

  For more information on how to use and configure WordWeb consult
  its own Help...

- A new Option (Preferences| Shell) for Custom Scroll Wheel
response when the mouse pointer is placed on Document Tabs
(Next and Previous)

- GUI Control and Toolbar now implements scrolling if WinEdt
Window is resized so as to hide a portion of the GUI control...

- A new option for Backup of Project files.

- New Options for soft wrapping (currently no interface????)
    Format on Resize (true){}{}{}
    Proper Line Numbers    (true)
    Use Bold Attribute     (false)

- Reduced/ eliminated flickering on XP when switching between
maximized documents by using the Tab control.

- WinEdt now implements concurrent license monitor which was
requested by quite a few administrators on larger networks.

WinEdt's Site Licenses and Subscription License limit the
number of concurrently running instances of WinEdt on a network
to a specified number of users. When the quota is reached no
more instances can be started until another instance of WinEdt
is closed. An attempt to start another instance results in the
following message:

  Licensed quota of concurrently running instances of WinEdt is exceeded.
  Try again later or contact your system administrator about this message!

This functionality ensures that the use of the program on
networks complies with the licensing agreement.

WinEdt's Shell Configuration Wizard allows the administrator to
monitor the usage of WinEdt on a network. WinEdt also produces
a minute by minute log file detailing a usage of the program on
a network. This data can be used should a need to upgrade a
license arise...

If you encounter any problems with this functionality contact
WinEdt Team at: support@WinEdt.com.

______________________________________________________________________________


WinEdt 5 [Build 20020323 (v. 5.3)] (official release)
=====================================================

After the installation is finished WinEdt displays a
(consolidated) Configuration Wizard allowing you to quickly
configure basic aspects of WinEdt and its integration with
Windows and TeX. The Wizard keeps on appearing until the option
"Show this Wizard next time" at the bottom of the dialog is
unchecked. Later it can be started from the Options Menu...
Check it out!!!

The TeX Configuration Wizard is now implemented and documented
for MiKTeX, fpTeX (web2c) and YandY TeX.


  - More robust Backup and Restore macros to better preserve
  custom settings. User profile is upgraded with new files as
  required...

  - Minor fixes (a few typos in the documentation) and a few
  enhancements to the default interfaces (context sensitive help
  in popup menu)...

  - Slightly improved EOLN format handling when the document mode
  is changed...

  - Minor improvements when it comes to handling relative file
  specifications in the Project Tree...

  - WinEdt now properly installs or upgrades itself even if
  the previous instance was using user profiles (the defaults are
  the proper defaults that come with the new version)...

  - The Default Settings have now been stripped of all Alt+Ctrl
  (AltGr) shortcuts to avoid (too) many conflicts with different
  keyboards...

  - A bug with RegEx A**C has been fixed...

  - An oddity with overwriting a Selected Column (Block Mode) has
  been fixed.

  - A new shortcut Ctrl+Shift+E is (by default) used to Hide the
  Errors interface.

  - \OE and \oe have been added to the default Read and Write
  Translation Tables...

  - Help has been updated with the new Menu and Shortcuts Scheme
  (minor modifications mostly pertaining to Ctrl+Alt).


WinEdt 5 [Build 20020317 (v. 5.3)]
==================================

  - Improved and extended Help, (Illustrated) Users Manual, Macro
  Manual and Documentation. See WinEdt's Help -> WinEdt
  Documentation Menu. CHECK IT OUT!

  - Doc Menu now contains a short LaTeX demo (graphics inclusion,
  colors, international characters, rotated tables and some useful
  TeX-ing advices and hints (7 pages).

  - A few shortcuts (Ctrl+Alt+[Shift]=) have been eliminated from
  the default setup to avoid conflicts with certain keyboards
  (French, Italian, Swedish)...

   - Wildcard "*" in strings is limited to one
  line to make the search in strings more compatible with the
  search in text. Use "**" if you want the search scope spanned
  over line terminators...

  - A few fixes and enhancements to the default Insert Menu.

  - A new parameter to suppress warning if the application is not
  running and it is not (properly) specified. Use IfOK after the
  macro to check the status of the execution:

   DDEOpen("Server Application","Service","Topic",Suppress_Warning:0..1);

  - A minor enhancements to the Block (Column) Delete operation...

  - Standard (ASCII) Wrapping Extension:

    By default (See Settings Dialog: Comments) WinEdt uses %% as a
    Hard Return when Standard ASCII Wrapping is enabled for TeX
    Mode. In the default settings "Shift+Ctrl+Enter" is assigned
    to the macro that in TeX Mode inserts %%+<line terminator>.
    Under some circumstances this strategy can ensure simple and
    efficient wrapping in your TeX documents (without restoring to
    "Conventional (Soft) Wrapping")... You should take advantage
    of this functionality is you want to enable wrapping for
    indented environments (which can be handy if you want nicely
    auto-formatted itemized environments). Hard returns may be
    required inside equations or tables to prevent WinEdt from
    re-formatting such environments as if they were plain text...

  - A better recovery should the WinEdt.ini file get corrupted
  (if possible a backup or else the default is automatically loaded).

  - Locale (language) specification for GetDate:

    GetDate(StrRegister: 0..9, "Format", "Locale");
      This macro provides an interface to FormatDateTime function.
      The function takes current date and time and formats it as
      specified by the user in the "Format" parameter. The results is
      available in the local register %!0..%!9. If the Optional
      "Format" parameter is omitted or left empty then the function
      returns the previous value which (in English) is equivalent to
      the format:

          'dddd, mmmm d, yyyy "at" hh:nn'

          Tuesday, September 1, 1998 at 16:49

     The following is produced with 'dddd, mmmm d, yyyy' and
     Locale specified as:
          dimarts, mar 12, 2002          Catalan
          Tuesday, March 12, 2002         English
          mardi, mars 12, 2002            French
          Dienstag, Mrz 12, 2002         German
          marted, marzo 12, 2002         Italian
          torek, marec 12, 2002           Slovenian
          Martes, Marzo 12, 2002          Spanish

     Note that it is up to your Windows Language Support to properly
     format the string according to the specified language's
     rules...

  - FormatString(); function now has an extra formatting command
  "capitals" to convert the initial capitals...

  - A few minor selection refresh oddities have been fixed...

WinEdt 5 [Build 20020219 (v. 5.3)]
==================================

  - The Bookmarks Menu has been restored back to the default
  Ctrl+Shift+0..9 scheme to avoid problems with some keyboards
  that use Ctrl+Alt 0..9 for {,}, etc...

     Popup Menus are now defined as:
     ===============================
        Grave                       Ctrl+`  (Invisible)
        Acute                       Ctrl+'  (Invisible)
        Umlaut                      Shift+Ctrl+'  (Invisible)
        Tilde                       Shift+Ctrl+`  (Invisible)
        Circumflex                  Alt+Shift+Ctrl+6  (Invisible)

     Thus Ctrl+` followed by a character "a" produces "", etc...
     This works with Western fonts!

    This is final solution for the default settings: I cannot
    please everyone and the conflict between Set Bookmark 6 and
    Circumflex in the default settings has to be resolved! If you
    have a problem with this scheme change your settings through
    the Options -> Menu Setup Dialog. For example go to the Popup
    Menus Tab Page and change the shortcut to Circumflex to a
    keystroke of your choice (it used to be Shift+Ctrl+6).

  - A few minor oddities in the Insert Menu have been fixed.

  - Improved Insert and Remove  Comment Commands (Ctrl+Alt+Shift
  Left or Right).

  - The bullet character (ASCII 127) is now translated to
  highlighted (red+Bold) "*" in the Screen Translation Table.
  This makes bullets visible in non-Western version of Windows
  (with different fonts and encodings)... The translation and
  highlighting attributes  can be changed in the Settings:
  Translations dialog and Highlighting| Filter Set dialog,
  respectively.

  - TeX Live 6 detection has been improved in the TeX System Macro.

  - Oddity with the TeX Configuration Wizard in YandY
  Configuration has been fixed...

  - To avoid confusion with Filetype Associations and Projects the
  filetype associations are now done without -V command switch...
  This can be customized (on per-filetype basis by editing the
  "...WinShell\Create WinEdt Filetypes.edt" macro script: Change
  the value assigned to Register 7):

    // Command Line Switches:
    // Affects the first instance of WinEdt
    // -V: Temporary Project
    // -0: Don't restore other documents
    // Empty: default...
    // Can be customized on per-filetype basis:
    //        Search for %!7 or %$('WinEdt-Exe');
    //        and add, remove or change the switch
    LetReg(7,'');  // Default Command Switch: None

  - Improved Combo box for the list interface (minor enhancement).

  - Additional bitmaps for Toolbar and Menu (mostly for XML Mode)...

--------------------------

  - Yet another bug with Optimized RegEx has been fixed:
    ">" in Softly Wrapped documents...

  - The Document Settings Dialog now displays the time when the
  file was last modified, Created or accessed...

  - A few enhancements to the macros and a few minor (bug) fixes
  have been implemented... Error Search has been further improved
  to filter out more Warnings in c-style error log file...

  - An (optional) alternative mode for bookmarks has been
  introduced: Floating Bookmarks mode always links the current
  bookmark to the current cursor (caret) position. The Appearance
  dialog has been modified to allow a selection of Standard or
  Floating Bookmark mode. Furthermore, for visual effect the
  appearance of the current bookmark can be selected to be
  different from others. Floating bookmarks closely resemble
  multiple instances of the same document.

  To avoid messing up the current position when text is being
  positioned through the tracking in the Gather interface or Error
  Search it is possible to set Zero as a "roaming" bookmark. With
  this option SetBookMark(0); (by default Ctrl+Alt+0) macro is
  always executed before any of the above interfaces resets the
  position in your document. Thus GOTOBookMark(0); (by default
  Ctrl+0) in the Standard mode brings you back to your last
  working position while in the floating bookmarks it prevents
  your last (proper/non-roaming) bookmark to be reset. Note that
  with this option enabled 0 should not be used as a real bookmark
  since it can get reset. With "roaming" approach it makes sense
  to define an inverse search as:

    WinEdt.exe -F "[SetBookMark('0');Open(|%f|);SelPar(%l,8)]"

  depending on whether or not you want your current bookmark reset
  to the new position when you initiate an inverse DVI Search from
  the previewer (such as YAP).

  Note that in the Floating Bookmark mode you can never erase the
  current bookmark. The context popup menu (displayed in response
  to the right mouse-click on the left margin) has been
  enhanced with context-sensitive bookmark commands...

  In addition to bookmarks, the status line contains the panel
  displaying A and B which can be used to switch between two
  different positions in the current document. Bookmarks and
  alternative position are preserved for the next session (they
  are part of the file attributes in the project list).

    Note that (by default) Ctrl+[Shift+]Backspace still moves you
    back (or forward) in the "ring" of recent positions in your
    document and Alt+Backspace [or Ctrl+Z] (initiates the undo)
    positions you to the place of the last change before undoing
    it with the next undo command. This, too, can come handy when
    navigating through large documents...

  Users that don't care for bookmarks may still choose the
  Floating Bookmarks since the left margin provides a useful
  visual effect pointing to the current line in a document.

  - To avoid the conflict with shortcuts to the Invisible Popup
  Menus for international characters the Circumflex Popup
  menu shortcut has been modified from Ctrl+Shift+6 to
  Ctrl+Alt+Shift+0..9

    Popup Menus:
    ============
       Grave                       Ctrl+`  (Invisible)
       Acute                       Ctrl+'  (Invisible)
       Umlaut                      Shift+Ctrl+'  (Invisible)
       Tilde                       Shift+Ctrl+`  (Invisible)
       Circumflex                  Alt+Shift+Ctrl+6  (Invisible)

    Thus Ctrl+` followed by a character "a" produces "", etc...
    This works with Western fonts!

  This eliminates the conflict between the default shortcuts
  (Popup Menus have a priority over ordinary menu items). If you
  prefer some other scheme for Bookmarks you have to modify
  shortcuts in the Bookmarks Menu in the Menu Setup Dialog.
  However, note that in this case the shortcut to Circumflex
  disables the default shortcut to set the bookmark 6. Bookmarks
  can also be accessed through the double-shortcuts (Alt+=). You
  can check the Shortcut List and Menu Listing Tab in the Menu
  Setup Dialog for the list of all shortcuts and menus...

    Hint: the list can be copied and pasted into WinEdt and then
    printed for a quick reference.


WinEdt 5 [Build 20020127 (v. 5.3)]
==================================

  - A refresh oddity with bookmarks has been fixed (auto wrapping).
  Bookmarks now "float" better when a paragraph is re-formatted...

  - TeX Configuration Macros have been fixed so as to allow easy
  switching between MiKTeX, fpTeX (web2c) and YandY TeX
  implementations. It has been tested with all configurations:
  the trick is that WinEdt inserts the binary folder of the
  current configuration in front of the PATH. As a consequence
  WinEdt Options -> Configurations Menu now contains two entries:

    Startup.edt where variables independent of the TeX system are
    initialized (GS, GSView, Acrobat [Reader])...

    TeX System.edt where variables specific to the current TeX
    System are initialized...

  For most users this should happen transparently (the default
  macros take care of everything). However, advanced users can now
  use more than one TeX system and switch between them at their
  convenience by executing the appropriate Configuration command
  in the Options -> Configurations Menu...

  - WinEdt's customizable menu was designed without taking into
  consideration a possibility of switching between configurations
  depending on the mode of a document or a temporary choice of a
  TeX system. Such extensions came to life later and the current
  mechanism is too static to handle them. Changing a shortcut for
  LaTeX in such settings becomes a nightmare (after the change is
  made in the Menu Setup one also has to manually update the
  configuration menu [eg. Config\MiKTeX]). Neglecting to update the
  configuration(s) would result in the loss of custom shortcuts
  after switching between different configurations... (at the
  moment MiKTeX, fpTeX, YandY TeX, HTML and ASCII configurations
  are included in the default settings while others [Perl,
  Fortran, Java, C, ...] are available from an ever growing
  collection at www.winedt.org).

    The Options -> Configurations menu now has a Maintenance
    Utility (macro) called "Update Configurations...". It can be
    used to apply the current settings (or a part of them) to any
    of the pre-defined configurations. Macro is rather
    sophisticated and it offers suitable choices (eg. common LaTeX
    Insert Menu for all TeX Configurations). It also disables
    components that are already updated thus providing a useful
    visual feedback. Furthermore, the macros to load
    configurations have been revisited and they can and do use a
    private copy of the configuration (%b - User Profile) if one
    is available. Private copies are automatically generated with
    the Maintenance Macro...

      The macro is sophisticated enough that it can extract,
      compare and update individual menus in the single Menu.dat
      file. Users that want to use configurations and also want to
      customize re-loadable [configuration-sensitive] menus
      (Insert, Accessories and Help) have to run the "Update
      Configurations..." Macro after their customizations to
      export the modified menus into the appropriate configuration
      components.

  - A new macro has been implemented:

     SortLines("Source String",Flags:0..1111,Table: 0..7,Result:0..9);

      Flags (from left to right):
          1000 Remove Multiple
          100  Ignore Length
          10   Case Sensitive
          1    Ascending

    It works regardless of the format (CR+LF or LF).

  - SearchInString function has been optimized (huge difference in
  large strings with non case-sensitive search).

  - A bug with backward search in selected strings has been
  fixed.

  - Document Settings Dialog now displays times when the file was
  last modified (created and accessed)...

  - Error Search dialog now has an "up/down" button which can be
  used to enable or prevent search for Warnings with the commands
  in Error's Dialogs Toolbar (Next and Previous Error). Warnings
  (TeX errors of type 2-4) are enabled only when this button is
  down.

  - Modified macro IfLogErrors and a new macro FindError have been
  implemented to make error recovery in background mode
  compilation more useful... The default macro scripts have been
  modified with new parameters:

     IfLogErrors("Then","Else", c-style: -1..1,
                 type1,type2,type3,type4: -1..1, type_1_filter: 0..9);
       Used for Error Log file parsing and the execution flow
       control in compilation macros...
        c-style:    -1 OFF
                     0 Default (depending on Error Settings)
                     1 ON
        type1-4:    -1 OFF
                     0 only if the Warnings "button" is down
                     1 ON (if enabled type 1..4 in Error Settings)
        type_1_filter: 0 - OFF
                       n - if the RegEx string "<!* warning*:"
                           is found within n lines backward then the
                           error is downgraded to a type 4 warning.
                           This helps filtering out some warnings...
                           (eg. PDFTeX Type 1 Warnings).

     FindError(Initialize:-1..1, Direction: -1..1, c-style: -1..1,
               type1,type2,type3,type4: -1..1, type_1_filter: 0..9);
        Initialize: -1 - NEVER (keep current log file as loaded)
                     0 - UPDATE Log file if necessary and then
                         search for errors
                     1 - UPDATE Log file if necessary and
                         stay at the beginning if the file has changed
                         (suppress searching for next error)
        Direction:  -1 - previous error
                     0 - stay where you are
                     1 - next error
        c-style:    -1 OFF
                     0 Default (depending on Error Settings)
                     1 ON
        type1-4:    -1 OFF
                     0 only if the Warnings "button" is down
                     1 ON (if enabled type 1..4 in Error Settings)
        type_1_filter: 0 - OFF
                       n - if the RegEx string "<!* warning*:"
                           is found within n lines backward then the
                           error is downgraded to a type 4 warning.
                           This helps filtering out some warnings...
                           (eg. PDFTeX Type 1 Warnings).

  - Extended macro (added parameter "Selected String"):

    ShowList(DblClickExecute:0|1,DblClickClose:0|1,"OK Macro","Cancel Macro",
             Selected_Item: 0..999999999,"Selected String");

  - Enhancements to the macro GetColor:

    GetColor(Register: 0..9, "InitialColor", RGB_Format: 0..3, "Delimiter");

    // RGB: 0 = HEX FF0000 (Red)
    //      1 = DEC 255 0 0 (Red)
    //      2 = PERCENT 100 0 0 (Red)
    //      3 = Fraction 1.00,0.00,0.00 (Red)
    //
    //    Color Delimiter has to be entered for 1..3:
    //    in our example '',' ' and ',' are specified as RGB delimiters

   This should make it possible to define Active Strings for
   double-clicking on

        \textcolor[RGB]{?}
     or
        COLOR="#?"

  - Environment Completion Active Strings are now defined as follows:

    \begin{?}>
    triggers ChangeEnv macro.

    \begin{?}}
    triggers CompleteEnv macro.

    \end{{
    triggers completion (backward).

  - More RegEx oddities have been fixed:-(

  - Minor problems with scroll bar position when switching between
  instances have been fixed.

  - New Macro

      GetDocAsASCII(Register:0..9, "Filename", Translate: -1..1, EOLN: 0..4);

    Store the result in specified register.

    If Filename is empty (or the file is not currently opened)
    then the current document is exported.

    The Write translation is applied depending on the value of the
    Translate Parameter (-1=off, 0=default, 1=on).

    The line terminator can be specified as follows:
        0: Default (usually CR+LF unless otherwise specified or imported)
        1: CR+LF (Windows/DOS)
        2: LF (UNIX)
        3: CR (VMS)
        4: LF+CR

      This macro can come handy if you want to export Softly
      Wrapped document as an ASCII file (reflecting the currently
      wrapped lines). For Example:

        // Get Main File or Current Document in Register 0
        GetDocAsASCII(0,'%F');
        // Save as *.tek
        OpenOutput('%P\%N.tek');
        WrS('%!0');
        CloseOutput;

          etc...

  - The following macros now allow default value parameters.
    %!? or %!x,%!y and %!z (respectively):
        GetLongString("Prompt","Caption","Default Value");
        GetString("Prompt","Caption","Default Value");
        GetDim("Label1","Label2","Caption","x","y");
        GetCounter("Label","Caption","z");

  - Binary Mode now supports Wrapping and Formatting in blocks of
  binary data (not extensively tested and rarely used: WinEdt is
  not designed as a binary or HEX editor!!!)...

  - A long list of minor enhancements and fixes (mostly of
  "look-and-feel" nature)...


WinEdt 5 [Build 20011213 (v. 5.3)]
==================================

  - The Configuration Wizards have been consolidated: Shell and
  TeX Configuration Wizard can now be started from within the
  WinEdt Configuration Wizard (which is placed in the Options
  Menu). WinEdt is initially started with the Configuration Wizard
  Displayed and until the Option "Show this Wizard next time" at
  the bottom of the Wizard is unchecked the Wizard remains active
  on subsequent launches of the program.

  - TeX configuration Wizard has been simplified (it contains
  less checkboxes for Customization of the Execution Mode).

  - Project Menu has been split into Document and Project Menus to
  distinguish between settings pertaining to current document
  from the project manger commands...

  - Tool bar contains a few new buttons (an interface to
  frequently requested [font] commands).

  - WinEdt can now load UNICODE files. However, this does not
  imply that they can be edited as such. WinEdt converts them to
  ASCII and can convert them back to UNICODE when they are saved.
  This can result in loss of characters that are not available in
  the current ANSI Code Page. WinEdt warns you if this is the
  case. However, many UNICODE files are just inflated ASCII files
  and this extension enables WinEdt to handle such files as if
  they were ASCII. Document Settings Dialog now contains an extra
  control that displays the ANSI/UNICODE format of a document.

  - The menu items Insert and Remove Comment (in Edit| Move Menu)
  now properly handle HTML Mode [they were converted to macros].
  Also in the default settings delimiter matching for <...> is
  enabled in HTML mode.

  - Active String \begin{?}> for TeX mode has been associated with
  a macro (based on Robert's ChangeEnv.edt) which does the
  following:

    if the closing \end environment is found it prompts you to
    change the environment name otherwise it completes the current
    environment (nice).

  - Improved highlighting for citations: \cite[...]{...}

  - Some Macros in the WinShell folder have been slightly
  improved and the information in the Shell Configuration Wizard
  has been simplified.

  - A bug with double-quotes inside strings have been fixed...

  - Backup and Auto Save now allows specification of backup files
  in folders that don't necessary exist. The Option Create folder
  if needed should be used to force WinEdt to create a folder.
  Also a prefix # (for filenames and path specifications) has been
  introduces to extract a unique path:

    for %P = C:\WinEdt\Doc

    %#P = C\WinEdt\Doc

  This makes it possible to specify C:\My Backups\%#P\%N.bak
  for global backup folder, etc... This works with UNC filenames
  as well (\\Server\...).

  - Requires File functionality affects the launch of compilers
  for new documents. Since many users find this behavior
  contra-intuitive (eg. a disabled LaTeX button is often taken as
  an indicator that WinEdt cannot find latex.exe) I've now decided
  to extend this functionality in a way that should cover more
  preferences.

  The default "Requires File" filed for LaTeX now reads:

      "%!M=TeX"

  As long as the current document (or the main file when set) has
  mode TeX[:submodes], the menu item is enabled. This can be
  combined with the rest of the menu item filters, eg.

      "%!M=TeX"?<%F>%P\%N.tex?<%F>%P\%N.texi

  This restores and enhances the "old" behavior in the sense that
  the document mode (rather than an extension) determines whether
  TeX compiler is enabled (and this applies to new documents as
  well). For dvips, DVI Preview, or dvi2pdf, the existence of the
  dvi file remains a "good" filter since all of the above actions
  will fail if the dvi source does not exist. But of course, it all
  boils down to the personal preferences and taste (simple vs.
  "smart" configuration).

  - WinEdt suffered from a bug in Delphi's VCL: when WinEdt
  Windows was tiled or cascaded an extra ghost Window was taken
  into consideration thus preventing WinEdt from being properly
  tiled with a previewer. After a long investigation the problem
  has now been fixed in my private VCL unit.

  - The input directives in the Preferences| Input dialog now
  allow specification with multiple parameters, such as

    \MYINCLUDE[?]{?}{?}

  the last parameter is considered to be the filename and the rest
  is ignored...

  - A bug with Remove Comment command with comments larger than
  one character have been fixed.

  - OpenOutput macro now correctly interprets the meaning of the
  Append parameter.

  - The default Macro Scripts for launching pdf-creating
  accessories have been improved to make sure that Acrobat Reader
  releases a document before the compilation starts.

  - Settings | Matching Dialog now has an extra parameter Timeout
  which can be used to specify the timeout (in milliseconds) for
  automatic matching of delimiters. In huge documents typing { at
  the beginning could result in a noticeable delay of 5-10 seconds,
  which is not acceptable for the automatic delimiter matching
  functionality...

  - A new Macro

    GetColor(Reg: 0..9,InitialColor: String);

  can be used to display the Common Colors Dialog and return the
  HEX RGB value of the selected color in the specified Register.
  Use IfOK function to see if the dialog was properly
  terminated... The color is specified as a 6-digit HEX RGB value.

  - Regular Expressions: a bug with the Optimized Regular
  Expressions has been fixed. The Option in the Context Popup
  Menu in the Find Dialog remains until this is confirmed. A few
  other RegEx oddities have been fixed as well..

  - Regular Expressions: The Character # now has an ordinary
  meaning. \# has to be used for a filter.

    RegEx - New in WinEdt 5.3:
    ==========================

    ** stands for a wildcard that is not limited to one line
       it can come handy but it has to be used with care in large
       documents (especially with tags it can get slow!!!)

       a single * has the same meaning as before...

    \#{Expression}

    or

    \#~{Expression}

    can be used as filters in front of the next expression. The filter
    is calculated (backward) after the match to the next expression
    has been found and the filter is limited to one line (the
    beginning of the line in which the expression has been found -
    even if the line is only softly wrapped). The control sequence \#
    is being used instead of # to avoid compatibility problems with
    older RegEx (# was and remains an admissible (ordinary) character
    in strings).

      Examples:

      \#{\\}label

      all labels that are preceded by \ (\ is not a part of the match).

      \#~{\\}label

      all labels that are not preceded by \ (\ is not a part of the
      match).

      and

      \#~{\\\\}#{\\}label

      all labels that are preceded by \ but not \\...

      This can come handy and can significantly simplify the current
      method of handling such cases.

      Note that for a similar filter at the end of the expression one
      can use ~ (negative) or ~~ (positive).


WinEdt 5 [Build 20010815 (v. 5.3)]
==================================

  - The default menu no no longer contains any documents or
  utilities. The macros Open and Run are used, instead. If you
  make modifications you should probably observe this practice
  which will make your configurations easier to upgrade or enhance
  (should the need for more sophisticated application launching of
  some accessory arise in the future, as it often does!).

  - The new Shell Configuration Wizard makes the following tasks
  easy and gives users choices when it comes to the integration of
  WinEdt with their Windows:

    -- Create Links and Shortcuts to WinEdt
    -- Filetype associations
    -- User profiles Creation and configuration
    -- Uninstalling

  In the default settings the Macro Menu Item: ShellWizard; is
  placed at the bottom of the Options Menu...

  The Wizard uses a series of WinEdt macros in WinShell folder.
  Since User Profiles are a reality on Win2000 systems (many users
  prefer to work without administrative privileges even if they
  are the sole users of the machine) the information no longer
  belongs to the Network folder but is now stored in the
  WinShell\Profiles folder. Creation of User Profiles is fully
  automated and WinEdt's Wizard explains a few basic concepts for
  users that don't know anything about it...

    New Macro:

      ShellWizard("Caption");

  - WinEdt's "Configuration Wizard" in the Help Menu now only
  deals with Editor related issues (Wrapping, Project Manager,
  Application Launching, etc...). TeX- related issues are
  addressed in the new TeX Configuration Wizard that is placed in
  the Accessories menu and contains information specific to the
  selected TeX system (eg. MiKTeX, fpTeX or YandY TeX).

    New Macro:

      WinEdtWizard("Caption");

 - The new TeX Configuration Wizard is placed in the Accessories
 Menu and contains TeX system specific information and diagnostic
 utility.

 [TeXWizard('*** WinEdt MiKTeX Configuration Wizard',
            '%B\Doc\Wizard-MiKTeX','%B\Exec\MiKTeX',
            '%b\Exec',1,1,1,1,1,1,0,0,'%b\Exec\MiKTeX');]

  The following macro has been implemented to cover different
  TeX system Wizards:

    TeXWizard("Caption","Doc folder containing .rtf files",
      "The folder where TeX system specific configuration is stored",
      "The folder where the current TeX system configuration is stored",
       Custom_Configuration: 0..1,
       BATCH_Configuration: 0..1,
       Direct_Configuration: 0..1,
       Background_Configuration: 0..1,
       Detached_Configuration: 0..1,
       isMiKTeX: 0..1,
       isfpTeX: 0..1,
       isYandYTeX: 0..1,
      "The folder where the local TeX system configuration is stored");

    Note that the Doc Folder has to contain .rtf files that
    are displayed in the Wizard's .rtf control(s).

    The rest depends on the state of configuration and execution
    macros for the selected TeX system.

  For more information consult the macros in WinEdt's Exec\MikTeX
  folder. In particular, the macro TeXConfig.edt contains your
  selections pertaining to the execution mode and the macro Create
  TeX Configuration.edt provides a GUI for custom execution mode...
  The Startup macro executes TeXConfig.edt in Exec folder.

  The macro may appear complicated but it was prepared with
  differen preferences and different TeX systems in mind...

  Currently only MiKTeX configuration contains the Wizard and it
  uses a series of macro scripts in WinEdt WinEdt's Exec to launch
  MiKTeX's executables. The macros in Exec folder have been
  rewritten and now take into consideration many options that can
  be determined in the above Wizard...

  I will shortly prepare a similar setup for fpTeX and YandY TeX.
  For now they use the old configuration (Options->Configurations
  Menu). For now I'll wait for feedback regarding the new MiKTeX
  configuration...

    fpTeX and YandY TeX do not offer any Wizard or additional
    Configuration options at this stage...

  - New Macro for HTML Help:

    HTMLHelp("Help File.chm", Main_Window_is_the_Owner: 0..1,
             Mode: 0..5, "Keyword or Link", Get_Keyword: 0..1);

    If Main Window is the Owner WinEdt cannot be used until the
    Help Window is closed. Otherwise you can minimize the Help
    Window and continue to use WinEdt (the HTML Help Window is in
    Windows Task bar).

    Mode determines how is the HTML Windows called:

      0: HH_DISPLAY_TOPIC
      1: HH_DISPLAY_TOC
      2: HH_DISPLAY_INDEX
      3: HH_DISPLAY_SEARCH
      4: HH_KEYWORD_LOOKUP
      5: HH_ALINK_LOOKUP

    Keyword or Link can be passed in Modes 4 and 5, respectively.

    Get_Keyword parameter instructs WinEdt to pass the currently
    selected string as a keyword. It can come handy if you are
    using MiKTeX's Help for LaTeX which is defined in WinEdt's
    Menu as the following macro:

      HTMLHelp("%$('TeX-Root');\doc\latex\help\latex2e.chm",0,4,"",1);

    It is enabled only if the .chm file exists (should be the case
    in MiKTeX 2.1). If no word is selected WinEdt passes the
    current word or TeX command...

  If you need more information read MS documentation for HTML Help
  systems (the above macro is an interface to Windows API)...

  - The default settings use MiKTeX's HTML Help files (*.chm) which
  in  MiKTeX 2.1 replace the older WinHelp (*.hlp) files.

  - New Macro(s) for Self-Installation Script(s):

     CreateLink("Destination", "Link Name", "File Path and Name",
                "Arguments", "Working Directory", "Description",
                "Icon Path", "Icon Index");

    For more information consult the macro

      WinShell\Create WinEdt Links.edt

    Where this macro is being put to the test...

      GetBuild(Reg: 0..9);
      GetVersion(Reg: 0..9);
      GetCaption(Reg: 0..9);

    Store WinEdt's Version information in the specified register.

  - New Macro(s) to manipulate a special dialog interface used
  for WinEdt's Icons and Filetype associations (eg. from the Shell
  Configuration Wizard):

    ClearIconList;
    ShowIconList("Caption");
    IfIconChecked(Index: 0..999, Level: 0..2,"Then Macro","Else Macro");
    AddIconItem(Checked: 0..1, OpenWith_Checked: 0..1, UseIcon_Checked: 0..1,
      "Extension (eg. .tex)", "Description Extension (eg. TeX Document)",
      "Open_IconFilename.ico", "Explorer_IconFile",
      xChecked: 0..1, xOpenWith_Checked: 0..1, xUseIcon_Checked: 0..1);

    The last three optional parameters are used if no Item in the
    interface is checked. This comes handy, when the interface is
    called for the first time (nothing is associated with WinEdt)
    to provide the user with suitable defaults (rather than all
    items being unchecked).

    The dialog interface is slightly more complicated because it
    allows you to independently choose if WinEdt should open the
    files and if the assigned icon should be used in the explorer
    (that's why there are three levels 0..2 in the IfIconChecked
    macro).

    For more information consult the macro

      WinShell\Create WinEdt Filetypes.edt

    Where this interface is being put to the test...

    The Macro

      OpenIcons(",",",",",",");

    is no longer there as it has been replaced with the above
    interface that relies on WinEdt's Macro language rather than
    Windows ability to properly execute the .inf scripts...

  - New Macro

   IfFileLocked("Filename",flags:00000..11111,
     "Locked Macro","not Locked Macro","does not exist Macro");

     Executes one of the three specified macros depending on the
     Status of file.

     Flags from left to right:

       Sharing:
         FILE_SHARE_DELETE
         FILE_SHARE_WRITE
         FILE_SHARE_READ

       Access:
         GENERIC_WRITE
         GENERIC_READ

   Used in the new and enhanced PDF macros to solve the problem
   with Acrobat locking the PDF files...

 - New Macro RunPrompt

     RunPrompt("Caption", isMacro: 0..1, isCustomFont: 0..1,
                isEmpty: 0..1; EraseList: 0..1);

   It is used in the "Accessories| Run" and "Macros| Define and Run
   Macro" Menu Items. It maintains a drop-down list of recently
   executed accessories and macros...

 - The macro OpenOutput now has an extra parameter Append: 0..1

    OpenOutput("File Name", Append: 0..1);

 - The macro AddCheckList now has an extra parameter Enabled: 0..1

   AddCheckList("Check Box Caption", Checked: 0..1, Enabled: 0..1);
     Add a new item to the list. Up to 999 items are admissible.

 - The macro Open(...) now has extra parameters:

    Open("Document Name", Readonly:-1..1, Update: -1..1, "Document Mode",
                          SetFolder: -1..1, Main: 0..1);

 - the last parameter of the Registry Key Query function has an
 extended meaning:

   ' '   - Get the Default Key Value (as before)
   '  '  - Get the First Subkey Name
   '   ' - Get the Last  Subkey Name

 This should address the automatic detection of future versions of
 Ghostscript in Startup.etd. The code is now modified as follows:

  // Get AFPL Ghostscript from Windows Registry
  Assign("GS-Version","%@('HKEY_LOCAL_MACHINE','SOFTWARE','AFPL Ghostscript','   ');"); // Get the last Key!
  //? Enter the version explicitly if the above failed to detect the latest installed version
  // Assign("GS-Version","7.00");
  Assign("GS-Bin","%@('HKEY_LOCAL_MACHINE','SOFTWARE','AFPL Ghostscript','%$(|GS-Version|)','GS_DLL');");
  Assign("GS-Lib","%@('HKEY_LOCAL_MACHINE','SOFTWARE','AFPL Ghostscript','%$(|GS-Version|)','GS_LIB');");
  GetFilePath("%$('GS-Bin')", 0);
  Assign("GS-Bin","%!0");
  // Prompt("%$('GS-Bin')");  // Debugging

 - Page specification in the Print dialog now allows %p and %P
 variables to stand for the Current Page and Total Page numbers,
 respectively. Parameter %S truncates the string unless Print
 Selected Text Option is enabled. To enter % use %%...

   Default: Page %p of %P%S (selected)

 - OpenProject and CloseProject macros now have an optional
 parameter _level which allows you to Open only nodes on level
 less or equal than the specified limit and close only the nodes
 greater or equal to the specified limit. The Tree Form provides a
 drop down buttons OpenAll and CloseAll where the dropdown Menu
 provides and interface to the above macros with levels (0=all)
 2 and 3.

 - Open and Close Project event handlers now allow the
 specification of two macros: the first one is executed before the
 project is opened or closed and the other one is executed after.
 This should address the problem with the default folder after the
 documents have been restored...

 - Additional filter to prevent mistaking certain lines in TeX's
 Log file for c-style errors has been implemented...

 - A series of problems with using Large System Fonts have been
 addressed: the Dialogs and Forms (eg. Wizard) are now properly
 resized to accommodate all controls in different resolutions.
 Furthermore dropdown boxes and list controls now properly space
 lines when the font is larger: the items no longer overlap...

   The Spell Checking dialog now also displays a Cancel and OK
   button if you make it large enough for each button to fit in
   the panel on the right of the dialog.

 - Create User Profile macro has been modified to comply with the
 new distribution.

 - Some active strings were referring to %b instead of %B folder
 which disable their functionality after the User Profile is
 created.

 - The "Log File" menu item in the accessories has been renamed to
 "STD Log File" to make it clear that this document represents a
 STD Output+Error file captured by WinEdt while executing an
 application in a detached or background mode...

  - Enhanced and debugged version of Window switching macro:

    ActivateNextChild(Direction: -1..1, MDI Order: 0..2, Index: -1..99999);
      If the direction is 0 then you can specify the (zero-based)
      Index. Index=-1 is the last document... The direction can be
      based on the Tab Index or MDI Order (the same as as in the
      ListOpenedFiles function).

      Examples: ActivateNextChild(1,1); toggles between two documents
                ActivateNextChild(1); Next Tab
                ActivateNextChild(-1); Previous Tab
                ActivateNextChild(0,0,0); First Tab
                ActivateNextChild(0,0,-1); Last Tab
                ActivateNextChild(1,2); Next MDI Child (Ctrl+Tab)
                ActivateNextChild(-1,2); Previous MDI Child (Shift+Ctrl+Tab)

      The last two examples do not change the MDI Order. Others do:
      the newly activated child gets in front of the others...

      Note that this macro can be used to redefine the Next and
      Previous Child functionality. However, the MDI Shortcuts
      [Shift+]Ctrl+Tab cannot be suppressed and are always
      interpreted as the MDI Next and Previous commands.

    Windows Menu now contains the command to switch between
    documents (note the above restriction when it comes to
    assigning [Shift+]Ctrl+Tab shortcuts). You can place more such
    items based on the examples above and assign them shortcuts of
    your choice...

    In the new default settings the current document list is now
    packed in the Submenu at the bottom of the Windows Menu. If
    you don't like this Start the Menu Setup Dialog and delete the
    submenu at the end of the Windows Menu. Usually, the filenames
    are long and unless one uses the Windows Menu to switch
    between documents often it is best to keep the list in a
    submenu. The logic is the same as for the File and Project
    menus: if any of these menus end with an open and non-empty
    submenu then the list is maintained in this submenu rather
    than its parent (applies to File, Project and Windows menus,
    respectively).

  - A minor extension of the Prompt macro functionality (buttons 4
  mode was added):

   Prompt("Prompt",Type,Buttons: 0..4, "Macro 1","Macro 2","Macro Yes/No: Cancel");
     Displays the Dialog Box with the specified Prompt. Macro
     execution is resumed after the user closes the dialog box...
       Type:
        0: Information
        1: Confirmation
        2: Warning
        3: Error
       Buttons:
        0: OK Cancel (Cancel terminates macro execution)
        1: OK
        2: OK Cancel (Cancel sets OK flag to 0)
        3: Yes No
        4: Yes No Cancel (Cancel sets OK flag to 0 and executes the last macro)
     Depending on the clicked button the associated macro is
     executed...

  - A few extra bitmaps for toolbar and menu and an enhanced
  appearance of the TeX (lion) icon...

  - Slightly improved BibTeX templates...

  - Oddities with Regular Expressions in softly wrapped lines have
  been addressed...


WinEdt 5 [Build 20010613 (v. 5.3)]
==================================

  - WinEdt Macro Library is now on-line and alive:

    <http://www.informatik.hu-berlin.de/~schlicht/winedt/index.html>

  - A problem with saving dictionaries (which could result in a
  crash during WinEdt's closing cycle) has been finally pinpointed
  and fixed.

  - The default settings now display the right margin as a
  highlighted column for ASCII mode. You can quickly enable such
  functionality for other modes (or disable it altogether) in the

    Options -> Highlighting| Columns Dialog

  Help in that dialog explains the details...

  - The WinExe macro has been slightly modified:

    The priority has been removed from the flags and it is now a
    parameter on its own with admissible values:

      -1=low 0=normal 1=high

  - The "Requires File" filter functionality has been extended to
  prevent accidental compilation of a log (instead of a tex source):

    If the file is preceded by <foo> then the file existence is
    only checked if the filename equals foo otherwise the result
    is false. Thus specifying:

      <%F>%P\%N.tex?<%F>%P\%N.ltx?<%F>%P\%N.dtx?<%F>%P\%N.ins?<%F>%P\%N.texi

    as a filter makes sure that the LaTeX button is enabled only if
    the Main File (or the current document) is one of the above.

  - WinEdt now allows backup and auto-save specifications such as:

    C:\your backup folder\%n%t.bak

  or even

    %p\Backup folder\%n%t

  if you want to create a backup folder within a project.

  The same goes for Auto Saving specification (previous
  specifications with wildcards remain the same but if there are no
  wildcards WinEdt now parses the file and creates the specified
  backup folder(s) if necessary).

  - The Insert Overwrite switch now affects how the Block Mode Cut
  and Paste operation act (as many users were expecting)...

  - New Macros (not extensively tested):

    SetTree("Data", Reset_MainFile: 0..1);

    Tested on the situations below:

        GetTree(0);InsText("%!0");

        *"C:\Alex\WinEdt\Samples\Thesis\Thesis.tex"
        * "C:\Alex\WinEdt\Samples\Thesis\ABS.tex"
        * "C:\Alex\WinEdt\Samples\Thesis\ACK.tex"
        * "C:\Alex\WinEdt\Samples\Thesis\T0.tex"
        * "C:\Alex\WinEdt\Samples\Thesis\T1.tex"
        * "C:\Alex\WinEdt\Samples\Thesis\T2.tex"
        * "C:\Alex\WinEdt\Samples\Thesis\T3.tex"
        * "C:\Alex\WinEdt\Samples\Thesis\xBib.bib"
        * "C:\Alex\WinEdt\Samples\Thesis\Thesis.bbl"

        ListOpenedFiles(0);InsText("%!0");

        C:\Alex\Temp\macros2.txt
         C:\Alex\Temp\macros.txt
          C:\Alex\Temp\update.txt
          C:\Alex\Web\download.html
          C:\Alex\WinEdt\Macros\References\Reference.edt
          C:\Alex\Temp\x.tex
         C:\Alex\WinEdt\Samples\Thesis\Thesis.tex
         C:\Alex\WinEdt\Doc\Macros.txt
          C:\Program Files\WinEdt\WinEdt.mcr
          C:\Alex\WinEdt\WinEdt.run
         C:\Program Files\WinEdt\WinEdt.gdi
         C:\Program Files\WinEdt\Doc\News.txt

    --------

    ListFolderFiles(Reg: 0..9,
                "Path", "filetype filter",
                recurse_subfolders: 0..1,
                relative_path: 0..3);

WinEdt 5 [Build 20010402 (v. 5.3)]
==================================

  - A bug with lost Hard Returns when pasting text in Soft
  wrapping mode in the middle of the line is fixed.

  - "-D" Qualifier now produces an enhanced (%B\WinEdt.run) which
  can be used to track down any problems with event handlers (eg.
  access violation during the exit).

  - New macros:

      GetTag(Tag: 0..9, Register: 0..9);
      SetTag(Tag: 0..9, "Value");

  can be used for advanced Search/ Replace Macros.

  - New Macro:

      ListOpenedFiles(Register: 0..9, Order Flag: -2..2,
        "Mode Filter", "Filetype Filter",
        New: 0..1, Readonly: 0..1);

      Order Flag:

        -2 - decreasing MDI Order (Ctrl+Shift+Tab)
        -1 - decreasing Tab Order (Right to Left)
         0 - cyclic Tabs
         1 - Increasing Tab Order (Left to Right)
         2 - Increasing MDI Order (Ctrl+Tab)

    Filters can be used to select only certain documents. The
    result is a list of files starting in the first column and
    separated by CR+LF (EOLN). The list can be iterated with
    FindInString macro....

  - New Macros:

      ActivateNextChild(Direction: -1..1, MDI Order: 0..1, Index: -1..99999);

    If the direction is 0 then you can specify the (zero-based)
    Index. Index=-1 is the last document... The direction can be
    based on the Tab Index or MDI Order (the same as as in the
    ListOpenedFiles function).

    In this group there is also previously existing macro that can
    be used when iterating through opened documents:

      ActivateChild("Caption");


WinEdt 5 [Build 20010328 (v. 5.3)] (Spring alpha edition)
=========================================================

  - A few reported bugs and oddities pertaining to bookmarks have
  been addressed...

  - A bug with Popup Gather Window initialized through an external
  file interface (not WinEdt.gdi) has been fixed [not commonly
  encountered and not used in the default settings]

  - Book Marks are now better preserved when a large portion of
  a document if re-formatted (or a softly wrapped document is
  wrapped or un-wrapped).

  - The Appearance| Background Dialog now contains an interface
  that allows you to set the background color for alternative view
  (this way the "B" View can be displayed on a gray background
  alerting you that you are working at an alternative position).
  The background colors can be chosen from the Colors Common
  dialog and they do not depend on the 16 colors specified for
  highlighting in the Preferences| Colors dialog...

  - Bookmarks require an increased Left Margin specification (in
  the Preferences| Shell dialog). This may result in an unwanted
  illusion that your text is indented. To remedy this problem you
  can now specify the highlighting (background color) for the
  bookmarks portion of the left margin by introducing a column
  with the first column -1 and the last column specifying the
  margin between highlighted area and the text (values -2..-4 are
  recommended). This is done in the Highlighting| Columns dialog
  (the same background as Line Numbers is recommended to keep the
  screen moderately highlighted).

  - The Appearance| Advanced Dialog now provides an interface to
  choose up to 12 different sets of 14x14 bitmaps used for
  bookmarks. Currently only the default set is provided. However,
  users that prefer different bitmaps (lighter or darker) should
  send me a set of 10 14x14 alternative bitmaps of their choice
  and I'll include them in WinEdt's Default settings... The
  interface to use them is already there (hurry up with the
  alternatives!)...

  Custom bookmarks are loaded from %b or %B \Bitmaps\Bookmarks
  folder containing files A0.bmp..A9.bmp, ... ,K0.bmp..K9.bmp.

  - Context Popup Menu on the Left margin now contains Goto
  commands for all set Bookmarks.

  - The following macros have been introduced to provide better
  control of the Error Log file parsing and the execution flow
  control in compilation macros:

    ErrorLogUpdate(Force Update: 0..1);
      Updates the log file...

    IfLogErrors("Then","Else",noWarnings:0..1);

    CloseSTDHandle(#0..3);
      0 = STD Input
      1 = STD Output
      2 = STD Error
      3 = All (currently opened)

  - A fix with the ExportDoc macro should take care of nested
  attributes...

  - A new macro

      BookMarkLineNumber(Reg: 0..9, BookmarkIndex: 0..9);

    stores the line number assigned to the Bookmark Index
    (-1=not set) in the specified register %!0..%!9.

  - The meaning of the value -1 and 2 in some Bookmark macro
  functions has been reversed (from the first release) for the
  consistency sake (2 usually stands for toggle). The
  documentation below has been updated with the changes...


WinEdt 5 [Build 20010317 (v. 5.3)] (St. Patrick's alpha
edition)
===============================================================

  - A few minor improvements in the default settings (including
    some minor fixes to the default macro scripts)

  - Get Mode Macro now parses the first two lines for the
    (optional) mode information...

  - The MDI Open Event handler is executed for New Templates

  - The "Quit Project" command removes the project from the list
  of recently opened projects

  - A new option "Track Files" in the Tree control (the selected
  node changes to the currently active document)...

  - A problem with a 512 character limit for environmental
  variables has been fixed...

  - GDI (Gather Interface) has an additional parameter for Pages
  in order to allow Pages always being sorted when displayed (see
  Doc\Gather.txt for details).

  - WinEdt now properly parses log files in UNIX format and
  recognizes extended C-style errors (including the FreePascal
  error log files).

  - The Tools Menu now has a new macro item Evaluate Integer
  Expression:

     LetRegNum(0,"%S");SetSel(0);Ins(" = %!0");

  It uses WinEdt to calculate a selected expression and inserts
  the result at the end of selected text. WinEdt supports nested
  expressions with +,-,*, and / operators and standard evaluation
  rules...

  - The Menu Setup| Advanced dialog now has an option

        "Custom Masked Image List Additions"

    When enabled, this option instructs WinEdt to add images using
    Windows API rather than Delphi's VCL interface. This fix
    should accelerate the startup and addresses some problems with
    extremely long delays and/ or poor quality images in the tool
    bar or menu. It remains to be seen what is the general result,
    but on my system loading of bitmaps is decreased from 1 sec.
    to approx. 0.55 second without any loss of quality...

  - A new (powerful) macro WinExe:

    WinExe("Executable","Command Line","Startup Folder","Caption",
           Flags:000000..111111, Priority: -1..1,
           "STD Input","STD Output","STD Error");

      0/1 Flags (form left to right):
        Maximize Application
        Run in the Background
        Detached Process
        Synchronize: wait for the termination before resuming
        Use STD I/O/Error Handles (if specified by filenames)
        Use the Startup Directory in the names of redirected STD I/O

  Note that this macro allows you to re-direct console
  application's IO and Error stream to files and thus run such
  process in a detached mode (often much faster). It can also be
  used to synchronize sequences of actions, etc...

    Example:
    ========

    WinExe('','C:\Alex\Delphi\Graphics\netpbm\bin\pngtopnm.exe',>
           'C:\Alex\Delphi\Graphics\Temp','NetPbm', >
    // isMax isBack isDetached doSync StdIO UseDir >
       011111,1,>
    // Input Output Error >
       'Image.png',>
       'Image.pnm',>
       '');
    End;

  - Autosaving now allows you to use the Alteration measure as a
  trigger for saving: the Alteration counter is increased when a
  line is modified and a new position is in some other line or
  when a group of actions is completed (pretty much based on the
  information in the Undo buffer). Some commands such as inserting
  or deleting a string in a paragraph with auto wrapping on can
  trigger two alterations. When the Alteration count exceeds a
  threshold specified in the Preferences| Backup Dialog the
  Autosaving takes place (and the Alteration counter is reset
  back to 0). Furthermore, if you choose to redirect auto-save to
  files with a different extension (eg. *.*.sav or *.aus) you can
  instruct WinEdt to delete such files when the real file is saved
  or when WinEdt is closed. Such Autosaving can be combined with
  the existing one triggered by a timer (if you really want to be
  on a safe side)...

  - Support for 10 bookmarks per document with visual feedback:

    Before taking advantage of this feature you should increase
    the left margin in Options->Preferences| Shell Dialog to at
    least 14 (required for visual feedback)

    WinEdt implements the following macros that can be used to
    implement a custom Bookmark Keyboard interface of your choice:

      SetBookMark(Index: -1..9);
      GOTOBookMark(Index: -1..10, Center Line: 0..2,
                   Extend Selection [if not greater than]: 0..15);
      ClearBookMarks(All Documents: 0..1);
      BookMarkLineNumber(Reg: 0..9, BookmarkIndex: 0..9);

    If the Center Line Parameter is set to 2 then the line is
    centered only if it is not visible while 0 completely
    suppresses line centering...

    Once you set the bookmark, the corresponding line is marked by
    an icon displaying the index of the bookmark. Bookmarks are
    floating (ie. they move if the text is inserted or deleted
    anywhere previous to the marked position).

    By default the following Keyboard interface has been
    implemented:

      Ctrl+Alt+0..9:    SetBookMark(0..9);
      Ctrl+0..9:        GOTOBookMark(0..9,1,0);

    Currently no Shortcut assigned:

      SetBookMark(-1); - Use the first available Book Mark
                         (or 9 if all bookmarks are assigned)
      GOTOBookMark(-1,1,0) - Go to The Previous Bookmark (Backward)
      GOTOBookMark(10,1,0) - Go to The Next Bookmark (Forward)

    Note, however, that you can place these commands in an
    invisible Popup Menu and provide a double-shortcut scheme that
    you may be accustomed to from some other environment. To
    remove a bookmark you have to assign the same bookmark while
    you are in the marked line. In particular, marking the place
    twice adds and removes the bookmark...

    Alternatively you can assign the Macro ClearBookMarks to the
    shortcut of your choice.

    Bookmarks are preserved in WinEdt's Project file(s) if the
    corresponding option in the Preferences| Project dialog is
    enabled...

        Known Issue: Heavy Undoing and Redoing can result in
        misplaced bookmarks inside a paragraph (especially when
        auto wrapping is turned on). Solution: manually correct
        the bookmark after such undoing (if necessary).

  - In addition to Bookmarks, WinEdt maintains two different views
  of the same document. Although this functionality currently
  falls short of displaying split Windows with two different text
  segments it comes with a handy interface:

  The first panel in the status line displays the letter "A" or
  "B" for the primary and secondary view of the file. Clicking on
  this panel allows you to jump from one to another view with a
  single click. This can come in handy if you want to copy and
  paste some text segment into another position or if you are
  working on two places simultaneously. The view contains
  information about the selected text as well, and it is preserved
  in WinEdt's Project file (similarly to bookmarks).

    ChangeView(Flag: -1..2, Set View: 0..1, Center: 0..1);
      Flag:    -1 - don't change the current view
                0 - primary view (A)
                1 - secondary view (B)
                2 - toggle view

      Set View: 1 -  (set the alternative view to the current view:
                      makes sense with the flag -1)

      Center:   0 = never
                1 = only if not visible on the screen
                2 = always (if the line changes)

  If clicking on the Status Line Panel is not your preferred
  interface, you can assign a shortcut of your choice to the Macro
  Menu Item ChangeView(2);

  To make the first status line panel in an upgraded version of
  WinEdt visible, specify a non-empty string (eg. A) in the
  Appearance| Status Line Dialog.

    Remark: there is a good reason for WinEdt not yet
    simultaneously maintaining two different views on the screen.
    Such functionality will require an extra layer in WinEdt's
    screen management routines, and its implementation is not
    straightforward. A large chunk of complicated code will have
    to be rewritten, with lots of testing to be done before
    the result performs reasonably well on different platforms.
    For now I've decided against it but it remains on my to-do
    list...

  - The following macro has been introduced to add Line Numbers
  on the left of the text:

    ShowLineNumbers(Visible: 0..2);
    // Invisible=0 Visible=1 Toggle=2

  Line numbers are displayed on the screen for reference, but they
  are not inserted in the text.

   NB: WinEdt also has a very different command "Enumerate Lines..."
    which inserts line numbers in the text (or selected block).
    This command modifies the text and has to be used with care
    (only if you really want the numbers to be inserted in your
    document)... By default the command is in the Tools Menu.

  The displayed line numbers are highlighted as specified in the
  Highlighting| Columns dialog: the first enabled column scheme
  with the first and the last column specified as 0 is applied.
  Note that selecting a dark background can result in flickering
  when the page is scrolled (choose a light background color).

  Right-clicking on the left margin (in the child window) brings up
  a popup menu that can be used to Erase the bookmarks and Toggle
  the presence of the Line Numbers.

  - A new macro interface for Save All functionality allows more
  demanding users to customize this action:

    SaveAll(Confirm: 0..1, Focus: 0..1,
       Project Files Only: 0..1,
       New Documents: 0..1,
       Readonly Documents: 0..1);

  With Confirm Option the macro prompts with a All/Yes/No/Cancel
  confirmation dialog. The document to which the confirmation
  applies is (optionally) brought in the foreground. The Project
  Files Only options determine if the Save All applies only to the
  files that are currently in the Project Tree... The remaining
  two (optional) parameters enable the action for new and readonly
  documents (respectively).

  - Occasionally you may want to export a document in some other
  format while preserving the highlighting scheme as used by
  WinEdt. This can be done through a macro ExportDoc. Below is an
  example of usage of this macro that exports a document in HTML
  format. Note that this macro does not perform any conversion on
  the TeX<->HTML level (or anything of this kind); it simply
  exports ASCII text with highlighting attributes as used by
  WinEdt. The example below is best viewed in <pre>...</pre> or
  <tt>...</tt> HTML environment. The macro does not provide any
  header or trailer and the resulting file has to be embedded in
  an HTML document:

    // Export Highlighted Document in HTML Format
    //
    // If the filename is missing then Output File is considered:
    //   if previously opened with OpenOutput Macro
    //   in this case the file has to be closed with CloseOutput...
    //
    // RGB: 0 = HEX FF0000 (Red)
    //      1 = DEC 255 0 0 (Red)
    //      3 = PERCENT 100 0 0 (Red)
    //      4 = Fraction 1.00 0.00 0.00 (Red)
    //
    //        Color Delimiter has to be entered for 1..3:
    //        in out example ' ' is specified as RGB delimiter
    //
    // HTML_Export Translation Table should be defined to take care of:
    //
    //   """" -> "&quot;"
    //   " " -> "&nbsp;"
    //   "&" -> "&amp;"
    //   "<" -> "&lt;"
    //   ">" -> "&gt;"

    ExportDoc('%f.html', // Output File<>
      0,                 // HEX RGB Format<>
      '',                // RGB Color: Delimiter<>
      '">',              // RGB Color: Trailing String<>
      '<font color="#',  // RGB Color: Start + RGB<>
      '</font>',         // RGB Color: End<>
      '<i>',             // Font: Start Italic<>
      '</i>',            // Font: End Italic<>
      '<b>',             // Font: Start Bold<>
      '</b>',            // Font: End Bold<>
      '<u>',             // Font: Start Underline<>
      '</u>',            // Font: End Underline<>
      '<s>',             // Font: Start Strikeout<>
      '</s>',            // Font: End Strikeout<>
      '<br>',            // Line Break (or '' if inside <pre> ... </pre>)<>
      'HTML_Export');    // Translation Table: Char -> String!!!

    End;

  - Note that comments at the end of concatenated lines are now
  admissible if the line ends with <> (as in the example above).
  The line end >> strips the comment (if any) starting from the
  left margin while <> searches for the comment backward...

  - The Macros ExtractSettings and LoadSettings now have optional
  parameters that can be used to export and import only selected
  components.

    Parameters:

      Filename,
      Selected Items Flag: 0..1 // 1 = use the rest of parameters
        Errors: 0..1
        Wrapping: 0..1
        Comments: 0..1
        Word Count: 0..1
        Sounds: 0..1
        Static Data: 0..1

  The data has to be exported with the same parameters as used in
  the import function. Note that this allows (advanced users) to
  quickly change the Error Processing data (once they prepare and
  export alternative settings)...

______________________________________________________________________________


WinEdt 5 [Build 20001220 (v. 5.2)]
==================================

  - A bug in the "Create Personal Profile.edt" macro has been
  fixed:

      LetReg(2,"%@('HKEY_CURRENT_USER','Software', 'WinEdt', 'INIT');");

    should be

      LetReg(2,"%@('HKEY_CURRENT_USER','Software', 'WinEdt', 'INIT', ' ');");

  - A bug with non-existent (subsequently deleted or moved) files
  persisting in the file list is fixed...

  - A new macro:

   ChangeKeyboard(Iterate: -99..99; Flag: -1..1);
     Interface to Windows ActivateKeyboardLayout API function.

     See: ...Doc\Macros.txt for the full description.

  - Some changes to prevent problems during the first activation
  have been made to the "...Config\WinEdt-Env.edt" macro and the
  Configuration Wizard initialization code...


WinEdt 5 [Build 20001215 (v. 5.2)]
==================================

 - The problem with non-default Code Pages in the Spelling dialog
 has been fixed. Dialogs that use the "Custom Font" now use proper
 Script in the Combo and List Boxes. This problem was particularly
 obvious with the Spell Checking Suggestions which may not be
 displayed properly when the dictionary did not use the default
 ANSI encoding.

 To further address this problem the Spell Checking Dialog now has
 an option which determines if the Caption of the Suggestions
 dialog reflects the current selection. The font in the Caption
 cannot be customized and words encoded in non-standard scripts
 are not properly displayed in the Caption. In this case simply
 disable the Option "Use Caption"...

 The above changes only affect some users with non-Western version
 of Windows (eg. cp1250).

____________________________________________________________________

WinEdt 5 [Build 20001213 (v. 5.2)]
==================================

This is the official release of WinEdt 5 with enhanced settings
and additional configurations. The code for this release has
been patched with fixes for all reported problems encountered
in WinEdt 5.1 on different platforms.

Here is the summary of (major) new features and recent
additions:

    - New Macros:

        CreateFolders("Folder", CreatePath: 0..1);
        CopyFile("Source", "Destination", Overwrite: 0..1, CreatePath: 0..1);
        MoveFile("Source", "Destination");
        DeleteFile("Filename");
        RemoveDirectory("Directory Name");

        SetEnvVar("Name","String Value");
        SetWinEdtRegStr("String Name","String Value");

        SetRegKey("HKEY_...","Key1\Key2...","String Value");
        SetRegStr("HKEY_...","Key1\Key2...","String Name","String Value");
        RegDeleteKey("HKEY_...","Key1\Key2...","Delete Key Name");
        RegDeleteValue("HKEY_...","Key1\Key2...","Delete Value Name");

            Registry Handle must specify one of the following reserved
            handles (case sensitive):
                HKEY_CLASSES_ROOT
                HKEY_CURRENT_USER
                HKEY_LOCAL_MACHINE
                HKEY_USERS

    Some of these macros are used in the new Network installation
    macro to create local WinEdt folder(s) and copy the User
    Application Data.

      WARNING: Use with care (or if you are not experience don't
      use them at all in your custom macro scripts...)!

    - "Direct" configurations for MiKTeX and fpTeX have been
    reinstated in the Options| Configurations Dialog. These
    configurations are "safe" because they do not rely on BATCH
    files that may be problematic on certain platforms. If you are
    experiencing problems with the default configuration execute
    the "MiKTeX Direct!" command in order to update the accessories
    menu (the same goes for fpTeX users).

    - The Restore macros in WinEdt's Options| Configurations Menu
    now allow users to select the components that are to be
    Restored. This can come handy when you upgrade and want to
    keep your custom settings but may still want to upgrade
    certain individual menus to their new default contents and
    appearance... For more information consult the ".txt" files in
    WinEdt's Config folders...

    - A column of buttons with frequent actions (Replace, Global
    Replace, Add) has been reinstated in the Spell Checking Dialog
    (popular demand)

    - FindInString Macro is now much faster (especially for large
    strings).

    - A bug with the "Erase Working Files" Mode Filter is fixed
    (submodes were not handled properly!)

    - A bug with numeric expressions (parameters for macros) containing
    brackets is fixed.

    - The LetRegNum macro has been enhanced to allow basic
    formatting of the string:

      LetRegNum(StrRegister: 0..9, Num_Expression;
             Length: 0..99; Leading Zeros: 0..99);

    - The macro Mark(Scope) now traces the Bookmark after the
    paragraph is formatted (previous behavior resulted in
    oddities with some Macros in the Default Insert Menu).

    - The Macro IfFileExists("\"); returned true which prevented
    the Startup macro from detecting certain TeX installations
    (MiKTeX users should not be affected).

    - A Context Popup Menu in the Search/ Replace Dialogs now has
    an option for "Auto Scope" selection...

    - A bug (refresh oddity) with Showing Hard returns has been
    fixed.

    - A bug with missing %%PATH%% in Config\WinEdt-Env.edt has
    been fixed...

    - Help and the Doc folder have been seriously updated!

____________________________________________________________________

The following new macros have been implemented and are used in
the default setup:


 EraseWorkingFiles("Interface.edt","Startup Folder","Caption",Subfolders: -1..1);
   This macro displays a dialog box with a checkbox list of files
   to be deleted. The list is based on the macro script specified
   as the first parameter. The default "Erase Output Files" item
   in the Accessories Menu is defined as:

      EraseWorkingFiles("%B\Bin\Erase Working Files.edt",
        "%P","Erase Output Files",0);

   The default ("%B\Bin\Erase Working Files.edt") Interface looks like:

        // Erase Working Files Interface
        // =============================
        //
        // Modify the default in this value (if needed):
        //
        //      AddFileItem(Enabled: 0..1, "Description","Filename","Mode Filter");
        //
        // Use the macro EraseWorkingFiles to invoke a GUI for this interface:
        //
        //      EraseWorkingFiles("Interace.edt","Mode Filter","Caption", Subfolders: -1..1);

            AddFileItem(1,"DVI File","%N.dvi","TeX");
            AddFileItem(1,"PDF File","%N.pdf","TeX");
            AddFileItem(1,"PS  File","%N.ps","TeX");
            AddFileItem(1,"TOC Files","%N.toc","TeX");

            AddFileItem(1,"LOG File","%N.log","");
            AddFileItem(1,"TMP Files","*.tmp","");

            AddFileItem(0,"BAK Files","*.bak","");

            AddFileItem(1,"AUX Files","*.aux","TeX");
            AddFileItem(1,"BBL Files","*.bbl","TeX");
            AddFileItem(1,"BLG Files","*.blg","TeX");
            AddFileItem(1,"IDX Files","*.idx","TeX");
            AddFileItem(1,"IND Files","*.ind","TeX");
            AddFileItem(1,"ILG Files","*.ilg","TeX");
            AddFileItem(1,"GLS Files","*.gls","TeX");
            AddFileItem(1,"GLO Files","*.glo","TeX");
            AddFileItem(1,"LOF Files","*.lof","TeX");
            AddFileItem(1,"LOT Files","*.lot","TeX");

        End;

 AddFileItem(Enabled: 0..1, "Description","Filename","Mode Filter");
   Used in the Interface for EraseWorkingFiles...

   For more information Consult the Help in the Dialog.

____________________________________________________________________


 ShowCheckList("Caption", Width: 300..1000, Height: 250..1000);
   This macro displays a dialog containing a check-box list. The
   contents of the list and the actions taken depending  on which
   box is checked are user-definable with the macros that follow:

 ClearCheckList;
   Erase the checkbox list.

 AddCheckList("Check Box Caption", Checked: 0..1);
   Add a new item to the list. Up to 999 items are admissible.

 IfChecked(Index: 0..999, "Then Macro", "Else Macro");
   After the dialog has been executed an action depending on which
   box is checked can be specified.

   Example:
   ========

   For real examples check the macros _Backup.edt and _Restore.edt
   in WinEdt's ...Config\Default folder.

        // Update selected Main Menu Components

            Requires(20001122);

            ClearCheckList;

            AddCheckList('Main Menu (Complete)',1);
            AddCheckList('  Main Menu: Shortcuts',1);
            AddCheckList('  Main Menu: Alternatives',1);
            AddCheckList('  Main Menu: &File',1);
            AddCheckList('  Main Menu: &Edit',1);
            AddCheckList('  Main Menu: &Search',1);
            AddCheckList('  Main Menu: &Project',1);
            AddCheckList('  Main Menu: &Insert',1);
            AddCheckList('  Main Menu: &Tools',1);
            AddCheckList('  Main Menu: &Macros',1);
            AddCheckList('  Main Menu: &Accessories',1);
            AddCheckList('  Main Menu: &Options',1);
            AddCheckList('  Main Menu: &Window',1);
            AddCheckList('  Main Menu: &Help',1);

            // Show the selection
            ShowCheckList('Default Components',300,300);

            // Upgrade IfOK
            IfOK('','Exit');

            LetReg(0,'21');
            IfChecked(%!0+0,"LoadMenus('Main Menu.dat');",>
             !|>
                IfChecked(%!0+ 1,"AddMenus('Main Menu Shortcuts.dat')");>
                IfChecked(%!0+ 2,"AddMenus('Main Menu Alternatives.dat')");>
                IfChecked(%!0+ 3,"AddMenus('Main Menu &File.dat')");>
                IfChecked(%!0+ 4,"AddMenus('Main Menu &Edit.dat')");>
                IfChecked(%!0+ 5,"AddMenus('Main Menu &Search.dat')");>
                IfChecked(%!0+ 6,"AddMenus('Main Menu &Project.dat')");>
                IfChecked(%!0+ 7,"AddMenus('Main Menu &Insert.dat')");>
                IfChecked(%!0+ 8,"AddMenus('Main Menu &Tools.dat')");>
                IfChecked(%!0+ 9,"AddMenus('Main Menu &Macros.dat')");>
                IfChecked(%!0+10,"AddMenus('Main Menu &Accessories.dat')");>
                IfChecked(%!0+11,"AddMenus('Main Menu &Options.dat')");>
                IfChecked(%!0+12,"AddMenus('Main Menu &Window.dat')");>
                IfChecked(%!0+13,"AddMenus('Main Menu &Help.dat')");>
              |);

            Prompt('Selected menus have been successfully upgraded.',0,1);

        End;

____________________________________________________________________

WinEdt 5 [Build 20001115 (v. 5.2)]
==================================

    - The documentation and Help have been updated with the
    information relevant for this version of the program...
    The Help file now displays important information and examples in
    Courier New font which (hopefully) makes it much easier to read.

    - A default response for active strings \cite{} and \ref{}
    (used for cross referencing) has been modified to bring up a
    popup (resizable) form that allows keyboard interface to locate
    the label or tag in the list of collected items. The file(s):

       %B\Macros\Active Strings\Cite.edt
       %B\Macros\Active Strings\Ref.edt

     define the detailed behavior of the interface. The following
     macro function has been implemented (and is called in the above
     macro scripts) to allow this new functionality:

       GDIPopup("Page","Caption",
         Refresh,Sort,Track_onClick,Track_onDblClick,OK_onDblClick:0..1);

    Depending on the size of your project and the speed of your
    computer you may have to turn the Refresh in the default
    settings off if you find the response too slow...

    - A nice (mode-sensitive) GUI for "Erase Working Files"
    command has been implemented. The default Erase Working Files
    item in WinEdt's Accessories Menu is no longer defined as a
    call to the Batch file but calls the macro:

      EraseWorkingFiles("%B\Bin\Erase Working Files.edt",
        "%P","Erase Output Files",0);

    For more details consult the macro interface

      "%B\Bin\Erase Working Files.edt"

    which can be modified for your particular needs...

    - The spell checking dialog has been redesigned: It no longer
    has two rows of buttons (which are not a suitable interface
    for too many actions). Instead it provides a menu with
    pre-defined shortcuts for (grouped) actions. The dialog is now
    user-resizable.

        I know that some users might prefer buttons but having 10
        buttons stacked at the side of a dialog (plus a mysterious
        popup context menu with [hard-to-find] options) is a poor
        GUI design and the change is final. After a while you'll
        see that most common responses are Enter (Replace) or ESC
        (Cancel) and/ or Alt+R,G,I,A (for Replace, Global Replace,
        Ignore, and Add actions) and until you get used to them
        you can always choose the required action from the Actions
        Menu in the Dialog (using either a mouse or a keyboard
        interface).

    For consistency's sake the Complete Word dialog is now also
    user-resizable...

    - A major new feature (lacking in the official release of WinEdt
    5.1) is the ability of tracking the input files from [La]TeX's
    log file. This is now implemented. Thus MiKTeX users no longer
    have to use any "src*.sty" packages or non-standard input
    directives (such as \Input) in order to make WinEdt properly
    locate a sub-document containing an error...

    - The default shortcut for the Cancel command has been changed
    from ESC to Shift+ESC in order prevent unwanted cancellation
    of message boxes or modal dialogs that might have been
    displayed during the cancelled operation. Note that the
    execution of out-of-control macros and lengthy  operations
    that might have gone out of control can be Cancelled by
    pressing and holding the Shift+ESC key (rather than killing
    WinEdt)...

    - The Preferences| Editor Dialog has an option "Smart Line
    Centering". When enabled it prevents the Find, Replace, Spell
    Word, Complete Word and Paragraph/Up/Down commands to center
    the line if the line is already visible on the screen thus
    reducing the unwanted (and sometimes distracting) jumps...

    - The Preferences| Backup Dialog has two new Options pertaining
    to file sharing.

    - The "Save" command is now enabled for New documents (even if
    they are not modified). The "Save All" command gets disabled
    when no document needs saving. Note that the Option "Save All
    Applies to New documents" in the Preferences| Saving Dialog
    affects the saving of new documents with the Save All command.
    By default it is disabled (in 5.1 it does not work properly
    when enabled and the new documents are usually exempt from
    saving regardless of the above preference- this has now been
    fixed)...

    - A (tricky) bug with files being removed from the File List
    when the Gather interface was collecting items in non-opened
    files is fixed.

    - The "EDT" mode for writing WinEdt macros (highlighting,
    spelling, and code-completion) is now included with the
    default settings together with an enhanced and updated HTML
    mode.

    - WinEdt 5.2 is MiKTeX 2.x aware. It also provides basic
    configurations for fpTeX (web2c) and YandY TeX (see the
    Options| Configurations Menu)...

    - The default settings provide an interface to many PDF
    conversion utilities (as well as MiKTeX's TeXify utility that
    can compile and process documents as required)... An interface
    to AMS TeX is also provided (amstex is included in MiKTeX 2.0).

    - The Options Menu provides (macro) items that allow you to
    associate WinEdt with certain file types. There is also a set
    of commands (macros) that install TeX Icons (making TeX feel
    more at home on Windows platform). Read the associated ".txt"
    files in the Options Menu for more details...

    - Changes to the Startup macro make it easier to fix and
    diagnose problems related to the location of TeX accessories
    and the value of the PATH environmental variable.

    - Network and Multi-user configurations have been automated and
    WinEdt can create personal profiles for users transparently.
    Read the file 0Readme.txt in WinEdt's Network folder for more
    information on such installations.

    - Numerous enhancements to the default settings and WinEdt's
    Menu and GUI have been implemented for this release (eg. a more
    consistent use of menu icons and slightly redesigned tool bar).

    - The Configuration Wizard (see WinEdt's Help Menu) now
    provides more detailed diagnosis and instructions when certain
    TeX components cannot be detected...

    - The default settings define

      [Exe("%B\Macros\GetMode.edt")]

    as the MDI Open Macro event handler in the Preferences| Events
    dialog. This macro determines the mode of the document from
    the comment in the first line (if present)- emacs convention.
    For more details and examples check out the

      "...Macros\GetMode.txt"

    document.

    - Samples in the Macros folder have been extended and
    updated...

    - The Menu Setup dialog now allows an option "Invisible Item"
    that can be used to make any item invisible (hardly ever
    needed but it's there just in case).

    - WinEdt now comes with a larger English dictionary containing
    US and UK spelling conventions (before it was only available
    as a separate download). Check the file English.txt in WinEdt's
    Dict\English folder...

    - The filters for enabling accessories have been changed
    (hopefully for the better but let me know if you experience
    problems): still better make changes to the "Requires File"
    filter in the Menu Setup and let me know why the default
    settings were not acceptable for you...

---------------------------------------

The following new macro functions have been implemented since
the release of WinEdt 5.1:

    SetErrorFlag(isError: 0..2);
    GDIReset;
    GDISort;
    GDICopy;
    LoadPrint("Filename");
    ExtractPrint("Filename");
    QuitWinEdt;
    SetSaveWinEdtConfig(AutoSave_onExit: 0..1);
    ShowHardReturns(Visible: 0..2);
    GDIPopup("Page","Caption",Refresh,Sort,Track_onClick,Track_onDblClick,OK_onDblClick:0..1);
    SetSort(Ascending,Case_Sensitive,Ignore_Length,Remove_Duplicates: #-1..1);
    SaveSort;
    RestoreSort;
    EraseWorkingFiles("Interace.edt","Mode Filter","Caption",Subfolders: -1..1);
    AddFileItem(Enabled: 0..1, "Description","Filename","Mode Filter");

Additional parameters for the Run macro:

    Run("Command Line","Startup Directory",
      Maximized,Background: 0..1,"Caption",Focus,Append: 0..1);

Additional parameters for the Open macro:

    Open("Document Name", Readonly:-1..1, Update: -1..1, "Document Mode");

____________________________________________________________________


WinEdt 5 [Build 20000415 (v. 5.1)]
==================================

April 2000:
===========

The alpha and beta versions of the next major release of WinEdt
have been around for over a year under the name WinEdt 2000 or
WinEdt2K. Unfortunately, this name caused WinEdt to be
frequently mistaken for another program: programmers code
editor WinEdit 2000. The misunderstandings were made even more
frequent because of the similarity of the www address:

    WinEdt <> WinEdit    and    winedt.com <> winedit.com !!!


After quite some feedback from WinEdt's Mailing List the
decision was made to simply call the next release with its
version number (rather than any suffix such as 2000, 2K, or +).
The old version enumeration method (inspired by Knuth's method
of labeling versions of TeX with digits of pi) was to add the
next digit of sqrt(2) and use the approximation as WinEdt's
version identifier. The current release would be 1.4142.
However, this method is getting a bit confusing since many
users fail to recognize the significance of the last digit(s).
That's why a "standard" version enumeration is being adopted
from here on. This being the fifth major release of WinEdt, the
program is now officially called "WinEdt 5". The Build and
Version number (v. 5.1) as displayed in the About Dialog
identifies the date when the program was compiled and it could
be used to unambiguously identify your instance of the program.
This information can now be copied from WinEdt's About Dialog
into the clipboard (use the popup context menu responding to
the right-mouse clicks on the Build Edit control in the About
Dialog!).

____________________________________________________________________


Build 20000415:
===============

Minor default setup problem with the Exit procedure has been
fixed.

IfOK macro now detects the status of execution for Delimiter
Match and most other editor commands (I did not extensively
test it-- hopefully it works)...

A (rare) problem with Focusing WinEdt when Windows Open Dialog
was visible and a document was opened through the explorer
interface (right-click+popup context menu) is fixed. The
problem was not commonly observed because most users
double-click on the selected files in the Open Dialog and only
occasionally would one use the explorer functionality in the
Open Common Dialog...

____________________________________________________________________


Build 20000413:
===============

Minor improvements to the default settings and documentation...

The Help File has been updated and re-compiled...

The file Macros.txt has been updated with accurate information
pertaining to the current state of WinEdt's Macro Language...

A bug with the automatic update of externally modified files
has been fixed.

New Macros:

  SaveFind;
  RestoreFind;

can be used to save and restore the Search attributes. The
active strings in HTML Mode have been modified to restore
previous Search attributes after performing a backward RegEx
search...

If the folder is specified in

  Exe("Macro File Name", "Default Directory");

the default folder previous to the execution of the macro is
restored before the macro returns. Thus the configuration
macros in WinEdt's Options Menu no longer change your working
directory.

The default settings now have the Option "Ignore Metrics" in
the context popup menu corresponding to the Preferences| Font
Dialog enabled. This in some cases speeds up the screen
refreshing and should not cause any problems if you are using
truly monospaced font. If you observe any screen refresh
oddities disable this option and let me know what font you are
using in WinEdt.

____________________________________________________________________


Build 20000405:
===============

Some (minor) fixes recently discussed on the mailing list...

A few enhancements to the default settings (new menu images)...

WinEdt's Gather Interface can now collect items in the files
belonging to the project tree without opening all the
documents. See "...Doc\Gahter.txt" for more details on the new
functionality, the purpose of bullets in front of the collected
items and a few examples...

The default settings in this version illustrate how one can
quickly change the font through a pre-defined menu commands.
There is a sample Options| Font Menu  with a few predefined
fonts and the instructions ("...Config\Fonts\0Readme.txt") on
how to prepare more...

The pdf macros now use DDE to close all the documents in the
Acrobat Reader to prevent the file access conflict between
pdflatex or dvipdfm and the AcroRd32.

The following new Macros have been implemented:

  GetLine(Reg: 0..9, Line: 1..16000000);
    Store the line in the current document into the specified
    register.

  GetTree(Reg: 0..9);
    Stores the current Tree into the String. Can be used to iterate
    through the project files and perform tasks on them... Example:
       *"C:\Program Files\WinEdt\Samples\Thesis\Thesis.tex"
       * "C:\Program Files\WinEdt\Config\ABS.tex"
       * "C:\Program Files\WinEdt\Config\ACK.tex"
       * "C:\Program Files\WinEdt\Config\T0.tex"
       * "C:\Program Files\WinEdt\Config\T1.tex"
       * "C:\Program Files\WinEdt\Config\T2.tex"
       * "C:\Program Files\WinEdt\Config\T3.tex"
       * "C:\Program Files\WinEdt\Config\xBib.bib"
       * "C:\Program Files\WinEdt\Config\Thesis.bbl"

In the Project| Events Dialog there is now a new event handler:

  MDI Open Document

New macros to set the event handlers have been implemented:

  SetOnMDIOpen(");
  SetOnMDIActivate(");
  SetOnStartup(");
  SetOnExit(");
  SetOnPrjOpen(");
  SetOnPrjClose(");

For example, by default the Startup Macro is set to

  [Exe('%B\Config\Startup.edt')]

which in turn defines

  SetOnExit("[Exe('%B\Config\Exit.edt')]"); // Cleanup on Exit...

____________________________________________________________________


Build 20000329 contains a few fixes:
====================================

Some (minor) fixes recently discussed on the mailing list...

There are now 250 (rather than 100) available buttons for the
ToolBar and Menu Images. By default only the first 100 are
used.

Better delimiter matching for toggled delimiters such as $...$
in TeX documents.

Custom Translation Tables for Sorting...

____________________________________________________________________


Build 20000319 contains a few fixes:
====================================

An attempt to fix recent problems with the Scroll Wheel has
been made (it appears that an old bug in Delphi's VCL has
returned to haunt me). The Option for "Custom Wheel Response"
has been moved to the Appearance| Advanced Dialog and the Wheel
should now work regardless of this option if you have a recent
enough mouse driver or else the Custom Response should make the
Wheel Work with older drivers. Those that reported problems
please let me know...

Also the Refresh oddity when switching between maximized MDI
windows by pressing Tabs should now be fixed.

The Preferences| Save Dialog now hosts most of the options
pertaining to Saving (which were before scattered around for
historic reasons and many users were not able to find them).
Help update pending...

The Panels that host docked controls have now been modified so
as to prevent users from shrinking them to the size 0 (which
was causing problems and was puzzling a few users).

____________________________________________________________________


Build 20000316 contains a few enhancements and fixes:
=====================================================

WinEdt now provides a custom response to the mouse Scroll Wheel
(if required due to an obsolete device driver).

WinEdt now allows language sensitive sorting (including custom
compare tables).

A bug with the SendMessage macro (it used to call the
PostMessage function) is now fixed and the new PDFLaTeX.edt
macro should now work on all versions of Acrobat Reader...

A bug with the (NOT) Required File field has been fixed: useful
for the CS-RCS setup...

The contents of the Preferences Dialog has been slightly
re-arranged (hopefully for the better) based on the responses
from a few users that could not find certain options. The
appearance of (custom) buttons and bitmaps in dialogs has been
improved...

The Context Menu corresponding to the tabs now contains a
"Close File" command that can be used to close any document by
right-clicking on its Tab and choosing this menu command...

The Select Paragraph Command has been modified to select
indented paragraphs (even when the option "Format Indented
Lines" is disabled). This change also affects the command
"Format Paragraph": after thinking about it for a while I
realized that this change makes sense...

____________________________________________________________________


Build 20000309 contains two major bug fixes:
============================================

- Changing the "Hot Track" or the "Custom Colors" property of
the Document Tabs from the Context Popup Menu resulted in
disabled and invisible Tabs (and a consequent crash when
exiting WinEdt): fixed!

- Horizontal Scroll Bar in documents was not working at all:
fixed!


Both Bugs were introduced in the Build: 20000308...

____________________________________________________________________


Build 20000308:
===============

The following problems have been addressed for for this Build:

- A (critical!) bug with scrolling in docked Gather form is
fixed

- An error in macros for insertion of matrices and arrays have
been fixed (a missing ")"),

- WinEdt now allows more than one row of document tabs. There
is a new option in the Appearance| Tabs Dialog that controls
this behavior. The Tab control gets automatically re-sized.
Although with 50+ document tabs the control produces some
visual flickering when adding or removing new document tabs
(depends on your hardware) it can still come handy for users
that want direct access to a few dozen opened files (assuming
they have a large enough screen to use the upper space for 3 or
4 rows of document tabs).

- Most WinEdt's Modal dialogs now center with respect to the
Main Form rather than the screen. Also the "Parent Font"
inheritance have been disabled in some dialogs to prevent odd
alignment of buttons in dialogs as experienced by users that
use larger default fonts...

- A minor problem with rearranging the tool bar and dropping
the buttons on the left edge has been fixed. This might have to
do with the two reported spaces on the left of the first
button...

- In the Syntax Highlighting Dialog -> Columns, the heading
says Highligted columns (missing h): fixed...

- A bug with the ghost caret after scrolling by clicking on the
scroll bars is fixed.

- The email and www field in WinEdt's About box now respond to
clicks (made possible by the macros below and the ShellExecute
macro function)...

- The following new macro functions have been implemented:

  SetFolder("Path");
  SetEnvVar("Name","String Value");
  SetRegKey("KEY_...","Key1\Key2...","String Value");
  SetRegStr("KEY_...","Key1\Key2...","Strung Name","String Value");
  SetWinEdtRegStr("String Name","String Value");

  SendMail("Subject","Text","Recipients","Attachments");

  For example:
  ============

    SendMail('Test Message',"Attached is WinEdt.txt",>
      "WinEdt Team|support@winedt.com","%F|WinEdt.txt");

    You can specify more than one recipient or attachment
    (separate up to 1024 items by semi-columns ;)

    The second optional filename, following the bar |, is the one
    that the recipient sees...

    All parameters are optional and can be entered or modified
    once the e-mail client is started.

    If a recipient is preceded by "*" or "?" the massage is CC'd
    or BCC'd (respectively) to that address:

      "WinEdt Team|support@winedt.com;*Alex|alex@winedt.net"


IMPORTANT: The MAPISendFunction (and the rest of the MAPI
interface on which the default WinEdt's Send Mail command and
macro rely) does not work unless the Windows Registry contains
the string MAPI with value "1". This can be checked and set
from within WinEdt with:

  // Returns the value 1?
  %@("HKEY_LOCAL_MACHINE","SOFTWARE\Microsoft\Windows Messaging Subsystem","MAPI");

  // Sets the value to 1
  SetRegStr("HKEY_LOCAL_MACHINE",>
    "SOFTWARE\Microsoft\Windows Messaging Subsystem", "MAPI", "1");

If WinEdt's Send Mail Command fails and WinEdt detects the
absence of the above Registry Entry the user is prompted to
allow WinEdt to add the value and restart the program. The lack
of this registry key indicates that your email client may not
support MAPI in which case the above fix won't make any
difference. However, in some cases it is possible that although
your email client has a sufficient MAPI functionality to allow
WinEdt to send email messages the registry was not
appropriately modified during its installation. The above fix
will enable the MAPI functionality (assuming that it is
supported by your email program). For example, the registry
entry may have been deleted when you uninstall some other email
client that you are not using (eg. Outlook Express)...

____________________________________________________________________


WinEdt 5 [pre-release, beta and alpha history (v. 5.0)]
=======================================================

The alpha and beta versions of the next major release of WinEdt
have been around for over eight months under the name WinEdt
2000 or WinEdt2K. Unfortunately, this name caused WinEdt to be
frequently mistaken for another program: programmers code
editor WinEdit 2000. The misunderstandings were made even more
frequent because of the similarity of the www address:

    WinEdt <> WinEdit    and    winedt.com <> winedit.com !!!


After quite some feedback from WinEdt's Mailing List the
decision was made to simply call the next release with its
version number (rather than any suffix such as 2000, 2K, or +).
The old version enumeration method (inspired by Knuth's method
of labeling versions of TeX with digits of pi) was to add the
next digit of sqrt(2) and use the approximation as WinEdt's
version identifier. The current release would be 1.4142.
However, this method is getting a bit confusing since many
users fail to recognize the significance of the last digit(s).
That's why a "standard" version enumeration is being adopted
from here on. This being the fifth major release of WinEdt, the
program is now officially called "WinEdt 5". The Build and
Version number (v. 5.1) as displayed in the About Dialog
identifies the date when the program was compiled and it could
be used to unambiguously identify your instance of the program.
This information can now be copied from WinEdt's About Dialog
into the clipboard (use the popup context menu responding to
the right-mouse clicks on the Build Edit control in the About
Dialog!).

____________________________________________________________________

The Build: 20000309 contains two major bug fixes:
=================================================

- Changing the "Hot Track" or the "Custom Colors" property of
the Document Tabs from the Context Popup Menu resulted in
disabled and invisible Tabs (and a consequent crash when
exiting WinEdt): fixed!

- Horizontal Scroll Bar in documents was not working at all:
fixed!


Both Bugs were introduced in the Build: 20000308...

If you've installed WinEdt 5 [Build: 20000308] you can only
download the basic Patch and Upgrade to WinEdt 5 and unzip the
archive over your existing WinEdt 5 installation!

____________________________________________________________________


Below is a complete history of additions and fixes since the
release of WinEdt32:

What's new since release 1.414 19-8 (October 1998)?
===================================================

May 1999:
---------

Bug Fixes:

  - access violation with entering the Main Document directly in
  the project setup dialog...
  - infinite loop with certain "Replace All" regular expressions
  has been fixed
  - a bug with saving documents even when they are not modified
  when launching a utility (such as LaTeX) is fixed...
  - a rare problem with scroll bars on Win95 has been reported to
  be fixed (scroll bars were not visible in child windows and the
  page down command caused an access violation)
  - over 20 reported (minor) oddities and bugs has been fixed
  (hopefully without introducing any new problems)

New features:

  - Most dialogs are now equipped with Buttons and Tool Bars that
  provide alternative access to the commands available in Context
  Popup Menus. Many users were not comfortable with the Context
  Menus (right mouse clicks) and additional interface hopefully
  makes the program more intuitive....

  - Project Management: WinEdt now allows you to to save currently
  opened files and desktop to "*.prj" files. The file-list is no
  longer stored in WinEdt.ini but in the project files that can be
  opened, created and restored through the newly introduced
  Project Management Commands. By default these commands are
  placed at the bottom of the project menu. Furthermore, WinEdt
  stores up to 10 recently opened projects in Windows registry and
  optionally appends them to the project menu... Those users that do
  not care for multi-project functionality can continue to work as
  before. Their "Default" project file-list is stored in
  WinEdt.prj (making future upgrading procedure easier if you
  decide to inherit the new default settings while preserving your
  file-list)...

    As a consequence of the new functionality a Project Setup
    Dialog has been redesigned to include only information
    pertaining to the current project. To accommodate the rest of
    its ex-contents (Templates, etc...) the Preferences Dialog
    has been expanded.

  - Project File can be accessed through the following parameters:
      %!f - Project File
      %!p -  ... path
      %!n -  ... name
      %!t -  ... type (usually .prj)

  - New variable:
  %!l    Paragraph Number
         In Soft Wrapping Mode this parameter should be used for Search
         because that's how TeX sees your wrapped paragraphs/ lines!
         Otherwise this value coincides with the Line Number.
         Similarly SelPar should be used for SoftMode Inverse
         Search (again it acts as SelLine otherwise).

  - Status Line contains two optional custom panels that can
    display any combination of %X parameters. In the Appearance
    Dialog you can specify the contents and visibility of these
    panels and the macro response "on click". In particular,
    specifying %!n displays the project file and
    [CMD("Open Project...")] is a possible macro response on
    clicks.

  - Split View: Splitters can be used to align certain controls on
  the left, right or bottom of the client area. In particular, the
  Project Tree and Gather Form which were previously displayed as
  "Stay on Top" forms can now be aligned on the side of the client
  Window and you can have them opened all the time (depending on
  the size of your monitor). The same goes for the Error Search
  Dialog which can be aligned at the bottom of the screen. To
  activate this alternative behavior please check the options in
  the Appearance Dialog (previously "Tool Bar Appearance").

  - Record and Play: You can start a Macro recorder to record a
  sequence of (simple) actions and then have them performed on the
  rest of the document. This can come handy when you want to
  perform a repetitive task on a large block. Macro recorder does
  not store your actions as a sequence of "low-level" shortcuts
  but converts them in a simple Macro Script. This script can be
  edited, and saved or used as a start point for a more
  sophisticated macro containing "intelligent" loops and
  conditional "statements". Recorder is implemented as a special
  GUI control aligned on the right in the client area. Buttons can
  be used to Stop/ Continue the recording session, play/ load/
  edit or save the recorded macro, etc... The recorded script is
  constantly being updated in the visible list box. Try it it is
  quite intuitive!

  A new Main Menu Item (Macros) has been introduced to accommodate
  the Macro recording commands. You can also save frequently
  performed recordings and define them as Macro menu Items in the
  new menu...

  - In the Appearance Dialog you can now specify the use of
  the background color for text. If this option is enabled it is
  possible to see the "trailing spaces" which are otherwise
  invisible. The color specified as the background for the custom
  color #15 in the Preferences| Colors Dialog is used for this
  purpose...

  - In the Appearance Dialog you can now specify the ".wav" files
  that can be used for sound effects when WinEdt displays
  different messages. By default the sounds assigned through the
  Windows control panel are used but if you have your favorite
  effects on your system you can now use them. Note that you
  can also disable (certain or all) sound effects...

  - In the Appearance Dialog you can now specify if the names in
  Document Tabs should include the filetype or not.

  - The Appearance Dialog now allows you to specify the size of
  the font used in the Status Line and Document Tabs as well as
  the format of the Date and Time that is optionally displayed in
  the Status Line. The GetDate macro function now allows you to
  specify the format of the date (see the description in
  Doc/Macros.txt for the syntax of date and time specification).

  - A new ability to define the lines that should not be
  formatted: in Settings Dialog you can now specified strings that
  prevent wrapping of a line if they are positioned at the end of
  line or anywhere inside. For example \\ and \\? prevents
  wrapping of lines ending with \\ or \\[1pt]. This extends the
  previous functionality where only the beginning of a line was
  examined to determine if a line should serve as a "paragraph"
  break. This is a minor enhancement to WinEdt's wrapping (the
  rest will be coming soon)...

  - Highlighting attributes now allow the specification of the
  background color combined with the font color and attributes. It
  is also possible to highlight certain columns (eg. for Fortran
  Mode)...

  - Highlighting in Modes with plenty of reserved words has been
  accelerated by the factor of 10-20 times. If you've experienced
  annoying visual flickering effects related to highlighting of (a
  few times hundred) reserved words you'll notice a drastic
  reduction in flickering...

  - Switches now allow a specification of two strings. This makes
  it possible to highlight environments such as
    \begin{equation}
       ....
    \end{equation}
  by specifying "\" as the filter set for Begin and End and use
  "begin{equation}" and "end{equation}" as the string
  delimiters...

       It has been suggested (and admittedly it makes sense) that
       Regular Expressions should be allowed in the Highlighting
       Schemes and Active Strings: there are a few problems
       related to the speed of WinEdt's RegEx evaluation and
       representation which would significantly affect the screen
       flickering and the memory consumption. I'll do something
       about it in one of the future releases...

  - Keyboard translation now allows "String->String" table
  (very rarely needed)

  - In Preferences| Font Dialog you can specify two different
  shapes for the Caret (one for the Insert Mode and the other one
  for Overwrite).

  - A different comment can be defined for each Mode (eg. % for TeX
  and "//" for C, etc...).

  - The "Word Count" Command has been implemented...

  - The "Send Mail" Command has been implemented...

  - The "Next/ Previous" Difference Command can now Highlight the
  position where a difference is found and can skip through the
  difference until the next identical lines are encountered. See
  the new options in the Compare Documents Dialog...

  - The Replace Dialog's Context Popup Menu (click with the right
  mouse button in dialog's client area) has a new Option: "Quick
  Replace". When this option is enabled the screen refresh is
  turned off in case of multiple replacement with no confirmation
  ("Replace All"). This can make the replace MUCH faster...

  - Environments for which spell checking is enabled or disabled
  can now be nested. For example, in TeX Mode it is now possible
  to configure Spell environments as follows:
     $$
       zzz not checked
       \text{zzz check here $zzz don't check$ zzz check again}
       not checked zzz
     $$

  - In Dictionary Manager there is a new set of options previously
  only available through the Context menu in the Word Suggestions
  Dialog. A new option "Center Lines Containing Misspelled Word"
  determines whether or not the line containing a word for which
  suggestions or completions are to be compiled is centered in the
  screen (some users found centering disturbing: - they should
  disable this option).

  - The Option "Immediately Execute Global Substitutions" (in
  Dictionary Manager| Options Dialog) instructs WinEdt to perform
  the global substitution for the whole document when the
  suggestions dialog was displayed in response to the misspelled
  word. A bug with capitalization and multiple global
  substitutions has been fixed...

  - A new String parameter
    %[/][~]("<filename>");
    Prefix is applied after the string parameter is expanded!
    This makes it possible to pass the short filename of files
    associated with the Main file to 16-bit accessories (eg.
    DVIWIN).

  - A new String %\ expands to CR+LF  (End of Line)
    Can come handy in the Prompt macro function if you want to
    control the line breaks in the resulting Message box...

  - Strings Parameters for WinEdt Macro functions can be enclosed
  between any of the following characters (serving as quotes):
    ",',`,:,*,|
  This (somehow) eliminates the need to use repeated quotes for
  strings inside strings...

  - Three special menus (File, Windows, and Project) allow you to
  append the list of recently opened Files, Documents and
  Projects. If such menu ends with an "open" submenu that is not
  ended using the "Return" menu Item then the lists are placed at
  the bottom of such submenu rather than the menu itself. This
  makes it possible to "hide" such lists should you wish to do
  so...

  - The Preferences| Saving Dialog now has a series of Options
  that determine the way WinEdt detects (the change in) the
  Readonly Status of any of its opened documents. This options
  should be particularly useful in combination with RCS (Revision
  Control System) packages for WinEdt. For more information on RCS
  see the link on WinEdt's Downloads Page.

  - The field "Requires File" in Menu Setup now allows you to
  specify which files should and which files should not
  exists in order for the Menu Item to be enabled:

        ? OR
        * AND
        | AND NOT
        / OR NOT

      %P\%N.ps?%P\%N.eps  -- enabled if either .ps or .eps file exists
      %P\%N.ps*%P\%N.eps  -- enabled if both .ps and .eps files exist
      |%P\%N.ps           -- enabled if .ps doesn't exist

    The symbols "?*|/" above were chosen because they are not
    admitted in filenames and should suffice to specify any
    combination of such filters that may arise in practice...

  - It is now possible to specify the translation applied to the
  Error Log File (see Settings| Errors Dialog).

  - A new command line qualifier -V has been introduced:
         -V Starts WinEdt in Virgin Mode:
           The last project is not automatically opened and no
           files are immediately restored

           If you want to start WinEdt in such mode when browsing
           your computer with Windows Explorer set the Open action
           associated with file types you want WinEdt to Open as:

              ...\WinEdt.exe -V "%1"

           This is done in Windows Explorer| View| Folder
           Options| File types...

       To offer a wider range of options WinEdt now implements the
       following qualifiers:

                -P starts WinEdt with the Default Project

                -N starts WinEdt with a new project

                -0 do not restore previously opened documents

       For example if you want to do some non-project related editing/
       browsing but would like WinEdt to keep the history of opened files
       you can start WinEdt with -P -0 (rather than a more radical -V).

       In fact one may prefer to always start WinEdt with -P -0 and then
       choose a project from the list of recently opened projects (only
       if one is in the working mood:-).


New Commands
============

  Word Count
  Send Mail

  New Project
  Open Project...
  Save Project
  Save Project As...
  Close Project
  Quit Project

  Record Macro
  Play Macro Once
  Play Macro
  Repeat Macro
  Repeat Last Command

  Insert Command
  Insert Macro
  Insert Parameter

  Go To Screen Top
  Go To Screen Bottom

The commands:

  Upper Case
  Lower Case

were incorrectly defined with 2 spaces between words. This has
been corrected. However, if you have a macro using eg.

  CMD('Lower  Case');

it will no longer work in the new version. You have to remove
the extra space (which was a source of plenty of confusion in
the previous version).


  - WinEdt16 allows you to define GUI and "List" interfaces:
  Dialogs containing custom buttons or List Box Items associated
  with macro commands. In WinEdt32 the GUI dialogs were replaced by
  the GUI Page Control. However, occasionally a need for List Box
  Interface (providing you a selection of predefined macros) may
  still arise. That's why the "List" interface functionality has
  been re-introduced. If you didn't miss such functionality you're
  probably not interested in it...

    Simple Example (of no practical use):
    =====================================

        Interface("New Document");
        //Caption

         Item("New","CMD('New')");
            // List Item
            // Macro to be executed

         ShowList(1,1,"","");
           // Execute on DblClick
           // Close on DblClick
           // Macro to be executed on OK
           // Macro to be executed on Cancel
           // Macros are redundant if DblClick response is enabled
           // Something like:  "Do('%%?')" could be specified as an OK
           // Action if the first parameter is 0 (%? expands to the
           // macro associated with the selected item

        End;


New or extended macros:
=======================

 AddDictionary("Name","File","Filter", Enabled,Load,Save,Add,Completion: 0..1);
  Add the dictionary to the list of WinEdt's Dictionaries in the
  Dictionary Manager Dialog. If the dictionary exists then it
  updates its properties.

 RemoveDictionary(");
  Removes the specified dictionary from the list of dictionaries.

 RefreshAll;
  Refreshes all document windows (may be necessary after adding a
  dictionary).

 ResetGDI("Mode");
  Makes sure that GDI (Gather) control displays tab pages relevant
  to the current mode. One can optionally specified mode to
  suppress current value which depends on your main document or
  current document...

 Exe("Macro File Name", "Default Directory");
   Opens the specified Macro File and interprets it as a sequence of
   WinEdt's Macro Commands (see ".edt" file in Macros Directory).
   If the filename is empty the Open dialog starts in the
   specified Default Directory allowing you to choose the file
   from the existing macro scripts...

 GetDate(StrRegister: 0..9; "Format");
   Now allows you to specify format of the output string.

       This macro provides an interface to FormatDateTime function.
       The function takes current date and time and formats it as
       specified by the user in the "Format" parameter. The results is
       available in the local register %!0..%!9. If the Optional
       "Format" parameter is omitted or left empty then the function
       returns the previous value which (in English) is equivalent to
       the format:

            'dddd, mmmm d, yyyy "at" hh:nn'

            Tuesday, September 1, 1998 at 16:49

        FormatDateTime formats the date-and-time value using the
        format given by Format. The following format specifiers are
        supported:

        c       Displays the date using the format given by the
                ShortDateFormat global variable, followed by the time
                using the format given by the LongTimeFormat global
                variable. The time is not displayed if the fractional
                part of the DateTime value is zero.

        d       Displays the day as a number without a leading zero (1-31).

        dd      Displays the day as a number with a leading zero (01-31).

        ddd     Displays the day as an abbreviation (Sun-Sat) using the
                strings given by the ShortDayNames global variable.

        dddd    Displays the day as a full name (Sunday-Saturday) using
                the strings given by the LongDayNames global variable.

        ddddd   Displays the date using the format given by the
                ShortDateFormat global variable.

        dddddd  Displays the date using the format given by the
                LongDateFormat global variable.

        m       Displays the month as a number without a leading zero (1-12).
                If the m specifier immediately follows an h or hh
                specifier, the minute rather than the month is
                displayed.

        mm      Displays the month as a number with a leading zero (01-12).
                If the mm specifier immediately follows an h or hh
                specifier, the minute rather than the month is
                displayed.

        mmm     Displays the month as an abbreviation (Jan-Dec) using the
                strings given by the ShortMonthNames global variable.

        mmmm    Displays the month as a full name (January-December) using
                the strings given by the LongMonthNames global variable.

        yy      Displays the year as a two-digit number (00-99).

        yyyy    Displays the year as a four-digit number (0000-9999).

        h       Displays the hour without a leading zero (0-23).

        hh      Displays the hour with a leading zero (00-23).

        n       Displays the minute without a leading zero (0-59).

        nn      Displays the minute with a leading zero (00-59).

        s       Displays the second without a leading zero (0-59).

        ss      Displays the second with a leading zero (00-59).

        t       Displays the time using the format given by the
                ShortTimeFormat global variable.

        tt      Displays the time using the format given by the
                LongTimeFormat global variable.

        am/pm   Uses the 12-hour clock for the preceding h or hh
                specifier, and displays 'am' for any hour before noon,
                and 'pm' for any hour after noon. The am/pm specifier
                can use lower, upper, or mixed case, and the result is
                displayed accordingly.

        a/p     Uses the 12-hour clock for the preceding h or hh
                specifier, and displays 'a' for any hour before noon,
                and 'p' for any hour after noon. The a/p specifier can
                use lower, upper, or mixed case, and the result is
                displayed accordingly.

        ampm    Uses the 12-hour clock for the preceding h or hh
                specifier, and displays the contents of the
                TimeAMString global variable for any hour before noon,
                and the contents of the TimePMString global variable
                for any hour after noon.

        /       Displays the date separator character given by the
                DateSeparator global variable.

        :       Displays the time separator character given by the
                TimeSeparator global variable.

        'xx'/"xx" Characters enclosed in single or double quotes are
                displayed as-is, and do not affect formatting.

        Format specifiers may be written in upper case as well as in lower
        case letters--both produce the same result.

 StartWorking("Panel Text");
   Changes the shape of the cursor to hour glass and displays the
   specified string parameter in the status line (user-friendly
   macros).

 StopWorking;
   Restores the Cursor Shape and clears the working string in the
   status line.

 MatchDelimiter(SelectionMode: 0..15, Delay: 0..1);
   A Macro interface to the Match Delimiter Command with optional
   parameters. The Selection Mode should normally be 1 and the Delay
   can be normally turned off inside macros (but not necessarily
   in the interactive version of the command where one might be
   interested to see what exactly is being matched).

 Beep(#0..4);
   Displays one of the sounds as defined in Appearances| Sound
   Dialog (0=Beep, 1=Information, etc...)

 SelPar(Paragrpah: 1..16000000, SelMode: 0..15);
   The same as SelLine except in the Soft Wrapping Mode where it
   selects the "real" line (as seen from the outside) which when
   wrapped may appear as a paragraphs.

 McrLoadFromFile("FileName.edt");
   Loads a pre-existing macro from a file to the Record and Play
   control (Open dialog if the string is empty).

 McrSaveToFile("FileName.edt");
   Saves the current recording from the Record and Play
   control to a file (Save As dialog if the string is empty).

 ShellExecute("Action","File","Parameters","Initial Directory",ShowFlag: 0..);
   A powerful interface to Windows ShellExecute function.
     Action: open, print or explore
     File: a file that should be opened
     Parameters: usually none or else filetype and application specific
     Initial Dir: can be empty or else wherever you think it should be
     Show Flag: 0-Default, 1=ShowNormal

   For example ShellExecute("Open", "http://www.winedt.com");
   starts your default internet browser and connects it to WinEdt's
   Home Page. ShellExecute("Open", "%f", "", "%p"); Opens your
   current file with the applications associated with its file
   type (eg. a quick preview in your Internet Browser for ".html" files).

 InsertString("String", Append: #0..1);
   Inserts or Append a string in the selected block (a macro
   interface to the Insert String Command by default Alt+Right).

 RemoveString(", #0..1);
   Removes inserted or appended string from the selected block (a macro
   interface to the Remove String Command by default Alt+Left).

 ScrollUp(#1);
 ScrollDown(#1);
 ScrollLeft(#1);
 ScrollRight(#1);
   Simple commands that scroll your Window by a specified number of
   Chars or Lines (without moving the caret position inside a text).

 IfFileOlder("File1","File2","Then Macro","Else Macro");
   Executes one of the specifies macros depending on the
   modification stamp for the specified files. True if File1 is
   older than File2. Assumes that both files exist (use the IfFileExists
   macro to decide what to do if one of the files does not exist)...

 IfOK("Then Macro","Else Macro");
 SetOK(isOK: 0..1);
 WhileOK("Macro");
   These functions are intended to implement macros that terminate
   once the action fails (eg. a string was not found, or the
   command line up was executed when at the beginning of the
   document). However, it is rather tricky to find all the places
   and exceptions where the OK indicator should be turned off.
   I'll try to go through the code carefully and maintain the OK
   flag accordingly but it may take some time before this idea
   becomes useful... IfOK should work with most macro functions
   (but not necessarily all the commands and CMD calls).

 Popup("Popup Menu Name","Popup Menu Item",Visible:-1..1);
   Same as Menu except that WinEdt executes the command associated
   with the specified Popup Menu's Item.

   If the second parameter is empty then the macro activates the
   specified Popup Menu. Visibility of the Popup can be enforced
   or prevented by setting the Visibility parameter to 1 or -1,
   respectively (only applies when the second parameter is empty).

 SetTracking(#0..1);
   Some users wrote advanced macros which were running very slow
   because WinEdt was refreshing the screen after every change. It
   is now possible to turn tracking off and thus speeding up such
   macros. However, if you forger to turn Tracking Back again
   WinEdt may be a little confused and the arrows will appear no
   longer to work. In such case just press ESC for a second to
   restore tracking...

   Note that the Replace Dialog has an option for Quick Replace in
   its context popup menu. It has the same effect: it temporarily
   turns screen refreshing off while performing Replace All...

 SetCaption("WinEdt's Title");
   You can now reset the Application Title through this Macro
   function (by default WinEdt).

 SetLogFilename("Log File");
   For different compilers one may want to change the log-file
   name as specified in the Settings| Errors Dialog. Now it can be
   done on the run.

 SetLogTranslation("Translation Table");
   Specify the translation table used when reading the log file
   into the Error Dialog.

 ShowErrorLog(Visible: 0..2);
   Shows Error Dialog (0-hide, 1-show, 2-toggle visibility)
   In WinEdt the Error dialog is by default aligned at the
   bottom of the client window.

 CopyToClipboard("String", Append: 0..1);
   Inserts or appends a string into Windows Clipboard in Text
   format.

 OpenPrj("ProjectFile.prj", RestoreDocuments: -1..1);
    Opens WinEdt's project file and (optionally) restores opened
    documents (No=-1, Default=0, Yes=1).

 SavePrj("ProjectFile.prj");
   Save the current project to a ".prj" file.

 SendToDOS("DOS Window Caption","Command");
   With this macro function it is possible to run a permanent
   console window and send the commands to be executed there.

   The following macro compiles and previews a LaTeX document:

   SetFocus("MS-DOS Prompt");
   SendToDOS("MS-DOS Prompt", "cd ""%P""%\latex --src %N%\yap -1 %N%\");

   %\ is a line separator (CR+LF)

   Note that by skipping the SetFocus everything happens in the
   background.

   This macro was suggested by Leva and is intended for advanced users
   with programming skills. It is possible that on some systems
   there are problems or resource leaks with it. WinEdt sends the
   (already running) DOS Window the wm_DROPFILES Windows message
   with a globally allocated command line(s) string  as a parameter.
   DOS interprets this as a sequence of command lines and executes
   them consecutively (as if they were pasted in the console window).
   WinEdt deletes the memory after the message is processed by a
   DOS Window...

The following Macros have been implemented to allow advanced
users to manipulate strings inside macros. They have not been
extensively tested so use them with care and report any
problems:

 GetLength(Reg: 0..9, "String");
   Put the length of String in Reg.

 ExtractByIndex(Reg: 0..9, "String", Start:0, End:0);
   Put the substring of String between Start and End (where String
   is considered to have a zero-based index) into Reg

 InsertByIndex(Reg: 0..9, "S1", "S2", Index:0);
   Insert S2 into S1 starting at Index and put the result
   into Reg.

 FindInString("S1", "S2", Start, End:0..9, Flags, Resume:0);
   Put the start index of the first occurrence of S2 in S1 into
   Start (a register), the end index into End (a register).
   Flags allow the user to specify the search method:
        0: default
        1: search using regular expressions
       10: case-sensitive search
      100: backward search
     1000: begin searching at Resume index.  (This allows one
           to repeatedly search the same string for multiple
           occurrences of the same substring, etc.)
   The flags are chosen so that they may be specified as
   follows:
     1100: begin searching backwards through S1 starting at
           at Resume.
     0101: Backward search using regular expressions.

 ReplaceInString("S1", "S2", Start, End, Flags:0, Result:0..9);
   Replace the string between Start..End in S1 with S2
   and store the result in the %!<Result> register
   Usually called after FindInString ifOK
   Flags:  0 - default
           1 - Regular Expression
          10 - Respect Capitalization

 FormatString("String", Reg:0..9, "format");
   Perform the specified conversion to String and put the
   result in Reg.

   Formats are specified through the following keywords:

        "": default -- no conversion
        "whitespace": remove repeated whitespace between words
        "uppercase" : MAKE UPPERCASE
        "lowercase" : make lowercase
        "trimleft" : trim all whitespace on the left of the string
        "trimright" : trim all whitespace on the right of the string
        "trimboth" : obvious

   so, if %!9 = "  foo  bar  ",
   Convert("%!9", 9, "uppercase") = "  FOO  BAR  "
   Convert("%!9", 9, "whitespace") = "  foo bar  "
   Convert("%!9", 9, "trimleft uppercase") = "FOO  BAR  "
   etc.

-----------------------------------

WinEdt has a new Tab Page in the Settings Dialog called
Wrapping. It is intended for those that prefer a more
conventional style of wrapping where they are in charge of
Returns while the editor can temporarily wrap the lines with
respect to the Window size. It is now easy to impose such
wrapping for all documents through this dialog. In this Soft
wrapping mode WinEdt never inserts any line terminators and it
is possible to wrap and unwrap a document by clicking on the
WRAP panel in the status line.


More on the new Project Management:
-----------------------------------

If you want to associate .prj files to open WinEdt projects
after being double-clicked you should associate the following
Open action with .prj (WinEdt Project) files:

  ...\WinEdt.exe -V "[OpenPrj(|%1|,1)]"

Note that I am using | as a string delimiter in the file
specifications because Windows strips parameters of
double-quotes and (unlike a bar) single quotes could be a part
of the filename, eg.:

  ...\my mother's recipies.prj

-V prevents any previous project to be opened and immediately
closed if a new instance of WinEdt is about to be started.


Here is the info on OpenPrj macro function:

 OpenPrj("ProjectFile.prj", RestoreDocuments: -1..1);
    Opens WinEdt's project file and (optionally) restores opened
    documents (No=-1, Default=0, Yes=1).

This macro also allows you to create a project-specific Icons
(shortcuts to WinEdt.exe) -- just follow the above example
placing the actual project filename instead of %1...

____________________________________________________________________


Build: 19991013 is now available. Below is the list of the new
features and fixes.

Let me first answer a few questions that I am receiving in
large quantities.

There are several reasons why work on WinEdt 5 is going slowly
(compared with a much more bold releases of previous versions):

1. I would like to make it easy to upgrade: users that are not
interested in the new features (and believe me there are plenty
of those who have contacted me with such concerns) will benefit
from bug fixes and optimization in WinEdt 5 while having all
their custom settings preserved. I'll prepare a separate
"upgrade" version for such users and make sure that everything
goes smoothly.

2. I am receiving over 20 reports, feature requests and support
questions (not necessarily related to WinEdt) and addressing
such e-mails this is taking over four hours of my programming
time per day. In fact, my backlog folder has over 200
unanswered e-mails and it is becoming more and more obvious
that I won't be able to catch up. I am forced to focus on bug
reports, leaving feature requests for later and possibly
ignoring non-WinEdt related support questions.

3. I have to update the on-line documentation with all the new
features in WinEdt 5. In fact a need for a printable WinEdt
manual is becoming more and more obvious and I'll have to do
something about it before embarking on more features...

4. The list of improvements in WinEdt 5 does not necessarily
reflect the effort that went into it. Bug fixes and numerous
speed improvements have been implemented behind the scene. I
spent a lot of time organizing all the new options in a
comprehensible manner (rather than just throwing new
check-boxes in dialogs and letting things go out of control).

The official release of WinEdt is now a year old and it is
really important for the future of this project that WinEdt 5
gets released within a month. That's why I am once again asking
you for patience with feature requests and limit your reports
to bugs that you have observed in the alpha version...


Changes from build (19991004):
==============================

In Preferences| Project dialog you can now specify the
extension of WinEdt project files (the default .prj is
recommended).

The (Read) translation table can now be specified for the log
file as displayed in the Errors Dialog.

There is now a button and popup menu command "Reset GDI" which
resets the pages according to your current mode as well as a
new macro function ResetGDI("Mode"); does a similar thing with
optionally specified mode.

A bug with pasting a large string in the middle or the end of
the paragraph with wrapping turned on is now fixed (a part of
paragraph could be lost doe to an error in an (over)-optimized
WinEdt code).

 AddDictionary("Name","File","Filter", Enabled,Load,Save,Add,Completion: 0..1);
  Add the dictionary to the list of WinEdt's Dictionaries in the
  Dictionary Manager Dialog. If the dictionary exists then it
  updates its properties.

 RemoveDictionary("Name");
  Removes the specified dictionary from the list of dictionaries.

 RefreshAll;
  Refreshes all document windows (may be necessary after adding a
  dictionary).

 ResetGDI("Mode");
  Makes sure that GDI (Gather) control displays tab pages relevant
  to the current mode. One can optionally specified mode to
  suppress current value which depends on your main document or
  current document...

 IfFileOlder("File1","File2","Then Macro","Else Macro");
   Executes one of the specifies macros depending on the
   modification stamp for the specified files. True if File1 is
   older than File2. Assumes that both files exist (use the IfFileExists
   macro to decide what to do if one of the files does not exist)...

 SetLogTranslation("Translation Table");
   Specify the translation table used when reading the log file
   into the Error Dialog.

 ShowErrorLog(Visible: 0..2);
   Shows Error Dialog (0-hide, 1-show, 2-toggle visibility)
   In WinEdt the Error dialog is by default aligned at the
   bottom of the client window.



Changes from build (19991007):
=============================

A bug with appending "odd" extensions in save as dialog when
the specified file-type was not one of the declared ones in the
dialog has been fixed. Note that this bug only affected you if
you have the option "Append Extension" in Preferences| Include
Dialog Enabled. The problem was that Windows Save As Common
Dialog acts oddly when given a default extension parameter
(..tex was appended by the common dialog rather than WinEdt).
Now WinEdt takes care of appending the default extension (only
when the file is opened in the Mode associated with the
specified default extension and the above option is enabled and
NO extension was specified in the Save As dialog). Most users
(me being one of them) may prefer to have no appending done by
WinEdt and this is done by disabling the above mentioned
option.

The following two macros were added for additional control over
this behavior:

 SetDefExt("File Type");
 SetAppendDefExt(Append: 0..1);


The Project Dialog now allows you to specify macros OnOpen and
OnClose that are executed when the project is opened or closed.
This makes it possible to redefine WinEdt's appearance and
behavior when opening projects dealing with different types of
files (eg. TeX vs. HTML, etc...).


The macro IfMode proved rather useless since the mode could be
compared as a string directly (using ifStr('%!m'...) macro).
That's why a new function

 IfisMode("Document Mode","Mode or Submode", "Then","Else");

has been introduced. It returns true if the specified Mode or
Submode is a part of Document Mode. Document Mode can be
specified as %!m or %!M for the current or main document
(respectively).


For the sake of consistency the following macro functions have
been added to implement the Import/ Export functionality for
highlighted columns:

 AddColumns(");
 DelColumn(");
 LoadColumns(");
 ExtractColumns(");


NEW: WinEdt's Macro language has been extended to allow
user-defined local variables (rather than only the predefined
registers). The parameter:


 %$('local variable')

expands to the value assigned to the local variable or an empty
string if the variable is not defined or no value has been
assigned to it. Users can define up to 1000 local variables
(but in reality a few will do). This makes it possible to store
some information without relying on other macros not to
overwrite the value of a local register. The names of variables
are case sensitive and can consist of any string.


The following macro functions can be used to manipulate local
variables:

 Declare("Name");
 Release("Name");
 Assign("Name","Value");

Release('') erases all local variables. Assign can be used even
if the variable was not previously declared (it gets declared
on spot).

This makes it possible to declare variables (such as the one
pointing to the drive on which WinEdt is installed) in the
Startup Macro and then use them in your definitions as eg.

  %$('Base Drive');



Changes from Build (19991013)
=============================

From the response regarding the Activate event in the aligned
Gather Form it became clear that something has to be done about
it. I've explain technical difficulties that made the event
handler useless when the form is aligned. However, I've managed
to find a way around and now the OnActivate Macro (usually
GlobalMark) happens when the Gather Control is Activated.
Actually, that's almost true: the macro gets executed if any
item in the gather list is clicked and in the meantime the
focused document or the position within it has changed as a
consequence of a keyboard command or macro (not associated with
the Click or Double-Click event in the Gather Form). In any
case, this should solve the oddities with Double-click response
inserting citations to an unexpected place and establish the
behavior compatible with the non-aligned forms. The buttons
Global Mark and Global Return in the Gather Form remain to give
you more manual control over the position in your documents
when "GDI Tracking" is enabled.

I've also changed the standard List control with the List View
control which displays hints when an item doesn't fit in the
Window (similarly to the Tree View). The Gather control
(especially TOC) looks better but the price is a 40KB (approx.
2%) increase in the size of WinEdt's executable (nothing comes
free).

A small change has been made with respect to readonly files:
even if automatic detection of readonly status is enabled (and
Readonly timer is ticking, eg. for the purpose of RCS) WinEdt
preserves those Readonly files that were explicitly opened as
such through the check-box in the Open Dialog. Furthermore, the
check-box is no longer present in some Open dialogs (eg.
Execute Macro) where it does not make sense.

Finally, a minor bug fix: WinEdt makes sure that the Status
Line and the Tool Bar reflect the current state with an
infrequent timer (just in case if something has escaped). This
is fine. However, if you enter the Tool Bar Setup WinEdt
disabled buttons associated with disabled menu items make it
very hard to rearrange the Tool Bar (one has an average of 5
sec. to move a button). This is now fixed and Tool Bar buttons
are left alone in the Tool Bar Setup Mode...

______________________________________________________________________________


WinEdt 5 [Build 19991117 (beta)]
================================

Beta Release, the new Default Settings, and Upgrading
Instructions
------------------------------------------------------------------


Help has been updated to reflect most of the changes since the
official release of WinEdt32.

Slightly modified message processing which should address the
(unusual) problem with Kernel32 crash when opening or closing
the project files- I don't think this is a bug in WinEdt but I
failed to trace it to any specific Windows dll...

A few (very minor) reported bugs have been fixed and further
speed improvements have been made (eg. the Build Tree command
is now faster).

The need for the following Macros has arisen when preparing
different configurations for WinEdt:

  SetDefMode("Mode");
  SetDefPath("Path");
  SetInitLang(0..1);
  SetDefColors;
  SetVirginStart;


The main focus has been on preparing the default setup for this
beta version of WinEdt 5. Import/ Export macros have been
around since the last release of WinEdt32 but only a few users
realized their power when it comes to preparing and sharing
WinEdt configurations or making smooth upgrades while
preserving those private settings that took some effort to
prepare. To illustrate how this can be done, WinEdt's Options
Menu now contains a Configurations Submenu with the following
basic configurations:

  Default (MiKTeX+Default Settings)
  ASCII Editor   - Basic WinEdt's menu and Tool Bar
  HTML  Editor   - Basic WinEdt's menu and Tool Bar suitable for
                   HTML Mode (without a flavor of TeX)

  MiKTeX Default - MiKTeX's Accessories and Help Menu and Tool Bar
  MiKTeX Direct  - same as MiKTeX except that TeX is called
                   directly (rather than through the Batch Files)
                     Works even if the PATH does not contain
                     MiKTeX's Bin Folder
  YandY TeX      - Basic configuration for Y&Y TeX System

These menu commands execute macros in the corresponding folders
inside the Config directories. These macros, in turn, update
certain WinEdt menus, change the Tool Bar, and set a few task
specific parameters.


IMPORTANT: After you customize WinEdt you SHOULD run the
Configurations| Backup Macro even if you don't plan to play
with any other configurations! This will save you a lot of
problems if anything goes wrong with your configuration. Of
course, you can make more than one setup (just follow the
examples in the Config directories).


There really isn't much to this and it does not take an expert
to prepare or modify such configurations. The macro that
defines MiKTeX's Mode looks like:

__________________________________________________________________

//MiKTeX Setup for WinEdt

    Requires(19991101);  //Build number (About Dialog)

    SetCPPErr(0, 0, ""); // C-style Errors: Off

    SetDefExt(".tex");
    SetDefMode("TeX");
    SetDefPath(!"%P");

    ExtractMenus('_Main Menu.dat');     // Backup the Menus
    ExtractToolBar('_Tool Bar.dat');    // Backup the Tool Bar

    SetCaption(' WinEdt/MiKTeX');       // Caption
    AddMenus('MiKTeX Default.dat');     // Accessories: MiKTeX Indirect
    LoadToolBar('Tool Bar.dat');        // Tool Bar
    LetStr(0,'--src');                  // Enable SRC Specials

End;
__________________________________________________________________


The key functions are AddMenus and LoadToolBar. These two
functions use DATA files that were created by first extracting
the appropriately defined Tool Bar and Menu by the ExtractMenus
and ExtractToolBar macros. The file "MiKTeX Default.dat" has
been then edited (as an ASCII/DATA file in WinEdt) to include
only those menus that are (MiK)TeX specific: Insert,
Accessories and Help.

You can quickly try other configurations (eg. HTML or ASCII)
and see how the above mentioned Menus Change and how the Tool
Bar is modified to include only the buttons relevant to the
current configuration...

Note that the folder "...\Config\Backup" contains two macros
"_Backup.edt" and "_Restore.edt". These two macros can be
executed through the associated commands in the Options|
Configurations Menu. If you perform any changes to WinEdt you
may want to run Backup and thus make it possible to restore
your custom settings with a single command. This will make your
future WinEdt upgrades easy, allowing you to check out the new
appearance and features of WinEdt and then restore (some of)
your settings. In particular, you may want to selectively
restore only those components that you have extensively
customized (eg. Translation Tables, Dictionaries, Defaults,
Modes, Active Strings, Templates, etc...). When it comes to the
menu you may want to add your custom menus or merge them with
the ones that come with the new release, thus taking immediate
advantage of any new functionality that has been added to
WinEdt. Note that a complete Restore takes a few seconds, while
a selective configuration macros (such as the predefined ones)
work very fast because they only modify the selected
components. Users that are concerned about their custom
settings should definitely take a look at the existing
configuration macros and ".dat" files and prepare similar
scripts for their own needs. While testing such macros it is a
good idea to make a backup copy of your WinEdt.ini (just in
case something goes wrong!).

Note that WinEdt also provides user-defined Event Handlers for:

  MDI Activate - when a new document window gets focus
  Project Open
  Project Close
  WinEdt Startup
  WinEdt Exit

This makes it possible to call a project-specific configuration
macro when a project is opened, thus making sure that WinEdt is
properly configured... Advance users can consider taking
advantage of such functionality. To avoid performing
configuration in a case when WinEdt is already configured for
the task, one can use global registers, store the name of the
current configuration, and execute the macro only if needed
(thus reducing the unwanted flickering).

------------------------

A note on Startup Macro:

By default the Startup Event calls "...Config\Startup.edt"
macro.

This macro defines certain variables that are used in WinEdt's
menus:

______________________________________________________________________________

// WinEdt Startup Macro

// You can modify this file and restart WinEdt to reflect
// any characteristics specific to your (TeX) system...

// Get MiKTeX Install Root Directory from the Windows Registry

  Assign("MiKTeX-Root","%@('HKEY_LOCAL_MACHINE','SOFTWARE','MiK','MiKTeX','CurrentVersion','MiKTeX','Install Root');");
  Assign("MiKTeX-Bin","%@('HKEY_LOCAL_MACHINE','SOFTWARE','MiK','MiKTeX','CurrentVersion','MiKTeX','Install Root');");

  IfStr("%$('MiKTeX-Bin')","",">",>
    !"Assign('MiKTeX-Bin','%$(''MiKTeX-Bin'');\miktex\bin\')",>
    !"Assign('MiKTeX-Root','c:\texmf')"); // Try this but MiKTeX is probably not (properly) installed

  //YandY TeX Install Root Directory

  Assign("YandY","c:\yandy"); // Change this to your YandY TeX Install Root Directory...

  // TeX Accessories (optional)

  Assign('GSView','c:\gstools\gsview\gsview32.exe'); // Change this to your GSView executable
  Assign('AcroRead','C:\Program Files\Adobe\Acrobat 4.0\Reader\AcroRd32.exe'); // Acrobat Reader

End;

______________________________________________________________________________


MiKTeX's Root directory (usually "c:\texmf") is obtained from
Windows registry. This makes it possible to define Help Items
or call MiKTeX's executables regardless of where MiKTeX has
been installed. For example:

MiKTeX's Help is defined in WinEdt's Menu as the following
macro:

    WinHelp("%$('MiKTeX-Root');\doc\miktex\miktex.hlp");

Similarly, in the MiKTeX Direct configuration yap is called as:

    %$('MiKTeX-Bin');yap.exe -1 etc...

This should work even if MiKTeX's Bin directory is not on your
PATH (a very common problem that takes a lot of my
correspondence).

I have also decided to define GSView and AcroRd variables; thus
users that installed these programs in some other folder can
modify these entries and restart WinEdt without the need to
modify the menu (another commonly encountered problem that
takes a large part of my time).

Note that this macro takes advantage of the newly introduced
local variables "%$('variable') rather than the string
registers which can be used and overwritten by other macros.


The cleanup macro that is executed when WinEdt is closed by
default closes YAP (if running). You can modify it to do
something more intelligible...

______________________________________________________________________________


SRC packages have been simplified to avoid problems and
unwanted interactions with other packages. Since MiKTeX can
insert the src specials when started with --src qualifier the
packages don't have to be used or else they can be used as
inactive (to take advantage of the re-defined \include command
that can keep track of input files for Error Search from
WinEdt). The samples included in the default settings thus
contain the following line in their preamble:

    \usepackage[inactive]{srcltx}%SRC Specials for DVI Searching

In MiKTeX configuration the Accessories menu has two items:

    SRC Special On and Off

These items are defined as macros that assign or erase the
value "--src" for the %0 global string register. This works
because by default the LaTeX command is now defined as:

    %~B\Bin\MiKTeX\Latex.bat %0 "%N%T"

and %0 is expanded accordingly.

______________________________________________________________________________


MiKTeX's Folder in the default settings has been expanded with
dvipdfm and tth utilities. For more information on these
utilities please consult MiKTeX's Documentation
(...texmf\Doc\...).

An enhanced version of HTML Mode as prepared by Denis Stancer
has now become a part of the Default, as well as (a more
specialized) HTML Configuration. Furthermore, I made an
experiment and in the Settings| Wrapping Dialog I defined Soft
Wrapping for HTML files (new feature). It appears to work fine
and WinEdt's web pages have been converted appropriately for
such editing. Of course this can be changed instantly by users
that do not like such preferences by changing the settings the
above mentioned dialog.

A new menu Macros has been introduced to accommodate the new
Record and Play commands. Items "Execute Macro" and "Define and
Run Macro" has been introduced in this menu to allow you to
execute a predefined macro script (.edt file) or to type and
run a custom macro. Note that previously the "Execute Macro"
menu item had been placed in the (somewhat crowded) Accessories
Menu.

In the default settings the File and Project Menu end with an
"open" submenu and thus the file list is appended there rather
than in the corresponding main Menu Item. You can change this
by appending the "Return" to the Submenu or deleting the
submenu and placing its contents in the main menu item. This
choice is now available due to the following extension of
WinEdt's Menu management functionality:

  - Three special menus (File, Windows, and Project) allow you to
  append the list of recently opened Files, Documents and
  Projects. If such menu ends with an "open" submenu that is not
  ended using the "Return" menu Item then the lists are placed at
  the bottom of such submenu rather than the menu itself. This
  makes it possible to "hide" such lists should you wish to do
  so...


The Tool Bar Buttons and Menu Icons have been improved and now
(hopefully) look more professional. In particular the Menu
Icons now no longer load a disabled image but generate one as
needed. Unfortunately, a few Tool Bar Images (a total of six of
them) have been (re)moved (their index in WinEdt.btn has
changed) or replaced with the new ones. The idea was to leave
the last five images undefined and thus allow users to use
these buttons for their own bitmaps without sacrificing
compatibility with other configurations. I suggest that you
stick with the new scheme and possibly copy any custom images
in the new setup (modify the last five buttons in Winedt.btn)
and make a few changes in the Menu Setup (if needed). However,
if you are determined to stick with your current configuration
as it is you can simply copy your current WinEdt.ini .btn .img
and the whole Bitmaps folder over the files in the new WinEdt 5
setup...


A known problem (and solution) with tool bars in dialogs:
=========================================================

If the Tool Bars in your Dialogs display no images this is due
to the obsolete version of your "comctl32.dll" in Windows
System directory. You should download and install a newer
version from

   http://www.microsoft.com/msdownload/ieplatform/ie/comctrlx86.asp

Here is a report from one of the users that had a similar
problem:

>This is to confirm that in my case updating comctl32.dll did indeed
>solve the problem of missing bitmaps in the dialog buttons.
>
>The comctl32.dll causing the trouble was 371KB big and had date 22/03/97
>
>I found in Microsoft's site THREE different comctl32 updates:
>
>Com32upd.exe, which reported that the installed comctl32.dll was the
>same or newer.
>
>401comupd.exe, which I installed and solved the problem.
>
>50comupd.exe, which I did not try.
>
>I should add that I do not have Internet Explorer installed in this computer.

______________________________________________________________________________


How to upgrade to WinEdt 5:
===========================


Depending on the importance of your custom settings there are a
few different options:

  (0) If you don't care for any new functionality (or you prefer
  to make additions to the menu yourself) you can start Setup.exe
  and choose the Custom Setup Install Shield Option. You can
  select only the Basic Upgrade component. This way only the
  executable is installed over the old version of WinEdt. However,
  to see the new appearance of bitmaps and menu you may want to
  try the steps (1) and (2) below. You should still be able to
  restore your current configuration by following the
  instructions below...

  (1) If you did not customize WinEdt extensively, exit WinEdt, rename
  the old WinEdt directory to WinEdt.old and install WinEdt 5 from
  scratch:
      - place a self extracting archive winedt5.exe to a temporary
      directory and double-click on it to unpack it
      - Go to the folder where you have unpacked winedt5.exe and
        double-click on the Setup.exe
      - Let install Shield guide you through the rest

  (2) If you did customize WinEdt perform the steps in (1)

       (a) you can radically move your old WinEdt.ini to the new
       installation and thus preserve all your previous settings
       while also not taking immediate advantage of any new
       features (you'll have to manually add the selected new menu
       items following the instructions in What's New).


       (b) you can start the old WinEdt and perform a backup of
       your configuration settings using the "_Backup.edt" macro
       in WinEdt's "...\Config\Backup" folder. Now you can
       selectively add only those components that you have
       extensively modified. Note that the AddMenu macro allows
       you to add only certain menus after you edit the "Main
       Menu.dat" file. Almost all components (eg. Translation
       Tables, Active Strings, Highlighting Schemes, etc...) can
       be exported and imported either from the corresponding
       dialogs or through the import/ export macros as described
       in WinEdt's "...\Doc\Macros.txt" document.

The Option (2) only applies if you have WinEdt32 Build 19981001
(or [yyyymmdd] later) installed on your system.


Both (a) and (b) may leave you with a few improperly assigned
tool bar buttons. You can, of course, copy your old Bitmaps
folder together with WinEdt.btn but this will make your
configuration incompatible with others. I would strongly
recommend that you manually correct your tool bar buttons and
(in the Menu Setup Dialog) assign the proper images to a few
commands and accessories that are affected by the changes made
in the default setup. It should only take a a few minutes to do
so. After you've configured WinEdt 5 to your standards you
should run the "_Backup.edt" to ensure that your setup can
always be restored after some other configuration is being
executed (either on purpose or accidentally). Making a backup
of your private WinEdt.ini in WinEdt's Config\Backup directory
is also a good idea!


After WinEdt 5 is installed you should go through the dialogs
in the Options Menu to get a feeling how the Options and
Preferences are organized. Even if you are not planning to make
any immediate changes it is good to know what is there for
later when you may want to change something...

Some of the features described here are not yet a part of the
regular documentation or on-line help. Reading *this* file is
strongly recommended!

______________________________________________________________________________

WinEdt 5 [Build 19991121 (beta)]
================================


A bug with refreshing long lines has been fixed. Sorry about
that (many users panicked because of it)!


Some users misunderstood the meaning of the new configuration
settings in the options menu and they overwrote their custom
settings. Here what you should know:

IMPORTANT: After you customize WinEdt you SHOULD run the
Configurations| Backup Macro even if you don't plan to play
with any other configurations! This will save you a lot of
problems if anything goes wrong with your configuration. Of
course, you can make more than one setup (just follow the
examples in the Config directories). The Options|
Configurations| Restore command restores your "last" backup!


If you've managed to overwrite your configuration without
backing it up you can still restore it immediately after you
tried any other pre-defined configuration by doing the
following:

In the \Config subfolder where you have experimented with one
of the pre-defined settings there are two (backup) files "_Tool
Bar.dat" and "_Main Menu.dat". The following Macro restores the
settings if placed in the same directory and executed through
WinEdt's Macros| Execute Macro Command:

// Restore All Important Settings

    Requires(19991027);
    LoadMenus('_Main Menu.dat');
    LoadToolBar('_Tool Bar.dat');
End;


The status line now takes advantage of the second custom panel
and it toggles the --src specials qualifier for MiKTeX. You can
easily change or hide this panel through the Appearance|Status
Line Dialog. A new macro UpdateStatus has been introduced to
make this functionality work better (it refreshes the Status
Line). Additional macros for use in the configuration macros:
  SetPanelA(visible:0..1; "Max String","Parameter","On-Click Macro");
  SetPanelB(visible:0..1; "Max String","Parameter","On-Click Macro");

SetPanelB(1,'--src','%%0',>
   !|IfStr("%0","--src","=","LetStr(0,'')","LetStr(0,'--src')");UpdateStatus]|);

Does the trick.


The startup Macro now searches Windows registry to find GSView
and AcroRd32. This should work in most cases regardless of
where are the above utilities installed. The following macro
does this:

  LetReg(0,|%@('HKEY_LOCAL_MACHINE','SOFTWARE','CLASSES','psfile','DefaultIcon',' ');|);
  GetLength(1,|%!0|);
  ExtractByIndex(0, |%!0|, 0,%!1-3);
  Assign('GSView',|%!0|);

  //Prompt(|%$('GSView')|);  // Debugging

  IfStr("%$('GSView')","","=",>
    !"Assign('GSView','c:\gstools\gsview\gsview32.exe')"); // GSView not Installed?

  // Assign('GSView','c:\gstools\gsview\gsview32.exe'); // GSView


  LetReg(0,|%@('HKEY_LOCAL_MACHINE','SOFTWARE','CLASSES','Software','Adobe','Acrobat','Exe',' ')|);
  GetLength(1,|%!0|);
  ExtractByIndex(0, |%!0|, 1,%!1-2);
  Assign('AcroRead',|%!0|);

  //Prompt(|%$('AcroRead')|); // Debugging

  IfStr("%$('AcroRead')","","=",>
    !"Assign('AcroRead','C:\Program Files\Adobe\Acrobat 4.0\Reader\AcroRd32.exe')"); // Acrobat Reader not Installed?

  // Assign('AcroRead','C:\Program Files\Adobe\Acrobat 4.0\Reader\AcroRd32.exe'); // Acrobat Reader


If for some reason this does not work don't panic! Just Open
the Startup.edt file and enter the definitions:

  Assign('AcroRead','<your location>\AcroRd32.exe'); // Acrobat Reader

Similarly for GSView. Restart WinEdt or execute the Statup.edt
through the Macros| Execute Macro command. Let me know if you
have problems with the New Startup Macro (even if AcroRd32 and
GSView has been properly installed on your computer)...


Note that all this is irrelevant for users that upgraded
WinEdt32 and kept their old WinEdt.ini file...


Help in the Settings Dialog explains the meaning of the new
options in the Wrapping Tab Page. You should read this
information if you want to take advantage of new wrapping
options which were introduced for users that prefer more word
processor like wrapping. And don't worry: the old wrapping is
still there but you may have to enable the option "Persistent
Line Wrapping" in the above mentioned dialog to ensure the
"line wrapping" even if the Wrapping is turned off in the
Status Line...

______________________________________________________________________________

WinEdt 5 [Build 19991123 (beta)]
==============================


Minor fixes, improved documentation and setup...

______________________________________________________________________________


WinEdt 5 [Build 19991226 (beta)]
================================


New Docking Options and improved default setup...

______________________________________________________________________________


Pre-release of WinEdt 5:
------------------------

WinEdt 5 [Build 20000222 (beta)]
================================


A few reported minor bugs (form the last official build
19991226) have been fixed and the default settings have been
slightly improved (once again!).

The system-specific problems with some accessories and macros
in the default settings (such as PDFLaTeX.edt and AcroRd32.exe
in Startup.edt) have been addressed...

Improved GUI (including Tool Bar Buttons and GUI control as
modified and announced by Alexander Kiselov). To avoid problems
with small screens and low-color settings (in which case the
"improved" GUI isn't really an improvement) WinEdt detects such
settings when launched for the first time and uses the old GUI
bitmaps if the system does not meet the requirements (at least
800pxl horizontal resolution and 16-bit [or more] color
scheme). I've tested it my old computer and it appears to work
as intended...

The Project Manager now allows optional "relative file
specification" which makes it possible to carry the projects
between different folders, drives, or computers.

Conventional wrapping is a choice of many new users. WinEdt now
"intelligently" print such files. In fact, the printing dialog
has a new option "Word Wrapping" which instructs WinEdt not to
break lines blindly at the right paper margin...

The highlighting| Switches Dialog have been slightly
re-designed in an attempt to make it more intuitive. It does
not, however, implement any new functionality...

The gather form's List View control was too slow when a large
number of items were appended to it. In fact, the time for
(1000+) additions turned out to be of order "n^2" which is
unacceptable (out of principle). WinEdt now takes care of this
by representing the collected data in its own structures and
this makes it possible to insert many more items. The Tool Bar
in the Gather Form now has a button for Copy to the Clipboard
which was before only possible through the context popup menu.
Furthermore, while experimenting with collecting items in a
large data base I've discovered that some feedback might be
needed when collecting 10K+ items: this is now taken care of.

*** NEW: WinEdt now comes with a configuration Wizard which is
displayed the first time the program is started and can later
be called through the Help| Configuration Wizard Command. It
has a selected set of option pertaining to Wrapping, Backup,
Projects, etc... The Wizard also contains a page that helps you
fix any (MiK)TeX related problems and suggests solutions and
alternatives (eg. MiKTeX Direct Configuration if the PATH does
not contain MiKTeX's Binary directory but MiKTeX can be
detected from the Windows Registry). There are also a few pages
containing (selected) answers to FAQs and explanations on "how
to...". This should (hopefully) make it easier for new users to
understand how WinEdt interacts with other accessories and how
many minor system-specific issues can be addressed and
resolved.


The text in Wizard's Pages and WinEdt's Help needs some editing
and polishing. While processing the incoming reports I'll focus
on this aspect and (pending any major disasters) WinEdt 5 will
be finally released by the end of March. Many users are asking
what happened to the self-imposed January dead line: The answer
is that I simply cannot keep up with the feedback and I find it
extremely hard to draw a line. So once again, limit your
reports to WinEdt-related problems and save your suggestions
for later. WinEdt 5 is much better and problem/bug-free
compared to the official WinEdt32 and it is time to make it
available to wider audience on CTAN.

For those that are keen to have WinEdt improved further there
will be plenty of opportunities to speak out and test new
features as they become available in the new alpha and beta
versions. The majority, however, appears to prefer a stable
release every 12 months rather than downloading permanent beta
versions...

____________________________________________________________________


WinEdt 5 [Build 20000308 (v. 5.1)]
==================================

The following problems have been addressed for for Build
20000308:

- A (critical!) bug with scrolling in docked Gather form is
fixed

- An error in macros for insertion of matrices and arrays have
been fixed (a missing ")"),

- WinEdt now allows more than one row of document tabs. There
is a new option in the Appearance| Tabs Dialog that controls
this behavior. The Tab control gets automatically re-sized.
Although with 50+ document tabs the control produces some
visual flickering when adding or removing new document tabs
(depends on your hardware) it can still come handy for users
that want direct access to a few dozen opened files (assuming
they have a large enough screen to use the upper space for 3 or
4 rows of document tabs).

- Most WinEdt's Modal dialogs now center with respect to the
Main Form rather than the screen. Also the "Parent Font"
inheritance have been disabled in some dialogs to prevent odd
alignment of buttons in dialogs as experienced by users that
use larger default fonts...

- A minor problem with rearranging the tool bar and dropping
the buttons on the left edge has been fixed. This might have to
do with the two reported spaces on the left of the first
button...

- In the Syntax Highlighting Dialog -> Columns, the heading
says Highligted columns (missing h): fixed...

- A bug with the ghost caret after scrolling by clicking on the
scroll bars is fixed.

- The email and www field in WinEdt's About box now respond to
clicks (made possible by the macros below and the ShellExecute
macro function)...

- The following new macro functions have been implemented:

  SetFolder("Path");
  SetEnvVar("Name","String Value");
  SetRegKey("KEY_...","Key1\Key2...","String Value");
  SetRegStr("KEY_...","Key1\Key2...","Strung Name","String Value");
  SetWinEdtRegStr("String Name","String Value");

  SendMail("Subject","Text","Recipients","Attachments");

  For example:
  ============

    SendMail('Test Message',"Attached is WinEdt.txt",>
      "WinEdt Team|support@winedt.com","%F|WinEdt.txt");

    You can specify more than one recipient or attachment
    (separate up to 1024 items by semi-columns ;)

    The second optional filename, following the bar |, is the one
    that the recipient sees...

    All parameters are optional and can be entered or modified
    once the e-mail client is started.

    If a recipient is preceded by "*" or "?" the massage is CC'd
    or BCC'd (respectively) to that address:

      "WinEdt Team|support@winedt.com;*Alex|alex@winedt.net"


IMPORTANT: The MAPISendFunction (and the rest of the MAPI
interface on which the default WinEdt's Send Mail command and
macro rely) does not work unless the Windows Registry contains
the string MAPI with value "1". This can be checked and set
from within WinEdt with:

  // Returns the value 1?
  %@("HKEY_LOCAL_MACHINE","SOFTWARE\Microsoft\Windows Messaging Subsystem","MAPI");

  // Sets the value to 1
  SetRegStr("HKEY_LOCAL_MACHINE",>
    "SOFTWARE\Microsoft\Windows Messaging Subsystem", "MAPI", "1");

If WinEdt's Send Mail Command fails and WinEdt detects the
absence of the above Registry Entry the user is prompted to
allow WinEdt to add the value and restart the program. The lack
of this registry key indicates that your email client may not
support MAPI in which case the above fix won't make any
difference. However, in some cases it is possible that although
your email client has a sufficient MAPI functionality to allow
WinEdt to send email messages the registry was not
appropriately modified during its installation. The above fix
will enable the MAPI functionality (assuming that it is
supported by your email program). For example, the registry
entry may have been deleted when you uninstall some other email
client that you are not using (eg. Outlook Express)...

______________________________________________________________________________


For the latest news and future plans see also News.txt!

______________________________________________________________________________
